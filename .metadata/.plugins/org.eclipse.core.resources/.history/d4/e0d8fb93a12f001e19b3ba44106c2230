package com.appz.mbpfm.controller;
//package com.appz.mbpfm.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.apache.commons.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.origin.SystemEnvironmentOrigin;
import org.springframework.core.env.Environment;
import org.springframework.data.repository.CrudRepository;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.appz.mbpfm.jpa.AccountTransactionEntity;
import com.appz.mbpfm.jpa.AccountTransactionHistoryEntity;
import com.appz.mbpfm.jpa.BeneficiaryDataEntity;
import com.appz.mbpfm.jpa.BudgetDetailsEntity;
import com.appz.mbpfm.jpa.BudgetMasterEntity;
import com.appz.mbpfm.jpa.ContactMasterEntity;
import com.appz.mbpfm.jpa.CustomerMasterEntity;
import com.appz.mbpfm.jpa.CustomerUserLoginEntity;
import com.appz.mbpfm.jpa.DashboardConfigurationEntity;
import com.appz.mbpfm.jpa.EuroHistDataEntity;
import com.appz.mbpfm.jpa.ExpenseCategoriesMasterEntity;
import com.appz.mbpfm.jpa.GoalDetailsEntity;
import com.appz.mbpfm.jpa.GoalStatementsEntity;
import com.appz.mbpfm.jpa.IncomeCategoriesMasterEntity;
import com.appz.mbpfm.jpa.MonthlyExpenseDataEntity;
import com.appz.mbpfm.jpa.TransactionModesEntity;
//import com.appz.mbpfm.jpa.MonthlyExpenseDataEntity;
import com.appz.mbpfm.jpa.PopularCategoryDetailsEntity;
import com.appz.mbpfm.jpa.PredictionTransactionsEntity;
//import com.appz.mbpfm.jpa.PredictionTransactionsEntity;
import com.appz.mbpfm.jpa.PushTokenCustomerMappingEntity;
import com.appz.mbpfm.jpa.TransactionBeneficiaryMappingEntity;
import com.appz.mbpfm.jpa.TransactionContactsMappingEntity;
import com.appz.mbpfm.jpa.TransactionDetailsEntity;
import com.appz.mbpfm.jpa.UnsplitAccountTransactionEntity;
import com.appz.mbpfm.jpa.WeeklyExpenseDataEntity;
import com.appz.mbpfm.jpa.YearlyExpenseDataEntity;
//import com.appz.mbpfm.jpa.WeeklyExpenseDataEntity;
//import com.appz.mbpfm.jpa.YearlyExpenseDataEntity;
import com.appz.mbpfm.model.BeneficiaryDataModel;
import com.appz.mbpfm.model.CategoryDetailsModel;
import com.appz.mbpfm.model.CategoryRequestModel;
import com.appz.mbpfm.model.ContactsDataModel;
import com.appz.mbpfm.model.DashboardFilterModel;
import com.appz.mbpfm.model.FormWrapperModel;
import com.appz.mbpfm.model.GetTransactionEncryptedResponseModel;
import com.appz.mbpfm.model.GetTransactionResponseDataModel;
import com.appz.mbpfm.model.LoginDataResponseModel;
import com.appz.mbpfm.model.SplitTransactionRequestModel;
import com.appz.mbpfm.model.TransactionEditDataModel;
import com.appz.mbpfm.model.TransactionResponseEncryptedModel;
import com.appz.mbpfm.model.TransactionsResponseModel;
import com.appz.mbpfm.repository.AccountTransactionHistoryJpaRepository;
import com.appz.mbpfm.repository.AccountTransactionJpaRepository;
import com.appz.mbpfm.repository.BeneficiaryDataJpaRepository;
import com.appz.mbpfm.repository.BudgetDetailsJpaRepository;
import com.appz.mbpfm.repository.BudgetMasterJpaRepository;
import com.appz.mbpfm.repository.ContactMasterJpaRepository;
import com.appz.mbpfm.repository.CustomerMasterJpaRepository;
import com.appz.mbpfm.repository.DashboardConfigurationJpaRepository;
import com.appz.mbpfm.repository.ExpenseCategoriesMasterJpaRepository;
import com.appz.mbpfm.repository.FiDetailsJpaRepository;
import com.appz.mbpfm.repository.GoalCategoriesJpaRepository;
import com.appz.mbpfm.repository.GoalDetailsJpaRepository;
import com.appz.mbpfm.repository.GoalStatementsJpaRepository;
import com.appz.mbpfm.repository.IncomeCategoriesMasterJpaRepository;
//import com.appz.mbpfm.repository.MonthlyDataJpaRepository;
import com.appz.mbpfm.repository.MonthlyExpenseDataJpaRepository;
//import com.appz.mbpfm.repository.MonthlyExpenseDataJpaRepository;
import com.appz.mbpfm.repository.PopularCategoryDetailsJpaRepository;
import com.appz.mbpfm.repository.PredictionTransactionsJpaRepository;
//import com.appz.mbpfm.repository.PredictionTransactionsJpaRepository;
import com.appz.mbpfm.repository.PushTokenCustomerMappingJpaRepository;
import com.appz.mbpfm.repository.TransactionBeneficiaryMappingJpaRepository;
import com.appz.mbpfm.repository.TransactionContactsMappingJpaRepository;
import com.appz.mbpfm.repository.TransactionDetailsJpaRepository;
import com.appz.mbpfm.repository.TransactionModesJpaRepository;
import com.appz.mbpfm.repository.UnsplitAccountTransactionJpaRepository;
//import com.appz.mbpfm.repository.WeeklyDataJpaRepository;
import com.appz.mbpfm.repository.YearlyExpenseDataJpaRepository;
import com.appz.mbpfm.repository.WeeklyExpenseDataJpaRepository;
import com.appz.mbpfm.repository.YearlyExpenseDataJpaRepository;
import com.appz.mbpfm.services.EuroHistoryDataService;
import com.appz.mbpfm.services.ValidateService;
import com.appz.mbpfm.utils.CommonUtils;
import com.appz.mbpfm.utils.Constants;
import com.appz.mbpfm.utils.CryptoJS;
import com.appz.mbpfm.utils.FilesUtil;
import com.appz.mbpfm.utils.GeneralResponse;
import com.appz.mbpfm.utils.ObjectParser;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@RestController
@CrossOrigin(Constants.ORIGIN)
@RequestMapping("/api/account/transactions")
public class AccountTransactionOperationsController {

	@Autowired
	public TransactionDetailsJpaRepository transactionDetailsJpaRepository;

	@Autowired
	private TransactionModesJpaRepository modesJpaRepository;

	@Autowired
	private AccountTransactionJpaRepository accountTransactionJpaRepository;

	@Autowired
	private CommonUtils commonUtils;

	@Autowired
	private ValidateService validateService;

	@Autowired
	private CustomerMasterJpaRepository customerMasterJpaRepository;

	@Autowired
	private GoalCategoriesJpaRepository goalCategoriesJpaRepository;

	@Autowired
	private Environment env;

	@Autowired
	private ContactMasterJpaRepository contactMasterJpaRepository;

	@Autowired
	private TransactionContactsMappingJpaRepository transactionContactsMappingJpaRepository;

	@Autowired
	private BeneficiaryDataJpaRepository beneficiaryDataJpaRepository;

	@Autowired
	private FiDetailsJpaRepository fiDetailsJpaRepository;

	@Autowired
	private TransactionBeneficiaryMappingJpaRepository transactionBeneficiaryMappingJpaRepository;

	@Autowired
	private IncomeCategoriesMasterJpaRepository incomeCategoryJpaRepository;

	@Autowired
	private ExpenseCategoriesMasterJpaRepository categoriesJpaRepository;

	@Autowired
	private PredictionTransactionsJpaRepository predictionTransactionsJpaRepository;

	@Autowired
	private YearlyExpenseDataJpaRepository yearlyExpenseDataJpaRepository;

	@Autowired
	private MonthlyExpenseDataJpaRepository monthlyExpenseDataJpaRepository;

	@Autowired
	private WeeklyExpenseDataJpaRepository weeklyExpenseDataJpaRepository;

	@Autowired
	private UnsplitAccountTransactionJpaRepository unsplitAccountTransactionJpaRepository;

	@Autowired
	private PopularCategoryDetailsJpaRepository popularCategoryDetailsJpaRepository;

	@Autowired
	private EuroHistoryDataService euroHistoryDataService;

	@Autowired
	private BudgetMasterJpaRepository budgetMasterJpaRepository;

	@Autowired
	private BudgetDetailsJpaRepository budgetDetailsJpaRepository;

	@Autowired
	private PushTokenCustomerMappingJpaRepository pushTokenCustomerMappingJpaRepository;

	@Autowired
	private DashboardConfigurationJpaRepository dashboardConfigurationJpaRepository;

	@Autowired
	private GoalDetailsJpaRepository goalDetailsJpaRepository;

	@Autowired
	private GoalStatementsJpaRepository goalStatementsJpaRepository;

	@Autowired
	private CryptoJS cryptoJs;

	@Autowired
	private TransactionModesJpaRepository transactionModesJpaRepository;

	@Autowired
	private AccountTransactionHistoryJpaRepository accountTransactionHistoryJpaRepository;

	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
	Gson gson = new GsonBuilder().serializeNulls().create();
	LoginDataResponseModel authenticateUserResponse = null;

	@PostMapping("/get/category/wise")
	public ResponseEntity<GeneralResponse> getTransactionsDataCategory(
			@RequestHeader(value = "deviceImei", required = false) String deviceImei,
			@RequestHeader(value = "deviceName", required = false) String deviceName,
			@RequestHeader(value = "requestId", required = false) String requestId,
			@RequestHeader(value = "timestamp", required = false) String timestamp,
			@RequestHeader(value = "channel", required = false) String channel,
			@RequestHeader(value = "ipaddress", required = false) String ipaddress,
			@RequestHeader(value = "latitude", required = false) Double latitude,
			@RequestHeader(value = "longitude", required = false) Double longitude,
			@RequestHeader(value = "deviceMac", required = false) String deviceMacAddress,
			@RequestHeader(value = "token", required = false) String token, HttpServletRequest request,
			HttpServletResponse response, @RequestBody DashboardFilterModel dataModel) {
		ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheckProduct(token);
		if (generalResponse.getBody().getStatus() == 200) {
			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
		} else {
			return generalResponse;
		}
		if (authenticateUserResponse != null) {
			List<TransactionModesEntity> modes = (List<TransactionModesEntity>) modesJpaRepository.findAll();
			HashMap<String, TransactionModesEntity> modesMap = new HashMap<String, TransactionModesEntity>();
			List<TransactionsResponseModel> responseList = null;
			List<AccountTransactionEntity> accountTransactions = null;
			try {
				if (dataModel != null) {
					// if(filter.getCalenderSelectedFlag()!=null && filter.getCalenderSelectedFlag()
					// ==1)
					// {
					dataModel = CommonUtils.setDates(dataModel);
					// }
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			if (modes.size() > 0) {
				for (TransactionModesEntity m : modes) {
					modesMap.put(m.getModeName(), m);
				}
			}
			try {
				if (dataModel.getCategoryId() == null) {
					dataModel.setCategoryId(0L);
					// logger.info("LinkedAccountId:"+dataModel.getLinkedAccountId()+"
					// "+dataModel.getStartDate()+" "+dataModel.getEndDate());
					accountTransactions = accountTransactionJpaRepository
							.findByLinkedAccountsLinkedAccountIdAndActiveFlagAndCategoryIdAndTransactionTimestampBetweenOrderByIdDesc(
									  Long.parseLong(dataModel.getLinkedAccountId().toString()), 1, 0l, dataModel.getStartDate(),
									dataModel.getEndDate());
				} else {
					accountTransactions = accountTransactionJpaRepository
							.findByLinkedAccountsLinkedAccountIdAndActiveFlagAndCategoryIdAndTransactionTypeAndTransactionTimestampBetweenOrderByIdDesc(
									dataModel.getLinkedAccountId().longValue(), 1, dataModel.getCategoryId(),
									dataModel.getType(), dataModel.getStartDate(), dataModel.getEndDate());
				}

				if (accountTransactions.size() > 0) {
					responseList = commonUtils.setDataToModel(accountTransactions, modesMap, generalResponse, null);
					List<String> listOfEncryptedData = new ArrayList<String>();
					listOfEncryptedData.add("amount");
					listOfEncryptedData.add("userPreferredCurrencyAmount");

					response.setHeader("encryptedData", new Gson().toJson(listOfEncryptedData));

					List<String> beneficiary = new ArrayList<String>();
					beneficiary.add("beneficiaryAccountNumber");
					response.setHeader("beneficiary", new Gson().toJson(beneficiary));
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_OK,
							Constants.REQUEST_COMPLETED, commonUtils.setDataToModelEncrypted(responseList),
							authenticateUserResponse.getToken()), HttpStatus.OK);
				} else {
					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
									Constants.NO_DATA_AVAILABLE, null, authenticateUserResponse.getToken()),
							HttpStatus.OK);
				}
			} catch (Exception e) {
				e.printStackTrace();
				// logger.error(e);
				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
								null, authenticateUserResponse.getToken()),
						HttpStatus.OK);
			}
		} else {
			generalResponse = new ResponseEntity<GeneralResponse>(
					new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.INVALID_CUSTOMER,
							HttpServletResponse.SC_CONFLICT, null),
					HttpStatus.OK);
		}

		return generalResponse;
	}

	@PostMapping("/mode/wise/getTransactions")
	public ResponseEntity<GeneralResponse> getTransactionsDataModeWise(
			@RequestHeader(value = "deviceImei", required = true) String deviceImei,
			@RequestHeader(value = "deviceName", required = true) String deviceName,
			@RequestHeader(value = "requestId", required = true) String requestId,
			@RequestHeader(value = "timestamp", required = true) String timestamp,
			@RequestHeader(value = "channel", required = true) String channel,
			@RequestHeader(value = "ipaddress", required = true) String ipaddress,
			@RequestHeader(value = "latitude", required = true) Double latitude,
			@RequestHeader(value = "longitude", required = true) Double longitude,
			@RequestHeader(value = "deviceMac", required = true) String deviceMacAddress,
			@RequestHeader(value = "token", required = false) String token, HttpServletRequest request,
			HttpServletResponse response, @RequestBody DashboardFilterModel dataModel) {
		
		ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheckProduct(token);
		
		if (generalResponse.getBody().getStatus() == 200) {
			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
		} else {
			return generalResponse;
		}
		
		System.out.println("inside acc transaction line 359 ");
		if (authenticateUserResponse != null) {
			HashMap<String, GetTransactionResponseDataModel> getTransactionsMap = new HashMap<String, GetTransactionResponseDataModel>();
			GetTransactionResponseDataModel transactionModel = null;
			List<TransactionModesEntity> modes = (List<TransactionModesEntity>) modesJpaRepository.findAll();
			HashMap<String, TransactionModesEntity> modesMap = new HashMap<String, TransactionModesEntity>();
			if (modes.size() > 0) {
				for (TransactionModesEntity m : modes) {
					modesMap.put(m.getModeName(), m);

				}
			}
			
			try {
				if (dataModel != null) {
					// if(filter.getCalenderSelectedFlag()!=null && filter.getCalenderSelectedFlag()
					// ==1)
					// {
					dataModel = CommonUtils.setDates(dataModel);
					// }
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			try {
				int year1 = dataModel.getYear();
				int month = dataModel.getMonth();
				YearMonth yearMonthObject = YearMonth.of(year1, month);
				int daysInMonth = yearMonthObject.lengthOfMonth();
				LocalDate localDate1 = LocalDate.of(year1, month, 1);
				LocalDate localDate2 = LocalDate.of(year1, month, daysInMonth);
				Date startDate = java.sql.Date.valueOf(localDate1);
				Date endDate = java.sql.Date.valueOf(localDate2);

				System.out.println("Start date---------------" + startDate);
				System.out.println("End date---------------" + endDate);

//							System.out.println(
//									dataModel.getLinkedAccountId() + "-  " + dataModel.getStartDate() + "-" + dataModel.getEndDate());
				List<AccountTransactionEntity> transacList = accountTransactionJpaRepository
						.findByLinkedAccountsLinkedAccountIdAndActiveFlagAndTransactionTimestampBetween(
								Long.valueOf(dataModel.getLinkedAccountId()), 1, startDate, endDate);
//				System.out.println("Transaction lists:"+transacList.size());

				if (transacList.size() > 0) {
					for (AccountTransactionEntity transactions : transacList) {
						String key = transactions.getTransactionModes().getModeName();
						if (getTransactionsMap.containsKey(key)) {
							transactionModel = getTransactionsMap.get(key);
							if (transactionModel.getAmount() != null) {
								transactionModel
										.setAmount(transactionModel.getAmount() + transactions.getTransactionAmount());
							} else {
								transactionModel.setAmount(transactions.getTransactionAmount());
							}
							Calendar cal = Calendar.getInstance();
							cal.setTime(transactions.getTransactionTimestamp());
							cal.set(Calendar.HOUR_OF_DAY, 0);
							cal.set(Calendar.MINUTE, 0);
							cal.set(Calendar.SECOND, 0);
							EuroHistDataEntity euroHistDataEntity = euroHistoryDataService
									.getEuroHistoryDate(cal.getTime());

							if (transactionModel.getAmountInUserPreferredCurrency() != null) {
								transactionModel.setAmountInUserPreferredCurrency(
										transactionModel.getAmountInUserPreferredCurrency() + euroHistoryDataService
												.getUserPreferedCurrenyAmount(euroHistDataEntity, transactions));
							} else {
								transactionModel.setAmountInUserPreferredCurrency(euroHistoryDataService
										.getUserPreferedCurrenyAmount(euroHistDataEntity, transactions));
							}
							if (transactionModel.getAmountInAccountCurrency() != null) {
								transactionModel.setAmountInAccountCurrency(
										transactionModel.getAmountInAccountCurrency() + euroHistoryDataService
												.getAccountTransactionAmount(euroHistDataEntity, transactions));
							} else {
								transactionModel.setAmountInAccountCurrency(euroHistoryDataService
										.getAccountTransactionAmount(euroHistDataEntity, transactions));
							}
							getTransactionsMap.put(key, transactionModel);
						} else {

							transactionModel = new GetTransactionResponseDataModel();
							transactionModel.setAmount(transactions.getTransactionAmount());
							Calendar cal = Calendar.getInstance();
							cal.setTime(transactions.getTransactionTimestamp());
							cal.set(Calendar.HOUR_OF_DAY, 0);
							cal.set(Calendar.MINUTE, 0);
							cal.set(Calendar.SECOND, 0);
							EuroHistDataEntity euroHistDataEntity = euroHistoryDataService
									.getEuroHistoryDate(cal.getTime());
							transactionModel.setUserPreferredCurrency(transactions.getLinkedAccounts()
									.getCustomerMaster().getPreferredCurrencyCodeMaster().getCurrencyCode());
							transactionModel.setAmountInUserPreferredCurrency(euroHistoryDataService
									.getUserPreferedCurrenyAmount(euroHistDataEntity, transactions));
							transactionModel.setAmountInAccountCurrency(euroHistoryDataService
									.getAccountTransactionAmount(euroHistDataEntity, transactions));
							transactionModel.setAccountCurrency(
									transactions.getTransactionCurrencyCodeMaster().getCurrencyCode());
							transactionModel.setMode(transactions.getTransactionModes().getModeName());
							transactionModel.setLinkedAccountId(dataModel.getLinkedAccountId());
							if (transactions.getTransactionModes() != null) {
								if (modesMap.containsKey(transactionModel.getMode())) {
									transactionModel.setImage(modesMap.get(transactionModel.getMode()).getModeLogo());
									transactionModel.setMode(key);
								}
							}
							getTransactionsMap.put(key, transactionModel);

						}
					}
					// System.out.println(getTransactionsMap.size());
					if (getTransactionsMap.size() > 0) {
						List<GetTransactionEncryptedResponseModel> data = new ArrayList<GetTransactionEncryptedResponseModel>();
						GetTransactionEncryptedResponseModel model = null;
						for (GetTransactionResponseDataModel d : getTransactionsMap.values()) {
							model = new GetTransactionEncryptedResponseModel();
							model.setAccountCurrency(d.getAccountCurrency());
							if (d.getAmount() != null) {
								model.setAmount(CommonUtils.encrypt(d.getAmount().toString()));
							}
							if (d.getAmountInAccountCurrency() != null) {
								model.setAmountInAccountCurrency(
										CommonUtils.encrypt(d.getAmountInAccountCurrency().toString()));
							}
							if (d.getAmountInUserPreferredCurrency() != null) {
								model.setAmountInUserPreferredCurrency(
										CommonUtils.encrypt(d.getAmountInUserPreferredCurrency().toString()));
							}
							model.setImage(d.getImage());
							model.setLinkedAccountId(d.getLinkedAccountId());
							model.setMode(d.getMode());
							model.setUserPreferredCurrency(d.getUserPreferredCurrency());
							data.add(model);
							System.out.println("the mode is "+d);
						}
						List<String> listOfEncryptedData = new ArrayList<String>();
						listOfEncryptedData.add("amount");
						listOfEncryptedData.add("amountInUserPreferredCurrency");
						listOfEncryptedData.add("amountInAccountCurrency");
						response.setHeader("encryptedData", new Gson().toJson(listOfEncryptedData));
						generalResponse = new ResponseEntity<GeneralResponse>(
								new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED, data,
										authenticateUserResponse.getToken()),
								HttpStatus.OK);
					} else {
						generalResponse = new ResponseEntity<GeneralResponse>(
								new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
										Constants.NO_DATA_AVAILABLE, null, authenticateUserResponse.getToken()),
								HttpStatus.OK);
					}
				} else {
					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
									Constants.NO_DATA_AVAILABLE, null, authenticateUserResponse.getToken()),
							HttpStatus.OK);
				}

			} catch (Exception e) {
				e.printStackTrace();
				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
								null, authenticateUserResponse.getToken()),
						HttpStatus.OK);
			}
		} else {
			generalResponse = new ResponseEntity<GeneralResponse>(
					new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.INVALID_CUSTOMER,
							HttpServletResponse.SC_CONFLICT, null),
					HttpStatus.OK);
		}

		return generalResponse;
	}

	@PostMapping("/child/row")
	public ResponseEntity<GeneralResponse> childRowsWithParent(
			@RequestHeader(value = "deviceImei", required = true) String deviceImei,
			@RequestHeader(value = "deviceName", required = true) String deviceName,
			@RequestHeader(value = "requestId", required = true) String requestId,
			@RequestHeader(value = "timestamp", required = true) String timestamp,
			@RequestHeader(value = "channel", required = true) String channel,
			@RequestHeader(value = "ipaddress", required = true) String ipaddress,
			@RequestHeader(value = "latitude", required = true) Double latitude,
			@RequestHeader(value = "longitude", required = true) Double longitude,
			@RequestHeader(value = "deviceMac", required = true) String deviceMacAddress,
			@RequestHeader(value = "token", required = false) String token, HttpServletRequest request,
			HttpServletResponse response, @RequestBody DashboardFilterModel dataModel) throws Exception {

		ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheckProduct(token);
		if (generalResponse.getBody().getStatus() == 200) {
			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
		} else {
			System.out.println("I AM NULLLLL");
			return generalResponse;
		}
		System.out.println("Helloo");
		if (authenticateUserResponse != null) {
			System.out.println("I am 273");
			List<TransactionModesEntity> modes = (List<TransactionModesEntity>) modesJpaRepository.findAll();
			HashMap<String, TransactionModesEntity> modesMap = new HashMap<String, TransactionModesEntity>();
			TransactionsResponseModel transactionModel = null;
			List<TransactionsResponseModel> transactionList = new ArrayList<TransactionsResponseModel>();
			if (!modes.isEmpty()) {
				for (TransactionModesEntity m : modes) {
					modesMap.put(m.getModeName(), m);
				}
			}
			try {
				if (dataModel != null) {
					dataModel = CommonUtils.setDates(dataModel);
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
			try {
				int year1 = dataModel.getYear();
				int month = dataModel.getMonth();
				YearMonth yearMonthObject = YearMonth.of(year1, month);
				int daysInMonth = yearMonthObject.lengthOfMonth();
				LocalDate localDate1 = LocalDate.of(year1, month, 1);
				LocalDate localDate2 = LocalDate.of(year1, month, daysInMonth);
				Date startDate = java.sql.Date.valueOf(localDate1);
				Date endDate = java.sql.Date.valueOf(localDate2);

				System.out.println("Start date---------------" + startDate);
				System.out.println("End date---------------" + endDate);

				List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository
						.findByLinkedAccountsLinkedAccountIdAndInactivatedIdIsNullAndTransactionTimestampBetween(
								Long.valueOf(dataModel.getLinkedAccountId()), startDate, endDate);
//				List<AccountTransactionEntity> accountTransactionEntities = executor.executeCompleteSetQuery(month, daysInMonth, requestId, null);

				System.out.println("I am 311:" + accountTransactionEntities.size());
				if (!accountTransactionEntities.isEmpty()) {
					for (AccountTransactionEntity a : accountTransactionEntities) {
						List<AccountTransactionEntity> accounTransactions = accountTransactionJpaRepository
								.findByInactivatedIdAndActiveFlagAndCustomerIdAndTransactionTimestampBetween(
										a.getInactivatedId(), 1, Long.valueOf(a.getCustomerId()),
										dataModel.getStartDate(), dataModel.getEndDate());
						if (!accounTransactions.isEmpty()) {
							if (accounTransactions.size() == 1) {
								for (AccountTransactionEntity childTransactions : accounTransactions) {
									if (Double.compare(a.getTransactionAmount(),
											childTransactions.getTransactionAmount()) == 0) {
										transactionModel = commonUtils.setDataToModelAlt(childTransactions,
												transactionModel, modesMap, (int) Long.parseLong(a.getId().toString()),
												"S");
										transactionModel.setId(childTransactions.getId());
										transactionList.add(transactionModel);
									}
								}
							} else {
								transactionModel = commonUtils.setDataToModelAlt(a, transactionModel, modesMap,
										(int) Long.parseLong(a.getId().toString()), "P");
								transactionModel.setId(a.getId());
								transactionList.add(transactionModel);
								for (AccountTransactionEntity childTransactions : accounTransactions) {
									transactionModel = commonUtils.setDataToModelAlt(childTransactions,
											transactionModel, modesMap, (int) Long.parseLong(a.getId().toString()),
											"C");
									transactionModel.setParentId(a.getId());
									transactionModel.setId(childTransactions.getId());
									transactionList.add(transactionModel);
								}
							}

						} else {
							transactionModel = commonUtils.setDataToModelAlt(a, transactionModel, modesMap,
									(int) Long.parseLong(a.getId().toString()), "S");
							transactionModel.setId(a.getId());
							transactionList.add(transactionModel);
						}
					}
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_OK,
							Constants.REQUEST_COMPLETED, transactionList, authenticateUserResponse.getToken()),
							HttpStatus.OK);
					System.out.println("ENDDDD");
				} else {
					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
									Constants.NO_DATA_AVAILABLE, null, authenticateUserResponse.getToken()),
							HttpStatus.OK);
				}
			} catch (Exception e) {
				e.printStackTrace();
				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
								null, authenticateUserResponse.getToken()),
						HttpStatus.OK);
			}

		} else {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_CONFLICT,
					Constants.INVALID_CUSTOMER, HttpServletResponse.SC_CONFLICT, null), HttpStatus.OK);
		}

		System.out.println("I am general Response :____" + generalResponse);
		return generalResponse;
	}

	/*******************************
	 * Get Account Transaction Details Start
	 **********************/

	@PostMapping("get/details")
	public ResponseEntity<GeneralResponse> getAccountTransactions(
			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,
			@RequestHeader(value = "customerIdh", required = true) String customerIdh,
			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
			@RequestHeader(value = Constants.HEADER_TOKEN) String token, HttpServletRequest request,
			HttpServletResponse response, @RequestBody String requestData) {

		System.out.println("Bef encrypt cust is" + customerIdh);

		String custId = null;
		try {
			custId = CommonUtils.decrypt(customerIdh);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// System.out.println("Print the Header customer id is" + custId);

//		if (!custId.equals(customerId)) {
//			return new ResponseEntity<GeneralResponse>(
//					new GeneralResponse(HttpServletResponse.SC_CONFLICT, Constants.INVALID_CUSTOMER, null, null),
//					HttpStatus.OK);
//		}

		CustomerUserLoginEntity custlogin = validateService.loginValidate(custId, token);

		System.out.println("cust is:" + custlogin);

		if (custlogin != null) {
			// Logger logger = Logger.getLogger("getTransactionDetailsLogger");
			// logger.info(Constants.LOG_START);
			ipaddress = CommonUtils.getClientIpAddress(request);
			// logger.info("Headers:"+"deviceId:"+deviceImei+", timestamp : "+timestamp+",
			// requestId : "+requestId+", channel : "+channel +" , deviceName : "+deviceName
			// + ",ipaddress : "+ ipaddress+" , latitude : "+latitude +" , longitude :
			// "+longitude +" , deviceMacAddress : "+deviceMacAddress );
			ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheck(token);
			if (generalResponse.getBody().getStatus() == 200) {
				authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
			} else {
				return generalResponse;
			}

			if (authenticateUserResponse != null) {
				TransactionsResponseModel transResponseModel = null;
				String sessionKey = requestData.substring(0, 16);
				String decryptedBody = cryptoJs.decrypt(requestData.substring(16), sessionKey);
				// logger.info("After Decryption : "+ decryptedBody);
				try {
					if (requestData != null) {
						transResponseModel = gson.fromJson(decryptedBody, TransactionsResponseModel.class);
					}
				} catch (Exception e) {
					e.printStackTrace();
					// logger.error("Error :: ", e);
					// logger.info("Exception occured at parsing model");
				}
				TransactionResponseEncryptedModel transactionModel = null;
				List<TransactionModesEntity> modes = (List<TransactionModesEntity>) modesJpaRepository.findAll();
				HashMap<String, TransactionModesEntity> modesMap = new HashMap<String, TransactionModesEntity>();
				if (modes.size() > 0) {
					for (TransactionModesEntity m : modes) {
						modesMap.put(m.getModeName(), m);
					}
				}
				List<AccountTransactionEntity> accountTransactionEntities = null;
				try {
					AccountTransactionEntity accountTransactionEntity = accountTransactionJpaRepository
							.findByTransactionId(transResponseModel.getTransactionId());

					if (accountTransactionEntity != null) {
						if (accountTransactionEntity.getInactivatedId() != null) {
							accountTransactionEntities = accountTransactionJpaRepository
									.findByInactivatedIdAndActiveFlag(accountTransactionEntity.getInactivatedId(), 1);
						} else {
							accountTransactionEntities = accountTransactionJpaRepository
									.findByInactivatedIdAndActiveFlag(
											accountTransactionEntity.getAccountTransactionId(), 1);
						}

						if (accountTransactionEntities.size() > 0) {
							if (accountTransactionEntities.size() == 1) {
								transactionModel = commonUtils.setDataToModelAltEncrypted(accountTransactionEntity,
										transactionModel, modesMap, accountTransactionEntity.getAccountTransactionId(),
										"S");
								transactionModel.setId(accountTransactionEntity.getAccountTransactionId());
							} else {
								if (accountTransactionEntity != null) {
									AccountTransactionEntity accountTransactionEntity2 = null;
									if (accountTransactionEntity.getInactivatedId() != null) {
										accountTransactionEntity2 = accountTransactionJpaRepository
												.findByAccountTransactionId(
														accountTransactionEntity.getInactivatedId());
									} else {
										accountTransactionEntity2 = accountTransactionJpaRepository
												.findByAccountTransactionId(
														accountTransactionEntity.getAccountTransactionId());
									}
									transactionModel = commonUtils.setDataToModelAltEncrypted(accountTransactionEntity,
											transactionModel, modesMap,
											accountTransactionEntity.getAccountTransactionId(), "C");
									transactionModel.setParentId(accountTransactionEntity2.getAccountTransactionId());
									transactionModel.setId(accountTransactionEntity.getAccountTransactionId());
								}
							}
						} else {
							transactionModel = commonUtils.setDataToModelAltEncrypted(accountTransactionEntity,
									transactionModel, modesMap, accountTransactionEntity.getAccountTransactionId(),
									"S");
							transactionModel.setId(accountTransactionEntity.getAccountTransactionId());
						}
						sessionKey = Base64.encodeBase64String(CryptoJS.generateSessionKey()).substring(0, 16);
						generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(
								HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED,
								sessionKey + cryptoJs.encrypt(ObjectParser.produceJson(transactionModel), sessionKey),
								authenticateUserResponse.getToken()), HttpStatus.OK);
					} else {
						generalResponse = new ResponseEntity<GeneralResponse>(
								new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
										Constants.INVALID_TRANSACTION_ID, null, authenticateUserResponse.getToken()),
								HttpStatus.OK);
					}
				} catch (Exception e) {
					e.printStackTrace();
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(
							HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
							HttpServletResponse.SC_CONFLICT, authenticateUserResponse.getToken()), HttpStatus.OK);
					// logger.error("Error :: ", e);

				}
			} else {
				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.INVALID_CUSTOMER,
								HttpServletResponse.SC_CONFLICT, null),
						HttpStatus.OK);
			}
			// logger.info("Response:"+gson.toJson(generalResponse));
			// logger.info(Constants.LOG_END);
			return generalResponse;
		} else {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_CONFLICT,
					Constants.INVALID_CUSTOMER, HttpServletResponse.SC_CONFLICT, authenticateUserResponse.getToken()),
					HttpStatus.OK);
		}
	}

	@PostMapping("/details/{transactionId}")
	public ResponseEntity<GeneralResponse> getAccountTransactionsByTransactionId(
			@RequestHeader(value = "deviceImei", required = true) String deviceImei,
			@RequestHeader(value = "deviceName", required = true) String deviceName,
			@RequestHeader(value = "requestId", required = true) String requestId,
			@RequestHeader(value = "timestamp", required = true) String timestamp,
			@RequestHeader(value = "channel", required = true) String channel,
			@RequestHeader(value = "ipaddress", required = true) String ipaddress,
			@RequestHeader(value = "latitude", required = true) Double latitude,
			@RequestHeader(value = "longitude", required = true) Double longitude,
			@RequestHeader(value = "deviceMac", required = true) String deviceMacAddress,
			@RequestHeader(value = "token", required = false) String token, HttpServletRequest request,
			HttpServletResponse response, @PathVariable String transactionId) {
		ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheckProduct(token);
		if (generalResponse.getBody().getStatus() == 200) {
			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
		} else {
			return generalResponse;
		}

		if (authenticateUserResponse != null) {
			TransactionResponseEncryptedModel transactionModel = null;
			List<TransactionModesEntity> modes = (List<TransactionModesEntity>) transactionModesJpaRepository.findAll();
			HashMap<String, TransactionModesEntity> modesMap = new HashMap<String, TransactionModesEntity>();
			if (modes.size() > 0) {
				for (TransactionModesEntity m : modes) {
					modesMap.put(m.getModeName(), m);
				}
			}
			List<AccountTransactionEntity> accountTransactionEntities = null;
			try {
				AccountTransactionEntity accountTransactionEntity = accountTransactionJpaRepository
						.findByTransactionId(transactionId);

				if (accountTransactionEntity != null) {
					if (accountTransactionEntity.getInactivatedId() != null) {
						accountTransactionEntities = accountTransactionJpaRepository
								.findByInactivatedIdAndActiveFlag(accountTransactionEntity.getInactivatedId(), 1);
					} else {
						accountTransactionEntities = accountTransactionJpaRepository
								.findByInactivatedIdAndActiveFlag(accountTransactionEntity.getId(), 1);
					}

					System.out.println("Size :- " + accountTransactionEntities.size());
					if (accountTransactionEntities.size() > 0) {

						if (accountTransactionEntities.size() == 1) {
							transactionModel = commonUtils.setDataToModelAltEncrypted(accountTransactionEntity,
									transactionModel, modesMap, accountTransactionEntity.getId(), "S");
							transactionModel.setId(accountTransactionEntity.getId());
						} else {
							if (accountTransactionEntity != null) {
								AccountTransactionEntity accountTransactionEntity2 = null;
								if (accountTransactionEntity.getInactivatedId() != null) {
									accountTransactionEntity2 = accountTransactionJpaRepository
											.findByInactivatedId(accountTransactionEntity.getInactivatedId());
								} else {
									accountTransactionEntity2 = accountTransactionJpaRepository
											.findById(accountTransactionEntity.getId()).get();
								}
//
								transactionModel = commonUtils.setDataToModelAltEncrypted(accountTransactionEntity,
										transactionModel, modesMap, accountTransactionEntity2.getId(), "P");
								transactionModel.setId(accountTransactionEntity2.getId());
								for (AccountTransactionEntity childTransactions : accountTransactionEntities) {
									transactionModel = commonUtils.setDataToModelAltEncrypted(accountTransactionEntity,
											transactionModel, modesMap, accountTransactionEntity.getId(), "C");
									transactionModel.setParentId(accountTransactionEntity2.getId());
									transactionModel.setId(accountTransactionEntity.getId());
								}
							}
						}
					} else {
						transactionModel = commonUtils.setDataToModelAltEncrypted(accountTransactionEntity,
								transactionModel, modesMap, accountTransactionEntity.getId(), "S");
						transactionModel.setId(accountTransactionEntity.getId());
					}
					List<String> listOfEncryptedData = new ArrayList<String>();
					listOfEncryptedData.add("amount");
					listOfEncryptedData.add("userPreferredCurrencyAmount");

					response.setHeader("encryptedData", new Gson().toJson(listOfEncryptedData));

					List<String> beneficiary = new ArrayList<String>();
					beneficiary.add("beneficiaryAccountNumber");
					response.setHeader("beneficiary", new Gson().toJson(beneficiary));
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_OK,
							Constants.REQUEST_COMPLETED, transactionModel, authenticateUserResponse.getToken()),
							HttpStatus.OK);
				} else {
					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(HttpServletResponse.SC_CONFLICT, Constants.INVALID_TRANSACTION_ID, null,
									authenticateUserResponse.getToken()),
							HttpStatus.OK);
				}
			} catch (Exception e) {
				e.printStackTrace();
				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
								HttpServletResponse.SC_CONFLICT, authenticateUserResponse.getToken()),
						HttpStatus.OK);

			}
		} else {
			generalResponse = new ResponseEntity<GeneralResponse>(
					new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.INVALID_CUSTOMER,
							HttpServletResponse.SC_CONFLICT, null),
					HttpStatus.OK);
		}
		return generalResponse;
	}

//	*********************Commented because no data in oracle **************************************

	@PostMapping("/mark/notAExpense/{transactionId}")
	public ResponseEntity<GeneralResponse> markNotAExpense(
			@RequestHeader(value = "deviceImei", required = true) String deviceImei,
			@RequestHeader(value = "deviceName", required = true) String deviceName,
			@RequestHeader(value = "requestId", required = true) String requestId,
			@RequestHeader(value = "timestamp", required = true) String timestamp,
			@RequestHeader(value = "channel", required = true) String channel,
			@RequestHeader(value = "ipaddress", required = true) String ipaddress,
			@RequestHeader(value = "latitude", required = true) Double latitude,
			@RequestHeader(value = "longitude", required = true) Double longitude,
			@RequestHeader(value = "deviceMac", required = true) String deviceMacAddress,
			@RequestHeader(value = "token", required = false) String token, @PathVariable String transactionId) {
		// System.out.println("Transaction Id : " + transactionId);
		ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheckProduct(token);
		if (generalResponse.getBody().getStatus() == 200) {
			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
		} else {
			return generalResponse;
		}
		if (authenticateUserResponse != null) {
			YearlyExpenseDataEntity yearlyExpenseDataEntity = null;
			MonthlyExpenseDataEntity monthlyExpenseDataEntity = null;
			WeeklyExpenseDataEntity weeklyExpenseDataEntity = null;
			UnsplitAccountTransactionEntity unsplitAccountTransactionEntity = null;
			PopularCategoryDetailsEntity popularCategoryDetailsEntity = null;
			try {
				AccountTransactionEntity accountTransactionEntity = accountTransactionJpaRepository
						.findByTransactionIdAndActiveFlag(transactionId, 1);

				if (accountTransactionEntity != null) {
					String dateVal = dateFormatter.format(accountTransactionEntity.getTransactionTimestamp());
					Calendar cal = Calendar.getInstance();
					cal.setTime(accountTransactionEntity.getTransactionTimestamp());
					int dayOfWeek = cal.get(Calendar.WEEK_OF_YEAR); // 6
					int dayOfMonth = cal.get(Calendar.MONTH) + 1; // 17
					int dayOfYear = cal.get(Calendar.YEAR); // 169
					int dayOfWeekMonth = cal.get(Calendar.WEEK_OF_MONTH); // 169
					if (accountTransactionEntity.getNotAExpense() == null
							|| (accountTransactionEntity.getNotAExpense() != null
									&& accountTransactionEntity.getNotAExpense().equalsIgnoreCase("false"))) {

						unsplitAccountTransactionEntity = unsplitAccountTransactionJpaRepository
								.findByTransactionId(accountTransactionEntity.getTransactionId());
						if (unsplitAccountTransactionEntity == null) {
							unsplitAccountTransactionEntity = new UnsplitAccountTransactionEntity();
						}
						unsplitAccountTransactionEntity.setActiveFlag(1L);
						unsplitAccountTransactionEntity.setCategory(accountTransactionEntity.getCategoryId());
						unsplitAccountTransactionEntity
								.setCurrency(accountTransactionEntity.getBaseCurrencyCodeMaster().getCurrencyCode());
						unsplitAccountTransactionEntity.setInactivatedId(accountTransactionEntity.getId());
						unsplitAccountTransactionEntity
								.setLastModifiedTimestamp(accountTransactionEntity.getLastModifiedTimestamp());
						unsplitAccountTransactionEntity
								.setLinkedAccountId(accountTransactionEntity.getLinkedAccounts().getLinkedAccountId());
//						unsplitAccountTransactionEntity.setMccCode(accountTransactionEntity.getMccCode().getMccCode());
//						unsplitAccountTransactionEntity.setMerchantMaster(accountTransactionEntity.getMerchantMaster());
//						unsplitAccountTransactionEntity.setMode(accountTransactionEntity.getTransactionModes().getModeName());
						unsplitAccountTransactionEntity.setNarration(accountTransactionEntity.getNarration());
						unsplitAccountTransactionEntity.setNotAExpense(accountTransactionEntity.getNotAExpense());
						unsplitAccountTransactionEntity.setRemarks(accountTransactionEntity.getRemarks());
						unsplitAccountTransactionEntity
								.setTransactionAmount(accountTransactionEntity.getTransactionAmount().longValue());
						unsplitAccountTransactionEntity.setTransactionId(accountTransactionEntity.getTransactionId());
						unsplitAccountTransactionEntity
								.setTransactionTimestamp(accountTransactionEntity.getTransactionTimestamp());
						unsplitAccountTransactionEntity
								.setTransactionType(accountTransactionEntity.getTransactionType());
						unsplitAccountTransactionJpaRepository.save(unsplitAccountTransactionEntity);
						yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
								.findByLinkedAccountsLinkedAccountIdAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
										accountTransactionEntity.getLinkedAccounts().getLinkedAccountId(), dayOfYear,
										accountTransactionEntity.getTransactionType(),
										accountTransactionEntity.getCategoryId(), 1,
										accountTransactionEntity.getBaseCurrencyCodeMaster().getCurrencyCodeId(),
										accountTransactionEntity.getMerchantMaster() != null
												? accountTransactionEntity.getMerchantMaster().getMerchantId()
												: null,
										accountTransactionEntity.getTransactionModes().getTransactionModeId());
						monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
								.findByLinkedAccountsLinkedAccountIdAndMonthAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
										accountTransactionEntity.getLinkedAccounts().getLinkedAccountId(), dayOfMonth,
										dayOfYear, accountTransactionEntity.getTransactionType(),
										accountTransactionEntity.getCategoryId(), 1,
										accountTransactionEntity.getBaseCurrencyCodeMaster().getCurrencyCodeId(),
										accountTransactionEntity.getMerchantMaster() != null
												? accountTransactionEntity.getMerchantMaster().getMerchantId()
												: null,
										accountTransactionEntity.getTransactionModes().getTransactionModeId());
						weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
								.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndTypeOfTransactionAndMonthAndYearsAndWeekAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
										accountTransactionEntity.getLinkedAccounts().getLinkedAccountId(),
										accountTransactionEntity.getCategoryId(),
										accountTransactionEntity.getTransactionType(), dayOfMonth, dayOfYear, dayOfWeek,
										1, accountTransactionEntity.getBaseCurrencyCodeMaster().getCurrencyCodeId(),
										accountTransactionEntity.getMerchantMaster() != null
												? accountTransactionEntity.getMerchantMaster().getMerchantId()
												: null,
										accountTransactionEntity.getTransactionModes().getTransactionModeId());
						if (yearlyExpenseDataEntity != null) {
							yearlyExpenseDataEntity.setTransactionAmount(yearlyExpenseDataEntity.getTransactionAmount()
									- accountTransactionEntity.getTransactionAmount());
							yearlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
							yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
						}
						if (monthlyExpenseDataEntity != null) {
							monthlyExpenseDataEntity
									.setTransactionAmount(monthlyExpenseDataEntity.getTransactionAmount()
											- accountTransactionEntity.getTransactionAmount());

							String value = monthlyExpenseDataEntity.getAmountDate();
							value = value.substring(1, value.length() - 1); // remove curly brackets
							String[] keyValuePairs = value.split(","); // split the string to creat key-value pairs
							HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();
							for (String pair : keyValuePairs) // iterate over the pairs
							{
								String[] entry = pair.split("="); // split the pairs to get key and value
								dateAndAmountMap.put(entry[0].trim(), Double.valueOf(entry[1].trim())); // add them to
																										// the hashmap
																										// and trim
																										// whitespaces
							}
							if (dateAndAmountMap.containsKey(dateVal)) {
								dateAndAmountMap.put(dateVal, (dateAndAmountMap.get(dateVal)
										- accountTransactionEntity.getTransactionAmount()));
							}
							monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
							if (monthlyExpenseDataEntity.getCount() != null) {
								monthlyExpenseDataEntity.setCount(monthlyExpenseDataEntity.getCount() - 1);
							}
							monthlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
							monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
						}
						if (weeklyExpenseDataEntity != null) {
							weeklyExpenseDataEntity.setTransactionAmount(weeklyExpenseDataEntity.getTransactionAmount()
									- accountTransactionEntity.getTransactionAmount());
							weeklyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
							weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
						}
						popularCategoryDetailsEntity = popularCategoryDetailsJpaRepository
								.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndType(
										accountTransactionEntity.getLinkedAccounts().getLinkedAccountId(), 0L,
										accountTransactionEntity.getTransactionType());
						if (popularCategoryDetailsEntity != null) {
							popularCategoryDetailsEntity.setCount(popularCategoryDetailsEntity.getCount() != null
									? popularCategoryDetailsEntity.getCount() + 1
									: 0);
							popularCategoryDetailsEntity.setTimestamp(new Date());
							popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
						} else {
							popularCategoryDetailsEntity = new PopularCategoryDetailsEntity();
							popularCategoryDetailsEntity.setCategoryId(0L);
							popularCategoryDetailsEntity.setCount(1);
							popularCategoryDetailsEntity
									.setLinkedAccounts(accountTransactionEntity.getLinkedAccounts());
							popularCategoryDetailsEntity.setType(accountTransactionEntity.getTransactionType());
							popularCategoryDetailsEntity.setTimestamp(new Date());
							System.out.println(popularCategoryDetailsEntity.toString());
							popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
						}
//						setDataInAccountTransactionData(accountTransactionEntity, "mark not as expense/income");
						accountTransactionEntity.setNotAExpense("true");
						accountTransactionEntity.setCategoryId(0L);
						accountTransactionEntity.setDeviceImei(deviceImei);
						accountTransactionEntity.setRequestId(requestId);
						accountTransactionEntity.setDeviceMacAddress(deviceMacAddress);
						accountTransactionEntity.setChannel(channel);
						accountTransactionEntity.setDeviceLatitude(latitude);
						accountTransactionEntity.setDeviceLongitude(longitude);
						accountTransactionJpaRepository.save(accountTransactionEntity);
						generalResponse = new ResponseEntity<GeneralResponse>(
								new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED, null,
										authenticateUserResponse.getToken()),
								HttpStatus.OK);

					} else if ((accountTransactionEntity.getNotAExpense() != null
							&& accountTransactionEntity.getNotAExpense().equalsIgnoreCase("true"))) {
//						setDataInAccountTransactionData(accountTransactionEntity, "mark not as expense/income");
						accountTransactionEntity.setNotAExpense("false");
						unsplitAccountTransactionEntity = unsplitAccountTransactionJpaRepository
								.findByTransactionId(transactionId);
						if (unsplitAccountTransactionEntity != null) {
							accountTransactionEntity.setCategoryId(unsplitAccountTransactionEntity.getCategory());
							accountTransactionJpaRepository.save(accountTransactionEntity);
							popularCategoryDetailsEntity = popularCategoryDetailsJpaRepository
									.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndType(
											accountTransactionEntity.getLinkedAccounts().getLinkedAccountId(),
											unsplitAccountTransactionEntity.getCategory(),
											accountTransactionEntity.getTransactionType());
							if (popularCategoryDetailsEntity != null) {
								popularCategoryDetailsEntity.setCount(popularCategoryDetailsEntity.getCount() != null
										? popularCategoryDetailsEntity.getCount() + 1
										: 0);
								popularCategoryDetailsEntity.setTimestamp(new Date());
								popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
							} else

							{
								popularCategoryDetailsEntity = new PopularCategoryDetailsEntity();
								popularCategoryDetailsEntity
										.setCategoryId(unsplitAccountTransactionEntity.getCategory());
								popularCategoryDetailsEntity.setCount(1);
								popularCategoryDetailsEntity
										.setLinkedAccounts(accountTransactionEntity.getLinkedAccounts());
								popularCategoryDetailsEntity.setType(accountTransactionEntity.getTransactionType());
								popularCategoryDetailsEntity.setTimestamp(new Date());
								popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
							}
							unsplitAccountTransactionJpaRepository.deleteById(unsplitAccountTransactionEntity.getId());
						}
						yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
								.findByLinkedAccountsLinkedAccountIdAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
										accountTransactionEntity.getLinkedAccounts().getLinkedAccountId(), dayOfYear,
										accountTransactionEntity.getTransactionType(),
										accountTransactionEntity.getCategoryId(), 1,
										accountTransactionEntity.getBaseCurrencyCodeMaster().getCurrencyCodeId(),
										accountTransactionEntity.getMerchantMaster() != null
												? accountTransactionEntity.getMerchantMaster().getMerchantId()
												: null,
										accountTransactionEntity.getTransactionModes().getTransactionModeId());

						monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
								.findByLinkedAccountsLinkedAccountIdAndMonthAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
										accountTransactionEntity.getLinkedAccounts().getLinkedAccountId(), dayOfMonth,
										dayOfYear, accountTransactionEntity.getTransactionType(),
										accountTransactionEntity.getCategoryId(), 1,
										accountTransactionEntity.getBaseCurrencyCodeMaster().getCurrencyCodeId(),
										accountTransactionEntity.getMerchantMaster() != null
												? accountTransactionEntity.getMerchantMaster().getMerchantId()
												: null,
										accountTransactionEntity.getTransactionModes().getTransactionModeId());
						weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
								.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndTypeOfTransactionAndMonthAndYearsAndWeekAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
										accountTransactionEntity.getLinkedAccounts().getLinkedAccountId(),
										accountTransactionEntity.getCategoryId(),
										accountTransactionEntity.getTransactionType(), dayOfMonth, dayOfYear, dayOfWeek,
										1, accountTransactionEntity.getBaseCurrencyCodeMaster().getCurrencyCodeId(),
										accountTransactionEntity.getMerchantMaster() != null
												? accountTransactionEntity.getMerchantMaster().getMerchantId()
												: null,
										accountTransactionEntity.getTransactionModes().getTransactionModeId());
						if (yearlyExpenseDataEntity != null) {
							yearlyExpenseDataEntity.setTransactionAmount(yearlyExpenseDataEntity.getTransactionAmount()
									+ accountTransactionEntity.getTransactionAmount());
							yearlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
							yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
						} else {
							yearlyExpenseDataEntity = new YearlyExpenseDataEntity();
							yearlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
							yearlyExpenseDataEntity.setCategoryId(accountTransactionEntity.getCategoryId());
							yearlyExpenseDataEntity.setCreatedTimeStamp(new Date());
							yearlyExpenseDataEntity.setCustomerMaster(
									accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
							yearlyExpenseDataEntity.setLastModifiedTimeStamp(null);
							yearlyExpenseDataEntity.setLinkedAccounts(accountTransactionEntity.getLinkedAccounts());
							yearlyExpenseDataEntity.setModifiedTimeStamp(null);
							yearlyExpenseDataEntity
									.setTransactionAmount(accountTransactionEntity.getTransactionAmount());
							yearlyExpenseDataEntity.setTypeOfTransaction(accountTransactionEntity.getTransactionType());
							yearlyExpenseDataEntity.setYears(dayOfYear);
							yearlyExpenseDataEntity
									.setCurrencyMaster(accountTransactionEntity.getTransactionCurrencyCodeMaster());
							yearlyExpenseDataEntity.setCustomerMaster(
									accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
							yearlyExpenseDataEntity
									.setMerchantMaster(accountTransactionEntity.getMerchantMaster() != null
											? accountTransactionEntity.getMerchantMaster()
											: null);
							yearlyExpenseDataEntity.setTransactionModes(accountTransactionEntity.getTransactionModes());
							yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);

						}
						if (monthlyExpenseDataEntity != null) {
							monthlyExpenseDataEntity
									.setTransactionAmount(monthlyExpenseDataEntity.getTransactionAmount()
											+ accountTransactionEntity.getTransactionAmount());
							monthlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());

							String value = monthlyExpenseDataEntity.getAmountDate();
							value = value.substring(1, value.length() - 1); // remove curly brackets
							String[] keyValuePairs = value.split(","); // split the string to creat key-value pairs
							HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();

							for (String pair : keyValuePairs) // iterate over the pairs
							{
								String[] entry = pair.split("="); // split the pairs to get key and value
								dateAndAmountMap.put(entry[0].trim(), Double.valueOf(entry[1].trim())); // add them to
																										// the hashmap
																										// and trim
																										// whitespaces
							}
							if (dateAndAmountMap.containsKey(dateVal)) {
								dateAndAmountMap.put(dateVal, (dateAndAmountMap.get(dateVal)
										+ accountTransactionEntity.getTransactionAmount()));
							} else {
								dateAndAmountMap.put(dateVal, accountTransactionEntity.getTransactionAmount());
							}
							monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
							if (monthlyExpenseDataEntity.getCount() != null) {
								monthlyExpenseDataEntity.setCount(monthlyExpenseDataEntity.getCount() + 1);
							} else {
								monthlyExpenseDataEntity.setCount(1);
							}
							monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
						} else {
							monthlyExpenseDataEntity = new MonthlyExpenseDataEntity();
							monthlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
							monthlyExpenseDataEntity.setCategoryId(accountTransactionEntity.getCategoryId());
							monthlyExpenseDataEntity.setCreatedTimeStamp(new Date());
							monthlyExpenseDataEntity.setCustomerMaster(
									accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
							monthlyExpenseDataEntity.setLastModifiedTimeStamp(null);
							monthlyExpenseDataEntity.setLinkedAccounts(accountTransactionEntity.getLinkedAccounts());
							monthlyExpenseDataEntity.setModifiedTimeStamp(null);
							monthlyExpenseDataEntity
									.setTransactionAmount(accountTransactionEntity.getTransactionAmount());
							monthlyExpenseDataEntity
									.setTypeOfTransaction(accountTransactionEntity.getTransactionType());
							monthlyExpenseDataEntity.setMonth(dayOfMonth);
							monthlyExpenseDataEntity
									.setCurrencyMaster(accountTransactionEntity.getBaseCurrencyCodeMaster());
							monthlyExpenseDataEntity.setYears(dayOfYear);
							monthlyExpenseDataEntity.setCustomerMaster(
									accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
							monthlyExpenseDataEntity
									.setMerchantMaster(accountTransactionEntity.getMerchantMaster() != null
											? accountTransactionEntity.getMerchantMaster()
											: null);
							monthlyExpenseDataEntity
									.setTransactionModes(accountTransactionEntity.getTransactionModes());
							HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();
							dateAndAmountMap.put(dateVal, accountTransactionEntity.getTransactionAmount());
							monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
							monthlyExpenseDataEntity.setCount(1);
							monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
						}
						if (weeklyExpenseDataEntity != null) {
							weeklyExpenseDataEntity.setTransactionAmount(weeklyExpenseDataEntity.getTransactionAmount()
									+ accountTransactionEntity.getTransactionAmount());
							weeklyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
							weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
						} else {
							weeklyExpenseDataEntity = new WeeklyExpenseDataEntity();
							weeklyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
							weeklyExpenseDataEntity.setCategoryId(accountTransactionEntity.getCategoryId());
							weeklyExpenseDataEntity.setCreatedTimeStamp(new Date());
							weeklyExpenseDataEntity.setCustomerMaster(
									accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
							weeklyExpenseDataEntity.setLastModifiedTimeStamp(null);
							weeklyExpenseDataEntity.setLinkedAccounts(accountTransactionEntity.getLinkedAccounts());
							weeklyExpenseDataEntity.setModifiedTimeStamp(null);
							weeklyExpenseDataEntity
									.setTransactionAmount(accountTransactionEntity.getTransactionAmount());
							weeklyExpenseDataEntity.setTypeOfTransaction(accountTransactionEntity.getTransactionType());
							weeklyExpenseDataEntity.setMonth(dayOfMonth);
							weeklyExpenseDataEntity.setYears(dayOfYear);
							weeklyExpenseDataEntity
									.setCurrencyMaster(accountTransactionEntity.getBaseCurrencyCodeMaster());
							weeklyExpenseDataEntity.setWeekOfMonth(dayOfWeekMonth);
							weeklyExpenseDataEntity.setWeek(dayOfWeek);
							weeklyExpenseDataEntity.setRemarks("RECORD CREATED FROM SPLIT ");
							weeklyExpenseDataEntity.setCustomerMaster(
									accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
							weeklyExpenseDataEntity
									.setMerchantMaster(accountTransactionEntity.getMerchantMaster() != null
											? accountTransactionEntity.getMerchantMaster()
											: null);
							weeklyExpenseDataEntity.setTransactionModes(accountTransactionEntity.getTransactionModes());
							weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
						}
						generalResponse = new ResponseEntity<GeneralResponse>(
								new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED, null,
										authenticateUserResponse.getToken()),
								HttpStatus.OK);
					}
				} else {
					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
									Constants.INVALID_TRANSACTION_ID, null, authenticateUserResponse.getToken()),
							HttpStatus.OK);
				}
			} catch (Exception e) {
				e.printStackTrace();
				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
								null, authenticateUserResponse.getToken()),
						HttpStatus.OK);
			}
		} else {
			generalResponse = new ResponseEntity<GeneralResponse>(
					new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.INVALID_CUSTOMER,
							HttpServletResponse.SC_CONFLICT, null),
					HttpStatus.OK);
		}
		return generalResponse;
	}

	/*******************************
	 * Get Account Transaction Details End
	 **********************/

	private String getPathPrefix() {
		return Paths.get(File.separator + "@Image" + new Date().getTime()).toString();
	}

//	
//	
//	/****************************************Remove Image Start*********************************/
//	
//	@PostMapping("remove/image")
//	public ResponseEntity<GeneralResponse> removeImage(
//			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
//			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
//			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,
//			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
//			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
//			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
//			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
//			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
//			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
//			@RequestHeader(value = Constants.HEADER_TOKEN) String token,
//            HttpServletRequest request,HttpServletResponse response,
//            @RequestParam("transactionId") String transactionId,@RequestBody String requestData)
//	{
//		//Logger logger = Logger.getLogger("removeImageLogger");
//		logger.info(Constants.LOG_START);
//		ipaddress = CommonUtils.getClientIpAddress(request);
//		logger.info("Headers:"+"deviceId:"+deviceImei+",   timestamp : "+timestamp+", requestId : "+requestId+", channel : "+channel +" , deviceName : "+deviceName + ",ipaddress : "+ ipaddress+" , latitude : "+latitude +" , longitude : "+longitude +" , deviceMacAddress : "+deviceMacAddress );
//        logger.info("transactionId : "+transactionId);
//        logger.info("Before Encryption : "+ requestData);
//    	ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheck(token);
//		if(generalResponse.getBody().getStatus()==200)
//		{
//			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
//		}
//		else
//		{
//		        return generalResponse;
//		}
//				
//		if(authenticateUserResponse!=null)
//		{
//			try 
//			{
//				String sessionKey = requestData.substring(0, 16);
//				String decryptedBody =  cryptoJs.decrypt(requestData.substring(16), sessionKey);
//				decryptedBody = decryptedBody.replace("[", "");
//				decryptedBody = decryptedBody.replace("]", "");
//				decryptedBody = decryptedBody.replace("\"","");
//				String str1[] = decryptedBody.split(",");
//				List<String> attachmentList = new ArrayList<String>();
//				attachmentList = Arrays.asList(str1);
//				
//				
//				sessionKey = transactionId.substring(0, 16);
//				decryptedBody =  cryptoJs.decrypt(transactionId.substring(16), sessionKey);
//				decryptedBody = decryptedBody.replaceAll("\"", "");
//				System.out.println(decryptedBody);
//				logger.info("After Decryption : "+ attachmentList);
//				System.out.println("After Decryption : "+ attachmentList);
//			
//				AccountTransactionEntity accountTransactionEntity = accountTransactionJpaRepository.findByTransactionId(decryptedBody);
//				String attachments = "";
//				if(accountTransactionEntity!=null)
//				{
//					if(accountTransactionEntity.getAttachmentList()!=null)
//					{
//						String str[] = accountTransactionEntity.getAttachmentList().split(",");
//						List<String> list = new ArrayList<>();
//						for(String s : str)
//						{
//							list.add(s.toString());
//						}
//						logger.info("List size : "+list.size());
//						if(list.size()>1)
//					    {
//							for(String s: attachmentList)
//							{
//								logger.info("Check:"+list.contains(s.trim())  +"  "+list +"  "+s);
//								s = s.replace("\"","\\\"");
//								if(list.contains(s.trim()))
//								{
//									list.remove(s.trim());
//									logger.info("removed"+s.trim());
//								}
//								else
//								{
//									logger.info("No");
//								}
//                               
//							}
//							for(String s : list)
//							{
//								if(attachments.compareTo("")==0)
//								{
//									attachments = attachments+s;
//								}
//								else
//								{
//									attachments = attachments+","+s;
//								}
//								
//							}
//							accountTransactionEntity.setAttachmentList(attachments);
//							accountTransactionJpaRepository.save(accountTransactionEntity);
//							logger.info(" 1 Attachement List : "+accountTransactionEntity.getAttachmentList());
//						}
//						else
//						{
//							for(String s: attachmentList)
//							{
//								attachments = attachments.replace(s, "");
//							}
//							if(attachments.compareTo("")==0)
//							{
//								accountTransactionEntity.setAttachmentList(null);
//								accountTransactionJpaRepository.save(accountTransactionEntity);
//							}
//							logger.info(" 2 Attachement List : "+accountTransactionEntity.getAttachmentList());
//						}
//						generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED,null, authenticateUserResponse.getToken() ), HttpStatus.OK);
//					}
//					else
//					{
//						generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED,null, authenticateUserResponse.getToken() ), HttpStatus.OK);
//					}
//				}
//				else
//				{
//					generalResponse = new ResponseEntity<GeneralResponse>(
//							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.INVALID_TRANSACTION_ID,
//								null, authenticateUserResponse.getToken()),
//							HttpStatus.OK);
//				}
//				
//			} 
//			catch(Exception e){
//				e.printStackTrace();
//				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.EXCEPTION_IN_SERVER,HttpServletResponse.SC_CONFLICT,authenticateUserResponse.getToken()), HttpStatus.OK);
//				logger.error("Error :: ", e);
//
//			}
//		}
//		else
//		{
//		        return new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.INVALID_CUSTOMER,HttpServletResponse.SC_CONFLICT,null), HttpStatus.OK);
//		}
//		logger.info("Response:"+gson.toJson(generalResponse));
//		logger.info(Constants.LOG_END);
//		return generalResponse;
//
//	}
//	
//	/****************************************Remove Image End*********************************/
//	
//	
//	
//	
//	/****************************************Save Image Start*********************************/
//	@PostMapping("save/image")
//	public ResponseEntity<GeneralResponse> uploadImage(
//			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
//			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
//			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,
//			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
//			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
//			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
//			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
//			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
//			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
//			@RequestHeader(value = Constants.HEADER_TOKEN) String token,
//            HttpServletRequest request,HttpServletResponse response, @RequestParam("file") MultipartFile uploadFile,
//            @RequestParam("transactionId") String transactionId)
//	{
//		//Logger logger = Logger.getLogger("saveImageForAccountTransactionLogger");
//		ipaddress = CommonUtils.getClientIpAddress(request);
//       
//        ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheckProduct(token);
//		if(generalResponse.getBody().getStatus()==200)
//		{
//			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
//		}
//		else
//		{
//		        return generalResponse;
//		}
//				
//		if(authenticateUserResponse!=null)
//		{
//			try 
//			{
//				System.out.println("transactionId before decryption :"+transactionId);
//				String sessionKey = transactionId.substring(0, 16);
//				String decryptedBody =  cryptoJs.decrypt(transactionId.substring(16), sessionKey);
//				decryptedBody = decryptedBody.replaceAll("\"", "");
//				System.out.println("decryptedBody :"+decryptedBody);
//				String pathPrefix = this.getPathPrefix();
////				System.out.println("path prefix : "+pathPrefix);
//				String parts[] = pathPrefix.split("@");
//				pathPrefix = parts[0];
//				String fileName = uploadFile.getOriginalFilename();
//				fileName = parts[1]+fileName.substring(fileName.lastIndexOf("."));
//				String directory = env.getProperty("upload.file.path");
//				if(!new File(directory+pathPrefix).exists()){
//					new File(directory+pathPrefix).mkdirs();
//				}
//				String file = directory+pathPrefix+File.separator+fileName;
//				System.out.println("file path : "+file);
//				final BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(file)));
//				stream.write(uploadFile.getBytes());
//				stream.close();
//				AccountTransactionEntity accountTransactionEntity = accountTransactionJpaRepository.findByTransactionId(decryptedBody);
//				System.out.println(accountTransactionEntity);
//				if(accountTransactionEntity!=null)
//				{
//					
//					if(accountTransactionEntity.getAttachmentList()!=null)
//					{
//						accountTransactionEntity.setAttachmentList(accountTransactionEntity.getAttachmentList()+","+Base64.encodeBase64String((pathPrefix+File.separator+fileName).replace("\\", "/").getBytes()));
//					}
//					else
//					{
//						accountTransactionEntity.setAttachmentList(Base64.encodeBase64String((pathPrefix+File.separator+fileName).replace("\\", "/").getBytes()));
//					}
//					accountTransactionJpaRepository.save(accountTransactionEntity);
//					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_OK, Constants.IMAGE_UPLOADED,null,authenticateUserResponse.getToken()), HttpStatus.OK);
//				}
//				else
//				{
//					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.NO_DATA_AVAILABLE,null,authenticateUserResponse.getToken()), HttpStatus.OK);
//				}
//				
//			} catch (FileNotFoundException e) {
//				e.printStackTrace();
//				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.EXCEPTION_IN_SERVER,HttpServletResponse.SC_CONFLICT,authenticateUserResponse.getToken()), HttpStatus.OK);
//
//			}
//			catch(IOException e){
//				e.printStackTrace();
//				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.EXCEPTION_IN_SERVER,HttpServletResponse.SC_CONFLICT,authenticateUserResponse.getToken()), HttpStatus.OK);
//			}
//		}
//		else
//		{
//		        generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.INVALID_CUSTOMER,HttpServletResponse.SC_CONFLICT,null), HttpStatus.OK);
//		}
//		
////		logger.info("Response:"+gson.toJson(response));
//		return generalResponse;
//	}
//	
//	/****************************************Save Image End*********************************/
//	
//	
//
//	/****************************************Save Location And Contacts To Transaction Start*********************************/	
//	
	@PostMapping("save/{transactionId}")
	public ResponseEntity<GeneralResponse> saveLocationAndAttachmentToTransaction(
			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,
			@RequestHeader(value = "customerIdh", required = true) String customerIdh,
			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
			@RequestHeader(value = Constants.HEADER_TOKEN) String token, HttpServletRequest request,
			HttpServletResponse response, @RequestBody TransactionEditDataModel dataModel,
			@PathVariable String transactionId) {

		System.out.println("Bef encrypt cust is" + customerIdh);

		String custId = null;
		try {
			custId = CommonUtils.decrypt(customerIdh);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		// System.out.println("Print the Header customer id is" + custId);

//		if (!custId.equals(customerId)) {
//			return new ResponseEntity<GeneralResponse>(
//					new GeneralResponse(HttpServletResponse.SC_CONFLICT, Constants.INVALID_CUSTOMER, null, null),
//					HttpStatus.OK);
//		}

		CustomerUserLoginEntity custlogin = validateService.loginValidate(custId, token);

		System.out.println("cust is:" + custlogin);

		if (custlogin != null) {
			// Logger logger =
			// Logger.getLogger("saveLocationAndContactsToTransactionLogger");
			// logger.info(Constants.LOG_START);
			ipaddress = CommonUtils.getClientIpAddress(request);
			// logger.info("Headers:"+"deviceId:"+deviceImei+", timestamp : "+timestamp+",
			// requestId : "+requestId+", channel : "+channel +" , deviceName : "+deviceName
			// + ",ipaddress : "+ ipaddress+" , latitude : "+latitude +" , longitude :
			// "+longitude +" , deviceMacAddress : "+deviceMacAddress );
			// logger.info("Before Encryption : "+ requestData);

			ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheckProduct(token);
			if (generalResponse.getBody().getStatus() == 200) {
				authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
			} else {
				return generalResponse;
			}

			if (authenticateUserResponse != null) {
				try {
//				String sessionKey = requestData.substring(0, 16);
//				String decryptedBody =  cryptoJs.decrypt(requestData.substring(16), sessionKey);	
//			//	logger.info("After Decryption : "+ decryptedBody);
//				System.out.println("After Decryption : "+ decryptedBody);
//				TransactionEditDataModel dataModel = null;
//				try
//				{
//					if(requestData!=null)
//					{
//						dataModel = gson.fromJson(decryptedBody, TransactionEditDataModel.class);
//					}
//				}
//				catch(Exception e)
//				{
//					e.printStackTrace();
//				//	logger.error("Error :: ", e);
//				//	logger.info("Exception occured at parsing model");
//				}
//				System.out.println("type: "+type);
					AccountTransactionEntity accountTransactionEntity = accountTransactionJpaRepository
							.findByTransactionId(transactionId);
					System.out.println(accountTransactionEntity);
//					for (AccountTransactionEntity accountTransactionEntity : accEntity) {

					if (accountTransactionEntity != null) {
						if (dataModel.getType().compareTo("map") == 0) {
							System.out.println("Inside Map");

							if (dataModel.getLatitude() != null) {
								accountTransactionEntity.setLatitude(dataModel.getLatitude());
							}
							if (dataModel.getLongitude() != null) {
								accountTransactionEntity.setLongitude(dataModel.getLongitude());
							}
							if (dataModel.getLatitudeDelta() != null) {
								accountTransactionEntity.setLatitudeDelta(dataModel.getLatitudeDelta());
							}
							if (dataModel.getLongitudeDelta() != null) {
								accountTransactionEntity.setLongitudeDelta(dataModel.getLongitudeDelta());
							}
							if (dataModel.getMapDescription() != null) {
								accountTransactionEntity.setMapDescription(dataModel.getMapDescription());
							}
							accountTransactionJpaRepository.save(accountTransactionEntity);
							generalResponse = new ResponseEntity<GeneralResponse>(
									new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED, null,
											authenticateUserResponse.getToken()),
									HttpStatus.OK);
						} else if (dataModel.getType().compareTo("contacts") == 0) {
							List<String> phoneNumbers = new ArrayList<String>();
							if (dataModel.getContactList().size() > 0) {
//							System.out.println("Contact list size:"+);
								for (ContactsDataModel c : dataModel.getContactList()) {
//								System.out.println(c.getPhoneNumber());
									ContactMasterEntity contactMasterEntity = contactMasterJpaRepository
											.findByMobileNumber(c.getPhoneNumber());
									if (contactMasterEntity != null) {
										contactMasterEntity.setActiveFlag(1);
										contactMasterJpaRepository.save(contactMasterEntity);
									} else {
										contactMasterEntity = new ContactMasterEntity();
										contactMasterEntity.setActiveFlag(1);
										contactMasterEntity.setMobileNumber(c.getPhoneNumber());
										contactMasterEntity.setName(c.getName());
										contactMasterEntity.setProfilePicture(c.getProfilePicture());
										contactMasterJpaRepository.save(contactMasterEntity);
									}
									if (contactMasterEntity != null) {
										TransactionContactsMappingEntity transactionContactsMappingEntity = transactionContactsMappingJpaRepository
												.findByAccountTransactionEntityAccountTransactionIdAndContactMasterMobileNumberAndActiveFlag(
														accountTransactionEntity.getAccountTransactionId(),
														contactMasterEntity.getMobileNumber(), 1);
										if (transactionContactsMappingEntity != null) {
											transactionContactsMappingEntity.setActiveFlag(1);
											transactionContactsMappingJpaRepository
													.save(transactionContactsMappingEntity);
										} else {
											transactionContactsMappingEntity = new TransactionContactsMappingEntity();
											transactionContactsMappingEntity
													.setAccountTransactionEntity(accountTransactionEntity);
											transactionContactsMappingEntity.setContactMaster(contactMasterEntity);
											transactionContactsMappingEntity.setActiveFlag(1);
											transactionContactsMappingJpaRepository
													.save(transactionContactsMappingEntity);
										}
									}
									phoneNumbers.add(c.getPhoneNumber());
								}
								List<TransactionContactsMappingEntity> transactionContactsMappingEntities = transactionContactsMappingJpaRepository
										.findByAccountTransactionEntityAccountTransactionIdAndActiveFlag(
												accountTransactionEntity.getAccountTransactionId(), 1);
								if (transactionContactsMappingEntities.size() > 0) {
									for (TransactionContactsMappingEntity t : transactionContactsMappingEntities) {
										if (!phoneNumbers.contains(t.getContactMaster().getMobileNumber())) {
											t.setActiveFlag(0);
											transactionContactsMappingJpaRepository.save(t);
										}
									}
								}
								generalResponse = new ResponseEntity<GeneralResponse>(
										new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED_1,
												null, authenticateUserResponse.getToken()),
										HttpStatus.OK);
							} else {
								List<TransactionContactsMappingEntity> transactionContactsMappingEntities = transactionContactsMappingJpaRepository
										.findByAccountTransactionEntityAccountTransactionIdAndActiveFlag(
												accountTransactionEntity.getAccountTransactionId(), 1);
								if (transactionContactsMappingEntities.size() > 0) {
									for (TransactionContactsMappingEntity t : transactionContactsMappingEntities) {

										t.setActiveFlag(0);
										transactionContactsMappingJpaRepository.save(t);
									}
								}
								generalResponse = new ResponseEntity<GeneralResponse>(
										new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED_1,
												null, authenticateUserResponse.getToken()),
										HttpStatus.OK);

							}
						} else {
							HashSet<String> accountNumbers = new HashSet<String>();
							if (dataModel.getBeneficiaryList().size() > 0) {

//							System.out.println("Contact list size:"+);
								for (BeneficiaryDataModel c : dataModel.getBeneficiaryList()) {
//								System.out.println("Before:"+c.getBeneficiaryAccountNumber());
									c.setBeneficiaryAccountNumber(c.getBeneficiaryAccountNumber());
//								System.out.println("After:"+c.getBeneficiaryAccountNumber());
									BeneficiaryDataEntity beneficiaryDataEntity = beneficiaryDataJpaRepository
											.findByBeneficiaryDataId(c.getBeneficiaryAccountNumber().trim());
//							System.out.println("beneficiaryDataEntity:"+beneficiaryDataEntity);
									if (beneficiaryDataEntity != null) {
										beneficiaryDataEntity.setActiveFlag(1);
										beneficiaryDataJpaRepository.save(beneficiaryDataEntity);
									} else {
										beneficiaryDataEntity = new BeneficiaryDataEntity();
										beneficiaryDataEntity.setActiveFlag(1);
										beneficiaryDataEntity
												.setBeneficiaryAccountNumber(c.getBeneficiaryAccountNumber());
										beneficiaryDataEntity.setBeneficiaryName(c.getBeneficiaryName());
										beneficiaryDataEntity.setCustomerId(accountTransactionEntity.getLinkedAccounts()
												.getCustomerMaster().getCustomerId());
										beneficiaryDataEntity.setFiDeatilsId(
												fiDetailsJpaRepository.findByFiDetailsId(1L).getFiDetailsId());
										beneficiaryDataJpaRepository.save(beneficiaryDataEntity);
									}
									if (beneficiaryDataEntity != null) {
//									System.out.println(beneficiaryDataEntity.getId());
										TransactionBeneficiaryMappingEntity transactionBeneficiaryMappingEntity = transactionBeneficiaryMappingJpaRepository
												.findByAccountTransactionEntityAccountTransactionIdAndBenediciaryDataBeneficiaryAccountNumberAndActiveFlag(
														accountTransactionEntity.getAccountTransactionId(),
														beneficiaryDataEntity.getBeneficiaryAccountNumber(), 1);
										if (transactionBeneficiaryMappingEntity != null) {
											transactionBeneficiaryMappingEntity.setActiveFlag(1);
											transactionBeneficiaryMappingJpaRepository
													.save(transactionBeneficiaryMappingEntity);
										} else {
											transactionBeneficiaryMappingEntity = new TransactionBeneficiaryMappingEntity();
											transactionBeneficiaryMappingEntity
													.setAccountTransactionEntity(accountTransactionEntity);
//										System.out.println("Bene::::"+beneficiaryDataEntity.getBeneficiaryAccountNumber());
											transactionBeneficiaryMappingEntity
													.setBenediciaryData(beneficiaryDataEntity);
											transactionBeneficiaryMappingEntity.setActiveFlag(1);
											transactionBeneficiaryMappingJpaRepository
													.save(transactionBeneficiaryMappingEntity);
										}
									}
									accountNumbers.add(c.getBeneficiaryAccountNumber().trim());
								}
//							System.out.println(accountNumbers);
								List<TransactionBeneficiaryMappingEntity> transactionBeneficiaryMappingEntities = transactionBeneficiaryMappingJpaRepository
										.findByAccountTransactionEntityAccountTransactionIdAndActiveFlagAndBenediciaryDataBeneficiaryAccountNumberIsNotIn(
												accountTransactionEntity.getAccountTransactionId(), 1, accountNumbers);
//							System.out.println(transactionBeneficiaryMappingEntities.size());
								if (transactionBeneficiaryMappingEntities.size() > 0) {
									for (TransactionBeneficiaryMappingEntity t : transactionBeneficiaryMappingEntities) {
//									System.out.println(t.getBeneficiaryAccountNumber());
										if (!accountNumbers.contains(
												t.getBenediciaryData().getBeneficiaryAccountNumber().trim())) {
//										System.out.println("does not contain");
											t.setActiveFlag(0);
											transactionBeneficiaryMappingJpaRepository.save(t);
										}
									}
								}
								generalResponse = new ResponseEntity<GeneralResponse>(
										new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED,
												null, authenticateUserResponse.getToken()),
										HttpStatus.OK);

							} else {

								List<TransactionBeneficiaryMappingEntity> transactionBeneficiaryMappingEntities = transactionBeneficiaryMappingJpaRepository
										.findByAccountTransactionEntityAccountTransactionIdAndActiveFlag(
												accountTransactionEntity.getAccountTransactionId(), 1);
								if (transactionBeneficiaryMappingEntities.size() > 0) {
									for (TransactionBeneficiaryMappingEntity t : transactionBeneficiaryMappingEntities) {

										t.setActiveFlag(0);
										transactionBeneficiaryMappingJpaRepository.save(t);
									}
								}
								generalResponse = new ResponseEntity<GeneralResponse>(
										new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED,
												null, authenticateUserResponse.getToken()),
										HttpStatus.OK);

							}
						}
					} else {
						generalResponse = new ResponseEntity<GeneralResponse>(
								new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
										Constants.INVALID_TRANSACTION_ID, null, authenticateUserResponse.getToken()),
								HttpStatus.OK);
					}
//					}
				} catch (Exception e) {
					e.printStackTrace();
					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
									Constants.EXCEPTION_IN_SERVER, null, authenticateUserResponse.getToken()),
							HttpStatus.OK);
					// logger.error("Error :: ", e);
				}
			} else {
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.INVALID_CUSTOMER,
								null, null),
						HttpStatus.OK);
			}
			// logger.info("Response:"+gson.toJson(generalResponse));
			// logger.info(Constants.LOG_END);
			return generalResponse;
		} else {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_CONFLICT,
					Constants.INVALID_CUSTOMER, HttpServletResponse.SC_CONFLICT,token),
					HttpStatus.OK);
		}
	}

//
//
//	
//	/****************************************Save Location And Contacts To Transaction End*********************************/
//	
//	
//	
//	/****************************************Get Transaction Id Details Start*********************************/
//	
//	
//	
//	@PostMapping("/details")
//	public ResponseEntity<GeneralResponse> getTransactionDetails(
//			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
//			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
//			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,
//			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
//			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
//			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
//			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
//			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
//			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
//			@RequestHeader(value = Constants.HEADER_TOKEN) String token,
//            HttpServletRequest request,HttpServletResponse response,@RequestBody String requestData
//          )
//	{
//		//Logger logger = Logger.getLogger("GetTransactionsCategorywise");
//		logger.info(Constants.LOG_START);
//		ipaddress = CommonUtils.getClientIpAddress(request);
//		logger.info("Headers:"+"deviceId:"+deviceImei+",   timestamp : "+timestamp+", requestId : "+requestId+", channel : "+channel +" , deviceName : "+deviceName + ",ipaddress : "+ ipaddress+" , latitude : "+latitude +" , longitude : "+longitude +" , deviceMacAddress : "+deviceMacAddress );
//    
//        TransactionResponseEncryptedModel transactionModel = null;
//		List<TransactionResponseEncryptedModel> responseList = new ArrayList<TransactionResponseEncryptedModel>();
//		ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheck(token);
//		if(generalResponse.getBody().getStatus()==200)
//		{
//			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
//		}
//		else
//		{
//			return generalResponse;
//	    }
//		if(authenticateUserResponse!=null)
//		{
//			try 
//			{
//				TransactionsResponseModel transResponseModel = null;
//				String sessionKey = requestData.substring(0, 16);
//				String decryptedBody =  cryptoJs.decrypt(requestData.substring(16), sessionKey);
//		        logger.info("After Decryption : "+ decryptedBody);
//		        try
//				{
//					if(requestData!=null)
//					{
//						transResponseModel = gson.fromJson(decryptedBody, TransactionsResponseModel.class);
//					}
//				}
//				catch(Exception e)
//				{
//					e.printStackTrace();
//					logger.error("Error :: ", e);
//					logger.info("Exception occured at parsing model");
//				}
//				List<TransactionModesEntity> modes = (List<TransactionModesEntity>) modesJpaRepository.findAll();
//				HashMap<String, TransactionModesEntity> modesMap = new HashMap<String, TransactionModesEntity>();
//				if (modes.size() > 0) {
//					for (TransactionModesEntity m : modes) 
//					{
//						modesMap.put(m.getModeName(), m);
//					}
//				}
//				List<AccountTransactionEntity> accountTransactionEntities = null;
//				if (transResponseModel.getTransactionId() != null)
//				{
//					AccountTransactionEntity accountTransactionEntity = accountTransactionJpaRepository
//							.findByTransactionId(transResponseModel.getTransactionId());
//					if (accountTransactionEntity != null) {
//						if (accountTransactionEntity.getInactivatedId() != null)
//						{
//							accountTransactionEntities = accountTransactionJpaRepository
//									.findByInactivatedIdAndActiveFlag(accountTransactionEntity.getInactivatedId(), 1);
//						}
//						else
//						{
//							accountTransactionEntities = accountTransactionJpaRepository
//									.findByInactivatedIdAndActiveFlag(accountTransactionEntity.getAccountTransactionId(), 1);
//						}
//
//						if (accountTransactionEntities.size() > 0) 
//						{
//							if (accountTransactionEntities.size() == 1) 
//							{
//								transactionModel = commonUtils.setDataToModelAltEncrypted(accountTransactionEntity, transactionModel,
//										modesMap, accountTransactionEntity.getAccountTransactionId(), "S");
//								transactionModel.setId(accountTransactionEntity.getAccountTransactionId());
//								responseList.add(transactionModel);
//							}
//							else 
//							{
//								if (accountTransactionEntity != null) 
//								{
//									AccountTransactionEntity accountTransactionEntity2 = null;
//									if (accountTransactionEntity.getInactivatedId() != null) {
//										accountTransactionEntity2 = accountTransactionJpaRepository
//												.findOne(accountTransactionEntity.getInactivatedId());
//									}
//									else
//									{
//										accountTransactionEntity2 = accountTransactionJpaRepository
//												.findOne(accountTransactionEntity.getAccountTransactionId());
//									}
//
//									transactionModel = commonUtils.setDataToModelAltEncrypted(accountTransactionEntity2, transactionModel,
//											modesMap, accountTransactionEntity2.getAccountTransactionId(), "P");
//									transactionModel.setId(accountTransactionEntity2.getAccountTransactionId());
//									responseList.add(transactionModel);
//									for (AccountTransactionEntity childTransactions : accountTransactionEntities) {
//										transactionModel = commonUtils.setDataToModelAltEncrypted(childTransactions, transactionModel, modesMap,
//												accountTransactionEntity.getAccountTransactionId(), "C");
//										transactionModel.setParentId(accountTransactionEntity2.getAccountTransactionId());
//										transactionModel.setId(childTransactions.getId());
//										responseList.add(transactionModel);
//									}
//								}
//							}
//						}
//						else
//						{
//							transactionModel = commonUtils.setDataToModelAltEncrypted(accountTransactionEntity, transactionModel, modesMap,
//									accountTransactionEntity.getAccountTransactionId(), "S");
//							transactionModel.setId(accountTransactionEntity.getAccountTransactionId());
//							responseList.add(transactionModel);
//						}
//						sessionKey = Base64.encodeBase64String(CryptoJS.generateSessionKey()).substring(0, 16);
//						generalResponse = new ResponseEntity<GeneralResponse>(
//						new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED,
//								sessionKey+cryptoJs.encrypt(ObjectParser.produceJson(responseList), sessionKey), authenticateUserResponse.getToken()),
//						HttpStatus.OK);
//					}
//					else
//					{
//						generalResponse = new ResponseEntity<GeneralResponse>(
//								new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
//										Constants.INVALID_TRANSACTION_ID, null, authenticateUserResponse.getToken()),
//								HttpStatus.OK);
//					}
//				}
//			}
//			catch (Exception e)
//			{
//				e.printStackTrace();
//				generalResponse = new ResponseEntity<GeneralResponse>(
//						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
//								null, authenticateUserResponse.getToken()),
//						HttpStatus.OK);
//			}
//		}
//		else
//		{
//			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.INVALID_CUSTOMER,HttpServletResponse.SC_CONFLICT,null), HttpStatus.OK);
//		}
//		logger.info("Response:"+gson.toJson(generalResponse));
//		logger.info(Constants.LOG_END);
//		return generalResponse;
//	}
//	
//	/****************************************Get Transaction Id Details End*********************************/
//	
//	
//	
//	
//	@PostMapping("/get/category/wise")
//	public ResponseEntity<GeneralResponse> getTransactionsDataCategory(
//			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
//			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
//			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,
//			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
//			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
//			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
//			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
//			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
//			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
//			@RequestHeader(value = Constants.HEADER_TOKEN) String token,
//            HttpServletRequest request,HttpServletResponse response,
//			@RequestBody String requestData) {
//		//Logger logger = Logger.getLogger("GetTransactionsCategorywiseLogger");
//		logger.info(Constants.LOG_START);
//		ipaddress = CommonUtils.getClientIpAddress(request);
//		logger.info("Headers:"+"deviceId:"+deviceImei+",   timestamp : "+timestamp+", requestId : "+requestId+", channel : "+channel +" , deviceName : "+deviceName + ",ipaddress : "+ ipaddress+" , latitude : "+latitude +" , longitude : "+longitude +" , deviceMacAddress : "+deviceMacAddress );
//        ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheck(token);
//		if(generalResponse.getBody().getStatus()==200)
//		{
//			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
//		}
//		else
//		{
//			return generalResponse;
//	    }
//		if(authenticateUserResponse!=null)
//		{
//			DashboardFilterModel dataModel = null;
//			String sessionKey = requestData.substring(0, 16);
//			String decryptedBody =  cryptoJs.decrypt(requestData.substring(16), sessionKey);
//	        logger.info("After Decryption : "+ decryptedBody);
//	        try
//			{
//				if(requestData!=null)
//				{
//					dataModel = gson.fromJson(decryptedBody, DashboardFilterModel.class);
//				}
//			}
//			catch(Exception e)
//			{
//				e.printStackTrace();
//				logger.error("Error :: ", e);
//				logger.info("Exception occured at parsing model");
//			}
//	        logger.info("Request:"+gson.toJson(dataModel));
//			List<TransactionModesEntity> modes = (List<TransactionModesEntity>) modesJpaRepository.findAll();
//			HashMap<String, TransactionModesEntity> modesMap = new HashMap<String, TransactionModesEntity>();
//			List<TransactionsResponseModel> responseList = null;
//			List<AccountTransactionEntity> accountTransactions  = null;
//			try {
//				if (dataModel != null) {
//					//				if(filter.getCalenderSelectedFlag()!=null && filter.getCalenderSelectedFlag() ==1)
//					//				{
//					dataModel = CommonUtils.setDates(dataModel, logger);
//					//				}
//				}
//
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//			if (modes.size() > 0) {
//				for (TransactionModesEntity m : modes) {
//					modesMap.put(m.getModeName(), m);
//				}
//			}
//			try 
//			{
//				if(dataModel.getCategoryId()==null)
//				{
//					dataModel.setCategoryId(0);
//					logger.info("LinkedAccountId:"+dataModel.getLinkedAccountId()+"    "+dataModel.getStartDate()+"  "+dataModel.getEndDate());
//					accountTransactions = accountTransactionJpaRepository.findByLinkedAccountsIdAndActiveFlagAndCategoryAndTransactionTimestampBetweenOrderByIdDesc(dataModel.getLinkedAccountId(), 1, 0,dataModel.getStartDate(), dataModel.getEndDate());
//				}
//				else
//				{
//					accountTransactions = accountTransactionJpaRepository
//							.findByLinkedAccountsIdAndActiveFlagAndCategoryAndTypeAndTransactionTimestampBetweenOrderByIdDesc(
//									dataModel.getLinkedAccountId(), 1, dataModel.getCategoryId(), dataModel.getType(),
//									dataModel.getStartDate(), dataModel.getEndDate());
//				}
//				
//				if (accountTransactions.size() > 0) {
//					responseList = commonUtils.setDataToModel(accountTransactions, modesMap, generalResponse,null);
//					sessionKey = Base64.encodeBase64String(CryptoJS.generateSessionKey()).substring(0, 16);
//					generalResponse = new ResponseEntity<GeneralResponse>(
//					new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED,
//							sessionKey+cryptoJs.encrypt(ObjectParser.produceJson(responseList), sessionKey), authenticateUserResponse.getToken()),
//					HttpStatus.OK);
//				} else {
//					generalResponse = new ResponseEntity<GeneralResponse>(
//							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.NO_DATA_AVAILABLE,
//									null, authenticateUserResponse.getToken()),
//							HttpStatus.OK);
//				}
//			} 
//			catch (Exception e) {
//				e.printStackTrace();
//				logger.error("Error :: ", e);
//				generalResponse = new ResponseEntity<GeneralResponse>(
//						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
//								null, authenticateUserResponse.getToken()),
//						HttpStatus.OK);
//			}	
//		}
//		else
//		{
//			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.INVALID_CUSTOMER,HttpServletResponse.SC_CONFLICT,null), HttpStatus.OK);
//		}
//		
//		logger.info("Response:" + gson.toJson(generalResponse));
//		logger.info(Constants.LOG_END);
//		return generalResponse;
//	}
//	
//	
//	
//	
//	@PostMapping("category/change")
//	public ResponseEntity<GeneralResponse> changeCategory(
//			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
//			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
//			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,
//			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
//			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
//			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
//			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
//			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
//			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
//			@RequestHeader(value = Constants.HEADER_TOKEN) String token,
//            HttpServletRequest request,HttpServletResponse response,
//			@RequestBody String requestData) {
//		//Logger logger = Logger.getLogger("CategoryChangeLogger");
//		logger.info(Constants.LOG_START);
//		ipaddress = CommonUtils.getClientIpAddress(request);
//		logger.info("Headers:"+"deviceId:"+deviceImei+",   timestamp : "+timestamp+", requestId : "+requestId+", channel : "+channel +" , deviceName : "+deviceName + ",ipaddress : "+ ipaddress+" , latitude : "+latitude +" , longitude : "+longitude +" , deviceMacAddress : "+deviceMacAddress );
//		ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheck(token);
//		if(generalResponse.getBody().getStatus()==200)
//		{
//			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
//		}
//		else
//		{
//			return generalResponse;
//	    }
//		if(authenticateUserResponse!=null)
//		{
//			TransactionsResponseModel transResponseModel = null;
//			String sessionKey = requestData.substring(0, 16);
//			String decryptedBody =  cryptoJs.decrypt(requestData.substring(16), sessionKey);
//	        logger.info("After Decryption : "+ decryptedBody);
//	        try
//			{
//				if(requestData!=null)
//				{
//					transResponseModel = gson.fromJson(decryptedBody, TransactionsResponseModel.class);
//				}
//			}
//			catch(Exception e)
//			{
//				e.printStackTrace();
//				logger.error("Error :: ", e);
//				logger.info("Exception occured at parsing model");
//			}
//			AccountTransactionEntity accountEntity = null;
//			YearlyExpenseDataEntity yearlyExpenseDataEntity = null;
//			AccountTransactionEntity accountTransactionEntity = null;
//			YearlyExpenseDataEntity yearlyExpenseDataUpadteCategoryEntity = null;
//			MonthlyExpenseDataEntity monthlyExpenseDataEntity = null;
//			MonthlyExpenseDataEntity monthlyExpenseDataUpadteCategoryEntity = null;
//			WeeklyExpenseDataEntity weeklyExpenseDataEntity = null;
//			WeeklyExpenseDataEntity weeklyExpenseDataUpadteCategoryEntity = null;
//			String newData="";
//			String oldData="";
//			try
//			{
//				accountEntity = accountTransactionJpaRepository.findByTransactionIdAndActiveFlag(transResponseModel.getTransactionId(), 1);
//				if (accountEntity != null)
//				{
//			        if(accountEntity.getInactivatedId()!=null)
//					{
//						List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository.findByInactivatedIdAndActiveFlag(accountEntity.getInactivatedId(), 1);
//						if(accountTransactionEntities.size()>0)
//						{
//						    for(AccountTransactionEntity a: accountTransactionEntities)
//						    {
//						    	if(a.getCategory()!=0)
//						    	{
//						    		if(accountEntity.getType().compareTo(Constants.CREDIT)==0)
//							    	{
//							    		if(oldData.compareTo("")!=0)
//								       	{
//							    			oldData = oldData +","+ incomeCategoryJpaRepository.findOne(a.getCategory()).getIncomeCategoryName()
//							    					+":"+a.getTransactionAmount(); 
//								       	}
//								       	else
//								       	{
//								       		oldData = oldData + incomeCategoryJpaRepository.findOne(a.getCategory()).getIncomeCategoryName()+":"+a.getTransactionAmount();
//								       	}
//							    	}
//							    	else
//							    	{
//							    		if(oldData.compareTo("")!=0)
//								       	{
//							    			oldData = oldData +"," +categoriesJpaRepository.findOne(a.getCategory()).getExpenseCategory()+":"+a.getTransactionAmount(); 
//								       	}
//								       	else
//								       	{
//								       		oldData = oldData + categoriesJpaRepository.findOne(a.getCategory()).getExpenseCategory()+":"+a.getTransactionAmount();
//								       	}
//							    	}	
//						    	}
//						    	
//						    }
//						}
//					}
//					accountEntity.setActiveFlag(0);
//					accountEntity.setLastModifiedTimestamp(new Date());
//					accountTransactionJpaRepository.save(accountEntity);
//					accountTransactionEntity = new AccountTransactionEntity();
//					accountTransactionEntity.setActiveFlag(1);
//					accountTransactionEntity.setCategory(transResponseModel.getCategoryId());
//					accountTransactionEntity.setCurrency(accountEntity.getCurrency());
//					accountTransactionEntity.setLastModifiedTimestamp(new Date());
//					accountTransactionEntity.setLinkedAccounts(accountEntity.getLinkedAccounts());
//					accountTransactionEntity.setMccCode(accountEntity.getMccCode());
//					accountTransactionEntity.setMerchantMaster(accountEntity.getMerchantMaster());
//					accountTransactionEntity.setMode(accountEntity.getMode());
//					accountTransactionEntity.setNarration(accountEntity.getNarration());
//					accountTransactionEntity.setTransactionAmount(accountEntity.getTransactionAmount());
//					accountTransactionEntity.setTransactionId(CommonUtils.getTransactionId(accountEntity.getLinkedAccounts().getId(),accountEntity.getId(),"C"));
//					accountTransactionEntity.setTransactionTimestamp(accountEntity.getTransactionTimestamp());
//					accountTransactionEntity.setType(accountEntity.getType());
//					accountTransactionEntity.setSourceCurrency(accountEntity.getSourceCurrency());
//					accountTransactionEntity.setDestinationCurrency(accountEntity.getDestinationCurrency());
//					accountTransactionEntity.setBaseCurrency(accountEntity.getBaseCurrency());
//					accountTransactionEntity.setBankId(accountEntity.getBankId());
//					accountTransactionEntity
//					.setRemarks("RECORD CREATED FROM CHANGE CATEGORY" + "-" + accountEntity.getId());
//					if (accountEntity.getInactivatedId() != null) {
//						accountTransactionEntity.setInactivatedId(accountEntity.getInactivatedId());
//					} else {
//						accountTransactionEntity.setInactivatedId(accountEntity.getId());
//					}
//					accountTransactionEntity.setLatitude(accountEntity.getLatitude());
//					accountTransactionEntity.setLongitude(accountEntity.getLongitude());
//					accountTransactionEntity.setMapDescription(accountEntity.getMapDescription());
//					accountTransactionEntity.setAttachmentList(accountEntity.getAttachmentList());
//					accountTransactionEntity.setDeviceImei(deviceImei);
//					accountTransactionEntity.setDeviceLatitude(latitude);
//					accountTransactionEntity.setDeviceLongitude(longitude);
//					accountTransactionEntity.setRequestId(requestId);
//					accountTransactionEntity.setIpAddress(ipaddress);
//					accountTransactionEntity.setDeviceMacAddress(deviceMacAddress);
//					accountTransactionEntity.setChannel(channel);
//					accountTransactionEntity.setDeviceLatitude(latitude);
//					accountTransactionEntity.setDeviceLongitude(longitude);
//					accountTransactionJpaRepository.save(accountTransactionEntity);
//					if(accountEntity.getInactivatedId()!=null)
//					{
//						List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository.findByInactivatedIdAndActiveFlag(accountEntity.getInactivatedId(), 1);
//						if(accountTransactionEntities.size()>0)
//						{
//						    for(AccountTransactionEntity a: accountTransactionEntities)
//						    {
//						    	if(accountEntity.getType().compareTo(Constants.CREDIT)==0)
//						    	{
//						    		if(newData.compareTo("")!=0)
//							       	{
//						    			newData = newData +","+ incomeCategoryJpaRepository.findOne(a.getCategory()).getIncomeCategoryName()
//						    					+":"+a.getTransactionAmount(); 
//							       	}
//							       	else
//							       	{
//							       		newData = newData + incomeCategoryJpaRepository.findOne(a.getCategory()).getIncomeCategoryName()+":"+a.getTransactionAmount();
//							       	}
//						    	}
//						    	else
//						    	{
//						    		if(newData.compareTo("")!=0)
//							       	{
//						    			newData = newData + ","+categoriesJpaRepository.findOne(a.getCategory()).getExpenseCategory()+":"+a.getTransactionAmount(); 
//							       	}
//							       	else
//							       	{
//							       		newData = newData + categoriesJpaRepository.findOne(a.getCategory()).getExpenseCategory()+":"+a.getTransactionAmount();
//							       	}
//						    	}
//						    }
//						}
//					}
//					setDataInAccountTransactionCategoryChange("category change",accountEntity,accountTransactionEntity,deviceImei,requestId,timestamp,channel,deviceMacAddress,ipaddress,latitude, longitude, oldData,newData);
//					
//					if(accountEntity.getInactivatedId()==null && accountEntity.getCategory().intValue()==18)
//					{
//						PredictionTransactinsEntity predictionTransactinsEntity = predictionTransactinsJpaRepository.findByTransactionIdAndCompletedFlag(transResponseModel.getTransactionId(), 0);
//						if(predictionTransactinsEntity!=null)
//						{
//							predictionTransactinsEntity.setUserInputCategoryId(transResponseModel.getCategoryId());
//							predictionTransactinsEntity.setCompletedFlag(1);
//							predictionTransactinsEntity.setUserInputDate(new Date());
//							predictionTransactinsJpaRepository.save(predictionTransactinsEntity);
//							
//						}
//						else
//						{
////							System.out.println("NO PREDICTION");
//						}
//					}
//					else if(accountEntity.getInactivatedId()!=null)
//					{
//						List<AccountTransactionEntity> accountTransactionEntity2 = accountTransactionJpaRepository.findByInactivatedIdAndActiveFlag(accountEntity.getInactivatedId(), 1);
//						AccountTransactionEntity originalAccountTransaction = accountTransactionJpaRepository.findOne(accountEntity.getInactivatedId());
//						if(accountTransactionEntity2!=null && accountTransactionEntity2.size()==1)
//						{
//							PredictionTransactinsEntity predictionTransactinsEntity = predictionTransactinsJpaRepository.findByTransactionId(originalAccountTransaction.getTransactionId());
//							if(predictionTransactinsEntity!=null)
//							{
//								predictionTransactinsEntity.setUserInputCategoryId(transResponseModel.getCategoryId());
//								predictionTransactinsEntity.setCompletedFlag(1);
//								predictionTransactinsEntity.setUserInputDate(new Date());
//								predictionTransactinsJpaRepository.save(predictionTransactinsEntity);
////								PredictionTransactinsCopyEntity predictionTransactinsCopyEntity = predictionTransactinsCopyJpaRepository.findByTransactionId(originalAccountTransaction.getTransactionId());
////								if(predictionTransactinsCopyEntity!=null)
////								{
////									predictionTransactinsCopyEntity.setUserInputCategoryId(updatedCategoryId);
////									predictionTransactinsCopyEntity.setCompletedFlag(1);
////									predictionTransactinsCopyJpaRepository.save(predictionTransactinsCopyEntity);
////								}
//							}
//						}
//						else if(accountTransactionEntity2.size()>1)
//						{
//							int count=1;
//							for(AccountTransactionEntity acc: accountTransactionEntity2)
//							{
//								PredictionTransactinsEntity predictionTransactinsEntity = predictionTransactinsJpaRepository.findByTransactionId(originalAccountTransaction.getTransactionId());
//								if(predictionTransactinsEntity!=null)
//								{
//									if(count==1)
//									{
//										predictionTransactinsEntity.setSplitCategory(acc.getCategory().toString());
//									    predictionTransactinsEntity.setSplitAmount(acc.getTransactionAmount().toString());
//									}
//									else
//									{
//										if(predictionTransactinsEntity.getSplitCategory()!=null)
//										{
//											predictionTransactinsEntity.setSplitCategory(predictionTransactinsEntity.getSplitCategory()+","+acc.getCategory());
//										}
//										
//										if(predictionTransactinsEntity.getSplitAmount()!=null)
//										{
//											predictionTransactinsEntity.setSplitAmount(predictionTransactinsEntity.getSplitAmount()+","+acc.getTransactionAmount());
//										}
//									}
//									
//									predictionTransactinsEntity.setCompletedFlag(1);
//									predictionTransactinsEntity.setUserInputDate(new Date());
//									predictionTransactinsJpaRepository.save(predictionTransactinsEntity);
//								}
//								count++;
//							}
//						}
//					}
//					List<TransactionContactsMappingEntity> transactionContactsMappingEntities = transactionContactsMappingJpaRepository.findByAccountTransactionEntityAccountTransactionIdAndActiveFlag(accountEntity.getId(),1);
//				    if(transactionContactsMappingEntities.size()>0)
//				    {
//				    	for(TransactionContactsMappingEntity t: transactionContactsMappingEntities)
//				    	{
//				    		TransactionContactsMappingEntity transactionContactsMappingEntity = new TransactionContactsMappingEntity();
//				    		transactionContactsMappingEntity.setAccountTransaction(accountTransactionEntity);
//				    		transactionContactsMappingEntity.setContactMasterId(t.getContactMasterId());
//				    		transactionContactsMappingEntity.setActiveFlag(1);
//				    		transactionContactsMappingJpaRepository.save(transactionContactsMappingEntity);
//				    	}
//				    }
//				    
//				    List<TransactionBeneficiaryMappingEntity> transactionBeneficiaryMappingEntities = transactionBeneficiaryMappingJpaRepository.findByAccountTransactionEntityAccountTransactionIdAndActiveFlag(accountEntity.getId(), 1);
//				    if(transactionBeneficiaryMappingEntities.size()>0)
//				    {
//				    	for(TransactionBeneficiaryMappingEntity t: transactionBeneficiaryMappingEntities)
//				    	{
//				    		TransactionBeneficiaryMappingEntity transactionBeneficiaryMappingEntity = new TransactionBeneficiaryMappingEntity();
//				    		transactionBeneficiaryMappingEntity.setAccountTransaction(accountTransactionEntity);
//				    		transactionBeneficiaryMappingEntity.setActiveFlag(1);
//				    		transactionBeneficiaryMappingEntity.setBeneficiaryAccountNumber(t.getBeneficiaryAccountNumber());
//				    		transactionBeneficiaryMappingJpaRepository.save(transactionBeneficiaryMappingEntity);
//				    	}
//				    }
//				    
//					accountTransactionEntity.setTransactionId(CommonUtils.getTransactionId(accountEntity.getLinkedAccounts().getId(),
//					accountTransactionEntity.getAccountTransactionId(), "C"));
//					Calendar cal = Calendar.getInstance();
//					cal.setTime(accountEntity.getTransactionTimestamp());
//					int dayOfWeek = cal.get(Calendar.WEEK_OF_YEAR);
//					int dayOfMonth = cal.get(Calendar.MONTH);
//					int dayOfYear = cal.get(Calendar.YEAR);
//					int dayOfWeekMonth = cal.get(Calendar.WEEK_OF_MONTH);
//
//					yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
//							.findByLinkedAccountsIdAndYearAndTypeOfTransactionAndCategoryAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//									accountEntity.getLinkedAccounts().getId(), dayOfYear, accountEntity.getType(),
//									accountEntity.getCategory(), 1,accountEntity.getCurrency(),(accountEntity.getMerchantMaster()!=null?accountEntity.getMerchantMaster().getId():null),accountEntity.getMode());
//                   if (yearlyExpenseDataEntity != null) {
//
//						yearlyExpenseDataUpadteCategoryEntity = yearlyExpenseDataJpaRepository
//								.findByLinkedAccountsIdAndYearAndTypeOfTransactionAndCategoryAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//										accountEntity.getLinkedAccounts().getId(), dayOfYear, accountEntity.getType(),
//										transResponseModel.getCategoryId(), 1,accountEntity.getCurrency(),(accountEntity.getMerchantMaster()!=null?accountEntity.getMerchantMaster().getId():null),accountEntity.getMode());
//						if (yearlyExpenseDataUpadteCategoryEntity != null) {
//							if (yearlyExpenseDataUpadteCategoryEntity.getTransactionAmount() != null) {
//								yearlyExpenseDataUpadteCategoryEntity
//								.setTransactionAmount(yearlyExpenseDataUpadteCategoryEntity.getTransactionAmount()
//										+ accountEntity.getTransactionAmount());
//							} else {
//								yearlyExpenseDataUpadteCategoryEntity
//								.setTransactionAmount(accountEntity.getTransactionAmount());
//							}
//							yearlyExpenseDataUpadteCategoryEntity.setLastModifiedTimeStamp(new Date());
//							yearlyExpenseDataJpaRepository.save(yearlyExpenseDataUpadteCategoryEntity);
//						} else {
//							yearlyExpenseDataUpadteCategoryEntity = new YearlyExpenseDataEntity();
//							yearlyExpenseDataUpadteCategoryEntity.setActiveFlag(Constants.ACTIVE_TRUE);
//							yearlyExpenseDataUpadteCategoryEntity.setCurrency(accountEntity.getCurrency());
//							yearlyExpenseDataUpadteCategoryEntity.setBalanceAmount(accountEntity.getTransactionAmount());
//							yearlyExpenseDataUpadteCategoryEntity.setCategory(transResponseModel.getCategoryId());
//							yearlyExpenseDataUpadteCategoryEntity.setCreatedTimeStamp(new Date());
//							yearlyExpenseDataUpadteCategoryEntity.setCustomerMaster(accountEntity.getLinkedAccounts().getCustomerMaster());
//							yearlyExpenseDataUpadteCategoryEntity
//							.setCustomerMaster(accountEntity.getLinkedAccounts().getCustomerMaster());
//							yearlyExpenseDataUpadteCategoryEntity.setLastModifiedTimeStamp(null);
//							yearlyExpenseDataUpadteCategoryEntity.setLinkedAccounts(accountEntity.getLinkedAccounts());
//							yearlyExpenseDataUpadteCategoryEntity.setModifiedTimeStamp(null);
//							yearlyExpenseDataUpadteCategoryEntity
//							.setTransactionAmount(accountEntity.getTransactionAmount());
//							yearlyExpenseDataUpadteCategoryEntity.setTypeOfTransaction(accountEntity.getType());
//							yearlyExpenseDataUpadteCategoryEntity.setYear(dayOfYear);
//							yearlyExpenseDataUpadteCategoryEntity.setRemarks("RECORD CREATED FROM CHANGE CATEGORY");
//							yearlyExpenseDataUpadteCategoryEntity.setInactivatedId(yearlyExpenseDataEntity.getId());
//							yearlyExpenseDataUpadteCategoryEntity.setMerchantId(accountEntity.getMerchantMaster()!=null?accountEntity.getMerchantMaster().getId():null);
//							yearlyExpenseDataUpadteCategoryEntity.setMode(accountEntity.getMode());		
//							yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
//						}
//						logger.info("10");
//						//					System.out.println("yearlyExpenseDataUpadteCategoryEntity:"
//						//							+ yearlyExpenseDataUpadteCategoryEntity.getTransactionAmount());
//						yearlyExpenseDataEntity.setTransactionAmount(yearlyExpenseDataEntity.getTransactionAmount() - accountEntity.getTransactionAmount());
//						yearlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
//						yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
//						//					System.out.println("yearlyExpenseDataEntity:" + yearlyExpenseDataEntity.getTransactionAmount());
//						monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
//								.findByLinkedAccountsIdAndMonthAndYearAndTypeOfTransactionAndCategoryAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//										accountEntity.getLinkedAccounts().getId(), dayOfMonth + 1, dayOfYear,
//										accountEntity.getType(), accountEntity.getCategory(), 1,accountEntity.getCurrency(),(accountEntity.getMerchantMaster()!=null?accountEntity.getMerchantMaster().getId():null),accountEntity.getMode());
//						//					System.out.println(monthlyExpenseDataEntity);
//						HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();
//						String dateVal = dateFormatter.format(accountEntity.getTransactionTimestamp());
//						if (monthlyExpenseDataEntity != null) {
//							//									monthlyExpenseDataEntity.setActiveFlag(0);
//
//							monthlyExpenseDataUpadteCategoryEntity = monthlyExpenseDataJpaRepository
//									.findByLinkedAccountsIdAndMonthAndYearAndTypeOfTransactionAndCategoryAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//											accountEntity.getLinkedAccounts().getId(), dayOfMonth + 1, dayOfYear,
//											accountEntity.getType(), transResponseModel.getCategoryId(), 1,accountEntity.getCurrency(),(accountEntity.getMerchantMaster()!=null?accountEntity.getMerchantMaster().getId():null),accountEntity.getMode());
//							if (monthlyExpenseDataUpadteCategoryEntity != null) {
//								if (monthlyExpenseDataUpadteCategoryEntity.getTransactionAmount() != null) {
//									monthlyExpenseDataUpadteCategoryEntity.setTransactionAmount(
//											monthlyExpenseDataUpadteCategoryEntity.getTransactionAmount()
//											+ accountEntity.getTransactionAmount());
//								} else {
//									monthlyExpenseDataUpadteCategoryEntity
//									.setTransactionAmount(accountEntity.getTransactionAmount());
//								}
//								monthlyExpenseDataUpadteCategoryEntity.setLastModifiedTimeStamp(new Date());
//								String value = monthlyExpenseDataUpadteCategoryEntity.getAmountDate();
//								value = value.substring(1, value.length()-1);           //remove curly brackets
//								String[] keyValuePairs = value.split(",");              //split the string to creat key-value pairs
//								dateAndAmountMap = new HashMap<String, Double>();               
//
//								for(String pair : keyValuePairs)                        //iterate over the pairs
//								{
//								    String[] entry = pair.split("=");                   //split the pairs to get key and value 
//								    dateAndAmountMap.put(entry[0].trim(),Double.valueOf(entry[1].trim()));          //add them to the hashmap and trim whitespaces
//								}
//								if(dateAndAmountMap.containsKey(dateVal))
//								{
//									dateAndAmountMap.put(dateVal,(dateAndAmountMap.get(dateVal)+accountEntity.getTransactionAmount())); 
//								}
//								else
//								{
//									dateAndAmountMap.put(dateVal,accountEntity.getTransactionAmount()); 
//								}
//								monthlyExpenseDataUpadteCategoryEntity.setAmountDate(dateAndAmountMap.toString());
//								if(monthlyExpenseDataUpadteCategoryEntity.getCount()!=null)
//								{
//									monthlyExpenseDataUpadteCategoryEntity.setCount(monthlyExpenseDataUpadteCategoryEntity.getCount()+1);
//								}
//								else
//								{
//									monthlyExpenseDataUpadteCategoryEntity.setCount(1);
//								}
//								monthlyExpenseDataJpaRepository.save(monthlyExpenseDataUpadteCategoryEntity);
//							} else {
//
//								monthlyExpenseDataUpadteCategoryEntity = new MonthlyExpenseDataEntity();
//								monthlyExpenseDataUpadteCategoryEntity.setActiveFlag(Constants.ACTIVE_TRUE);
//								yearlyExpenseDataUpadteCategoryEntity.setCustomerMaster(accountEntity.getLinkedAccounts().getCustomerMaster());
//								monthlyExpenseDataUpadteCategoryEntity.setCurrency(accountEntity.getCurrency());
//								monthlyExpenseDataUpadteCategoryEntity
//								.setBalanceAmount(accountEntity.getTransactionAmount());
//								monthlyExpenseDataUpadteCategoryEntity.setCategory(transResponseModel.getCategoryId());
//								monthlyExpenseDataUpadteCategoryEntity.setCreatedTimeStamp(new Date());
//								monthlyExpenseDataUpadteCategoryEntity
//								.setCustomerMaster(accountEntity.getLinkedAccounts().getCustomerMaster());
//								monthlyExpenseDataUpadteCategoryEntity.setLastModifiedTimeStamp(null);
//								monthlyExpenseDataUpadteCategoryEntity.setLinkedAccounts(accountEntity.getLinkedAccounts());
//								monthlyExpenseDataUpadteCategoryEntity.setModifiedTimeStamp(null);
//								monthlyExpenseDataUpadteCategoryEntity
//								.setTransactionAmount(accountEntity.getTransactionAmount());
//								monthlyExpenseDataUpadteCategoryEntity.setTypeOfTransaction(accountEntity.getType());
//								monthlyExpenseDataUpadteCategoryEntity.setMonth(dayOfMonth + 1);
//								monthlyExpenseDataUpadteCategoryEntity.setYear(dayOfYear);
//								monthlyExpenseDataUpadteCategoryEntity.setRemarks("RECORD CREATED FROM CHANGE CATEGORY");
//								monthlyExpenseDataUpadteCategoryEntity.setInactivatedId(monthlyExpenseDataEntity.getId());
//								monthlyExpenseDataUpadteCategoryEntity.setMerchantId(accountEntity.getMerchantMaster()!=null?accountEntity.getMerchantMaster().getId():null);
//								monthlyExpenseDataUpadteCategoryEntity.setMode(accountEntity.getMode());
//								monthlyExpenseDataUpadteCategoryEntity.setCount(1);
//								dateAndAmountMap = new HashMap<String, Double>();
//								dateAndAmountMap.put(dateVal, accountEntity.getTransactionAmount());
//								monthlyExpenseDataUpadteCategoryEntity.setAmountDate(dateAndAmountMap.toString());
//								monthlyExpenseDataJpaRepository.save(monthlyExpenseDataUpadteCategoryEntity);
//							}
//							monthlyExpenseDataEntity
//							.setTransactionAmount(monthlyExpenseDataEntity.getTransactionAmount()
//											- accountEntity.getTransactionAmount()
//											);
//							monthlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
//							
//							String value = monthlyExpenseDataEntity.getAmountDate();
//							value = value.substring(1, value.length()-1);           //remove curly brackets
//							String[] keyValuePairs = value.split(",");              //split the string to creat key-value pairs
//							dateAndAmountMap = new HashMap<String, Double>();               
//
//							for(String pair : keyValuePairs)                        //iterate over the pairs
//							{
//							    String[] entry = pair.split("=");                   //split the pairs to get key and value 
//							    dateAndAmountMap.put(entry[0].trim(),Double.valueOf(entry[1].trim()));          //add them to the hashmap and trim whitespaces
//							}
//							if(dateAndAmountMap.containsKey(dateVal))
//							{
//								dateAndAmountMap.put(dateVal,(dateAndAmountMap.get(dateVal)-accountEntity.getTransactionAmount())); 
//							}
//							monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
//							
//							monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
//							logger.info("12");
//							//						System.out.println("monthlyExpenseDataJpaRepository:" + monthlyExpenseDataEntity);
//							//									setDataInPopularCategory(accountEntity.getLinkedAccounts().getId(),accountEntity.getCategory(),accountEntity.getType(),updatedCategoryId,logger);
//							weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
//									.findBylinkedAccountsIdAndCategoryAndTypeOfTransactionAndMonthAndYearAndWeekAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//											accountEntity.getLinkedAccounts().getId(), accountEntity.getCategory(),
//											accountEntity.getType(), dayOfMonth + 1, dayOfYear, dayOfWeek, 1,accountEntity.getCurrency(),(accountEntity.getMerchantMaster()!=null?accountEntity.getMerchantMaster().getId():null),accountEntity.getMode());
//
//							if (weeklyExpenseDataEntity != null) {
//
//								weeklyExpenseDataUpadteCategoryEntity = weeklyExpenseDataJpaRepository
//										.findBylinkedAccountsIdAndCategoryAndTypeOfTransactionAndMonthAndYearAndWeekAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//												accountEntity.getLinkedAccounts().getId(), transResponseModel.getCategoryId(),
//												accountEntity.getType(), dayOfMonth + 1, dayOfYear, dayOfWeek, 1,accountEntity.getCurrency(),(accountEntity.getMerchantMaster()!=null?accountEntity.getMerchantMaster().getId():null),accountEntity.getMode());
//
//								if (weeklyExpenseDataUpadteCategoryEntity != null) {
//									if (weeklyExpenseDataUpadteCategoryEntity.getTransactionAmount() != null) {
//										weeklyExpenseDataUpadteCategoryEntity.setTransactionAmount(
//												weeklyExpenseDataUpadteCategoryEntity.getTransactionAmount()
//												+ accountEntity.getTransactionAmount());
//									} else {
//										weeklyExpenseDataUpadteCategoryEntity
//										.setTransactionAmount(accountEntity.getTransactionAmount());
//									}
//									weeklyExpenseDataUpadteCategoryEntity.setLastModifiedTimeStamp(new Date());
//									weeklyExpenseDataJpaRepository.save(weeklyExpenseDataUpadteCategoryEntity);
//								} else {
//									weeklyExpenseDataUpadteCategoryEntity = new WeeklyExpenseDataEntity();
//									weeklyExpenseDataUpadteCategoryEntity.setActiveFlag(Constants.ACTIVE_TRUE);
//									weeklyExpenseDataUpadteCategoryEntity
//									.setBalanceAmount(accountEntity.getTransactionAmount());
//									weeklyExpenseDataUpadteCategoryEntity.setCurrency(accountEntity.getCurrency());
//									weeklyExpenseDataUpadteCategoryEntity.setCategory(transResponseModel.getCategoryId());
//									weeklyExpenseDataUpadteCategoryEntity.setCreatedTimeStamp(new Date());
//									weeklyExpenseDataUpadteCategoryEntity
//									.setCustomerMaster(accountEntity.getLinkedAccounts().getCustomerMaster());
//									weeklyExpenseDataUpadteCategoryEntity.setLastModifiedTimeStamp(null);
//									weeklyExpenseDataUpadteCategoryEntity
//									.setLinkedAccounts(accountEntity.getLinkedAccounts());
//									weeklyExpenseDataUpadteCategoryEntity.setModifiedTimeStamp(null);
//									weeklyExpenseDataUpadteCategoryEntity
//									.setTransactionAmount(accountEntity.getTransactionAmount());
//									weeklyExpenseDataUpadteCategoryEntity.setTypeOfTransaction(accountEntity.getType());
//									weeklyExpenseDataUpadteCategoryEntity.setMonth(dayOfMonth + 1);
//									weeklyExpenseDataUpadteCategoryEntity.setYear(dayOfYear);
//									weeklyExpenseDataUpadteCategoryEntity.setWeek(dayOfWeek);
//									weeklyExpenseDataUpadteCategoryEntity.setWeekOfMonth(dayOfWeekMonth);
//									weeklyExpenseDataUpadteCategoryEntity.setRemarks("RECORD CREATED FROM CHANGE CATEGORY");
//									weeklyExpenseDataUpadteCategoryEntity.setInactivatedId(weeklyExpenseDataEntity.getId());
//									weeklyExpenseDataUpadteCategoryEntity.setMerchantId(accountEntity.getMerchantMaster()!=null?accountEntity.getMerchantMaster().getId():null);
//									weeklyExpenseDataUpadteCategoryEntity.setMode(accountEntity.getMode());
//									weeklyExpenseDataJpaRepository.save(weeklyExpenseDataUpadteCategoryEntity);
//								}
////								weeklyExpenseDataEntity.setActiveFlag(0);
//								weeklyExpenseDataEntity
//								.setTransactionAmount( weeklyExpenseDataEntity.getTransactionAmount()
//										- weeklyExpenseDataUpadteCategoryEntity.getTransactionAmount()
//										);
//								weeklyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
//								weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
//								setDataInPopularCategory(accountEntity.getLinkedAccounts().getId(),
//										accountEntity.getCategory(), accountEntity.getType(),
//										accountTransactionEntity.getCategory(), logger);
//							
//								
//								logger.info("1ast");
//								
//								TransactionResponseEncryptedModel transactionResponseEncryptedModel = new TransactionResponseEncryptedModel();
//								transactionResponseEncryptedModel.setTransactionId(accountTransactionEntity.getTransactionId());
//								sessionKey = Base64.encodeBase64String(CryptoJS.generateSessionKey()).substring(0, 16);
//								generalResponse = new ResponseEntity<GeneralResponse>(
//								new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED,
//										sessionKey+cryptoJs.encrypt(ObjectParser.produceJson(transactionResponseEncryptedModel), sessionKey), authenticateUserResponse.getToken()),
//								HttpStatus.OK);
//							} else {
//								logger.info("Roll Back Account Transactions, Yearly , Monthly");
//							}
//						} else {
//							logger.info("Roll Back Account Transactions, Yearly ");
//						}
//					} else {
//						logger.info("Roll Back Account Transactions ");
//					}
//					
//				} else {
//					logger.info("else 1");
//					generalResponse = new ResponseEntity<GeneralResponse>(
//							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
//									Constants.INVALID_TRANSACTION_ID, null, authenticateUserResponse.getToken()),
//							HttpStatus.OK);
//				}
//			} catch (Exception e) {
//				e.printStackTrace();
//				logger.error("Error :: ", e);
//				generalResponse = new ResponseEntity<GeneralResponse>(
//						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
//								null, authenticateUserResponse.getToken()),
//						HttpStatus.OK);
//			}
//		}
//		else
//		{
//			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.INVALID_CUSTOMER,HttpServletResponse.SC_CONFLICT,null), HttpStatus.OK);
//		}
//		logger.info("Response:" + gson.toJson(generalResponse));
//		logger.info(Constants.LOG_END);
//		return generalResponse;
//	}
//	
//	
//	@PostMapping("mark/notAExpense")
//	public ResponseEntity<GeneralResponse> markNotAExpense(
//			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
//			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
//			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,
//			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
//			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
//			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
//			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
//			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
//			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
//			@RequestHeader(value = Constants.HEADER_TOKEN) String token,
//            HttpServletRequest request,HttpServletResponse response,
//			@RequestBody String requestData) {
//		//Logger logger = Logger.getLogger("MarkNotAExpense");
//		logger.info(Constants.LOG_START);
//		ipaddress = CommonUtils.getClientIpAddress(request);
//		logger.info("Headers:"+"deviceId:"+deviceImei+",   timestamp : "+timestamp+", requestId : "+requestId+", channel : "+channel +" , deviceName : "+deviceName + ",ipaddress : "+ ipaddress+" , latitude : "+latitude +" , longitude : "+longitude +" , deviceMacAddress : "+deviceMacAddress );
//		ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheck(token);
//		if(generalResponse.getBody().getStatus()==200)
//		{
//			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
//		}
//		else
//		{
//			return generalResponse;
//	    }
//		if(authenticateUserResponse!=null)
//		{
//			YearlyExpenseDataEntity yearlyExpenseDataEntity = null;
//			MonthlyExpenseDataEntity monthlyExpenseDataEntity = null;
//			WeeklyExpenseDataEntity weeklyExpenseDataEntity = null;
//			UnsplitAccountTransactionEntity unsplitAccountTransactionEntity = null;
//			PopularCategoryDetailsEntity popularCategoryDetailsEntity = null;
//			try {
//				
//				TransactionsResponseModel transResponseModel = null;
//				String sessionKey = requestData.substring(0, 16);
//				String decryptedBody =  cryptoJs.decrypt(requestData.substring(16), sessionKey);
//		        logger.info("After Decryption : "+ decryptedBody);
//		        try
//				{
//					if(requestData!=null)
//					{
//						transResponseModel = gson.fromJson(decryptedBody, TransactionsResponseModel.class);
//					}
//				}
//				catch(Exception e)
//				{
//					e.printStackTrace();
//					logger.error("Error :: ", e);
//					logger.info("Exception occured at parsing model");
//				}
//				AccountTransactionEntity accountTransactionEntity = accountTransactionJpaRepository
//						.findByTransactionIdAndActiveFlag(transResponseModel.getTransactionId(), 1);
//
//				if (accountTransactionEntity != null) 
//				{
//					String dateVal = dateFormatter.format(accountTransactionEntity.getTransactionTimestamp());
//					Calendar cal = Calendar.getInstance();
//					cal.setTime(accountTransactionEntity.getTransactionTimestamp());
//					int dayOfWeek = cal.get(Calendar.WEEK_OF_YEAR); // 6
//					int dayOfMonth = cal.get(Calendar.MONTH)+1; // 17
//					int dayOfYear = cal.get(Calendar.YEAR); // 169
//					int dayOfWeekMonth = cal.get(Calendar.WEEK_OF_MONTH); // 169
//					if (accountTransactionEntity.getNotAExpense() == null
//							|| (accountTransactionEntity.getNotAExpense() != null
//							&& accountTransactionEntity.getNotAExpense().equalsIgnoreCase("false")))
//					{
//
//						unsplitAccountTransactionEntity = unsplitAccountTransactionJpaRepository.findByTransactionId(accountTransactionEntity.getTransactionId());
//						if(unsplitAccountTransactionEntity==null)
//						{
//							unsplitAccountTransactionEntity = new UnsplitAccountTransactionEntity();
//						}
//						unsplitAccountTransactionEntity.setActiveFlag(1);
//						unsplitAccountTransactionEntity.setCategory(accountTransactionEntity.getCategory());
//						unsplitAccountTransactionEntity.setCurrency(accountTransactionEntity.getCurrency());
//						unsplitAccountTransactionEntity.setInactivatedId(accountTransactionEntity.getAccountTransactionId());
//						unsplitAccountTransactionEntity.setLastModifiedTimestamp(accountTransactionEntity.getLastModifiedTimestamp());
//						unsplitAccountTransactionEntity.setLinkedAccounts(accountTransactionEntity.getLinkedAccounts());
//						unsplitAccountTransactionEntity.setMccCode(accountTransactionEntity.getMccCode());
//						unsplitAccountTransactionEntity.setMerchantMaster(accountTransactionEntity.getMerchantMaster());
//						unsplitAccountTransactionEntity.setMode(accountTransactionEntity.getMode());
//						unsplitAccountTransactionEntity.setNarration(accountTransactionEntity.getNarration());
//						unsplitAccountTransactionEntity.setNotAExpense(accountTransactionEntity.getNotAExpense());
//						unsplitAccountTransactionEntity.setRemarks(accountTransactionEntity.getRemarks());
//						unsplitAccountTransactionEntity.setTransactionAmount(accountTransactionEntity.getTransactionAmount());
//						unsplitAccountTransactionEntity.setTransactionId(accountTransactionEntity.getTransactionId());
//						unsplitAccountTransactionEntity.setTransactionTimestamp(accountTransactionEntity.getTransactionTimestamp());
//						unsplitAccountTransactionEntity.setType(accountTransactionEntity.getType());
//						unsplitAccountTransactionJpaRepository.save(unsplitAccountTransactionEntity);
//						yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
//								.findByLinkedAccountsIdAndYearAndTypeOfTransactionAndCategoryAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//										accountTransactionEntity.getLinkedAccounts().getId(), dayOfYear,
//										accountTransactionEntity.getType(), accountTransactionEntity.getCategory(), 1,accountTransactionEntity.getCurrency(),accountTransactionEntity.getMerchantMaster()!=null?accountTransactionEntity.getMerchantMaster().getId():null,accountTransactionEntity.getMode());
//						monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
//								.findByLinkedAccountsIdAndMonthAndYearAndTypeOfTransactionAndCategoryAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//										accountTransactionEntity.getLinkedAccounts().getId(), dayOfMonth, dayOfYear,
//										accountTransactionEntity.getType(), accountTransactionEntity.getCategory(), 1,accountTransactionEntity.getCurrency(),accountTransactionEntity.getMerchantMaster()!=null?accountTransactionEntity.getMerchantMaster().getId():null,accountTransactionEntity.getMode());
//						weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
//								.findBylinkedAccountsIdAndCategoryAndTypeOfTransactionAndMonthAndYearAndWeekAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//										accountTransactionEntity.getLinkedAccounts().getId(),
//										accountTransactionEntity.getCategory(), accountTransactionEntity.getType(),
//										dayOfMonth , dayOfYear, dayOfWeek, 1,accountTransactionEntity.getCurrency(),accountTransactionEntity.getMerchantMaster()!=null?accountTransactionEntity.getMerchantMaster().getId():null,accountTransactionEntity.getMode());
//						if (yearlyExpenseDataEntity != null) {
//							yearlyExpenseDataEntity.setTransactionAmount(yearlyExpenseDataEntity.getTransactionAmount()
//									- accountTransactionEntity.getTransactionAmount());
//							yearlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
//							yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
//						}
//						if (monthlyExpenseDataEntity != null) {
//							monthlyExpenseDataEntity.setTransactionAmount(monthlyExpenseDataEntity.getTransactionAmount()
//									- accountTransactionEntity.getTransactionAmount());
//							
//							String value = monthlyExpenseDataEntity.getAmountDate();
//							value = value.substring(1, value.length()-1);           //remove curly brackets
//							String[] keyValuePairs = value.split(",");              //split the string to creat key-value pairs
//							HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();              
//							for(String pair : keyValuePairs)                        //iterate over the pairs
//							{
//							    String[] entry = pair.split("=");                   //split the pairs to get key and value 
//							    dateAndAmountMap.put(entry[0].trim(),Double.valueOf(entry[1].trim()));          //add them to the hashmap and trim whitespaces
//							}
//							if(dateAndAmountMap.containsKey(dateVal))
//							{
//								dateAndAmountMap.put(dateVal,(dateAndAmountMap.get(dateVal)-accountTransactionEntity.getTransactionAmount())); 
//							}
//							monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
//							if(monthlyExpenseDataEntity.getCount()!=null)
//							{
//								monthlyExpenseDataEntity.setCount(monthlyExpenseDataEntity.getCount()-1);
//							}
//							monthlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
//							monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
//						}
//						if (weeklyExpenseDataEntity != null) {
//							weeklyExpenseDataEntity.setTransactionAmount(weeklyExpenseDataEntity.getTransactionAmount()
//									- accountTransactionEntity.getTransactionAmount());
//							weeklyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
//							weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
//						}
//						popularCategoryDetailsEntity = popularCategoryDetailsJpaRepository.findByLinkedAccountIdAndCategoryIdAndType(accountTransactionEntity.getLinkedAccounts().getId(), 0, accountTransactionEntity.getType());
//						if (popularCategoryDetailsEntity != null) {
//							popularCategoryDetailsEntity
//							.setCount(popularCategoryDetailsEntity.getCount() != null
//							? popularCategoryDetailsEntity.getCount() + 1
//									: 0);
//							popularCategoryDetailsEntity.setTimestamp(new Date());
//							popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
//						} else
//						{
//							popularCategoryDetailsEntity = new PopularCategoryDetailsEntity();
//							popularCategoryDetailsEntity.setCategoryId(0);
//							popularCategoryDetailsEntity.setCount(1);
//							popularCategoryDetailsEntity
//							.setLinkedAccountId(accountTransactionEntity.getLinkedAccounts().getId());
//							popularCategoryDetailsEntity.setType(accountTransactionEntity.getType());
//							popularCategoryDetailsEntity.setTimestamp(new Date());
//							popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
//						}
////						setDataInAccountTransactionData(accountTransactionEntity, "mark not as expense/income");
//						accountTransactionEntity.setNotAExpense("true");
//						accountTransactionEntity.setCategory(0);
//						accountTransactionEntity.setDeviceImei(deviceImei);
//						accountTransactionEntity.setRequestId(requestId);
//						accountTransactionEntity.setIpAddress(ipaddress);
//						accountTransactionEntity.setDeviceMacAddress(deviceMacAddress);
//						accountTransactionEntity.setChannel(channel);
//						accountTransactionEntity.setDeviceLatitude(latitude);
//						accountTransactionEntity.setDeviceLongitude(longitude);
//						accountTransactionJpaRepository.save(accountTransactionEntity);
//						generalResponse = new ResponseEntity<GeneralResponse>(
//								new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED, null, authenticateUserResponse.getToken()),
//								HttpStatus.OK);
//
//					}
//					else if((accountTransactionEntity.getNotAExpense() != null
//							&& accountTransactionEntity.getNotAExpense().equalsIgnoreCase("true")))
//					{
////						setDataInAccountTransactionData(accountTransactionEntity, "mark not as expense/income");
//						accountTransactionEntity.setNotAExpense("false");
//						unsplitAccountTransactionEntity = unsplitAccountTransactionJpaRepository.findByTransactionId(transResponseModel.getTransactionId());
//						if(unsplitAccountTransactionEntity!=null)
//						{
//							accountTransactionEntity.setCategory(unsplitAccountTransactionEntity.getCategory());
//							accountTransactionJpaRepository.save(accountTransactionEntity);
//							popularCategoryDetailsEntity = popularCategoryDetailsJpaRepository.findByLinkedAccountIdAndCategoryIdAndType(accountTransactionEntity.getLinkedAccounts().getId(), unsplitAccountTransactionEntity.getCategory(), accountTransactionEntity.getType());
//							if (popularCategoryDetailsEntity != null) {
//								popularCategoryDetailsEntity
//								.setCount(popularCategoryDetailsEntity.getCount() != null
//								? popularCategoryDetailsEntity.getCount() + 1
//										: 0);
//								popularCategoryDetailsEntity.setTimestamp(new Date());
//								popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
//							} 
//							else
//								
//							{
//								popularCategoryDetailsEntity = new PopularCategoryDetailsEntity();
//								popularCategoryDetailsEntity.setCategoryId(unsplitAccountTransactionEntity.getCategory());
//								popularCategoryDetailsEntity.setCount(1);
//								popularCategoryDetailsEntity
//								.setLinkedAccountId(accountTransactionEntity.getLinkedAccounts().getId());
//								popularCategoryDetailsEntity.setType(accountTransactionEntity.getType());
//								popularCategoryDetailsEntity.setTimestamp(new Date());
//								popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
//							}
//							unsplitAccountTransactionJpaRepository.delete(unsplitaccountTransactionEntity.getAccountTransactionId());
//						}
//						yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
//								.findByLinkedAccountsIdAndYearAndTypeOfTransactionAndCategoryAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//										accountTransactionEntity.getLinkedAccounts().getId(), dayOfYear,
//										accountTransactionEntity.getType(), accountTransactionEntity.getCategory(), 1,accountTransactionEntity.getCurrency(),accountTransactionEntity.getMerchantMaster()!=null?accountTransactionEntity.getMerchantMaster().getId():null,accountTransactionEntity.getMode());
//
//						monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
//								.findByLinkedAccountsIdAndMonthAndYearAndTypeOfTransactionAndCategoryAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//										accountTransactionEntity.getLinkedAccounts().getId(), dayOfMonth, dayOfYear,
//										accountTransactionEntity.getType(), accountTransactionEntity.getCategory(), 1,accountTransactionEntity.getCurrency(),accountTransactionEntity.getMerchantMaster()!=null?accountTransactionEntity.getMerchantMaster().getId():null,accountTransactionEntity.getMode());
//						weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
//								.findBylinkedAccountsIdAndCategoryAndTypeOfTransactionAndMonthAndYearAndWeekAndActiveFlagAndCurrencyAndMerchantIdAndMode(
//										accountTransactionEntity.getLinkedAccounts().getId(),
//										accountTransactionEntity.getCategory(), accountTransactionEntity.getType(),
//										dayOfMonth , dayOfYear, dayOfWeek, 1,accountTransactionEntity.getCurrency(),accountTransactionEntity.getMerchantMaster()!=null?accountTransactionEntity.getMerchantMaster().getId():null,accountTransactionEntity.getMode());
//						if (yearlyExpenseDataEntity != null) {
//							yearlyExpenseDataEntity.setTransactionAmount(yearlyExpenseDataEntity.getTransactionAmount()
//									+accountTransactionEntity.getTransactionAmount());
//							yearlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
//							yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
//						}
//						else {
//							yearlyExpenseDataEntity = new YearlyExpenseDataEntity();
//							yearlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
//							yearlyExpenseDataEntity.setCategory(accountTransactionEntity.getCategory());
//							yearlyExpenseDataEntity.setCreatedTimeStamp(new Date());
//							yearlyExpenseDataEntity
//							.setCustomerMaster(accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
//							yearlyExpenseDataEntity.setLastModifiedTimeStamp(null);
//							yearlyExpenseDataEntity.setLinkedAccounts(accountTransactionEntity.getLinkedAccounts());
//							yearlyExpenseDataEntity.setModifiedTimeStamp(null);
//							yearlyExpenseDataEntity.setTransactionAmount(accountTransactionEntity.getTransactionAmount());
//							yearlyExpenseDataEntity.setTypeOfTransaction(accountTransactionEntity.getType());
//							yearlyExpenseDataEntity.setYear(dayOfYear);
//							yearlyExpenseDataEntity.setCurrency(accountTransactionEntity.getCurrency());
//							yearlyExpenseDataEntity
//							.setCustomerMaster(accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
//							yearlyExpenseDataEntity.setMerchantId(accountTransactionEntity.getMerchantMaster()!=null?accountTransactionEntity.getMerchantMaster().getId():null);
//							yearlyExpenseDataEntity.setMode(accountTransactionEntity.getMode());
//							yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
//
//						}
//						if (monthlyExpenseDataEntity != null) {
//							monthlyExpenseDataEntity.setTransactionAmount(monthlyExpenseDataEntity.getTransactionAmount()
//									+accountTransactionEntity.getTransactionAmount());
//							monthlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
//							
//							String value = monthlyExpenseDataEntity.getAmountDate();
//							value = value.substring(1, value.length()-1);           //remove curly brackets
//							String[] keyValuePairs = value.split(",");              //split the string to creat key-value pairs
//							HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();               
//
//							for(String pair : keyValuePairs)                        //iterate over the pairs
//							{
//							    String[] entry = pair.split("=");                   //split the pairs to get key and value 
//							    dateAndAmountMap.put(entry[0].trim(),Double.valueOf(entry[1].trim()));          //add them to the hashmap and trim whitespaces
//							}
//							if(dateAndAmountMap.containsKey(dateVal))
//							{
//								dateAndAmountMap.put(dateVal,(dateAndAmountMap.get(dateVal)+accountTransactionEntity.getTransactionAmount())); 
//							}
//							else
//							{
//								dateAndAmountMap.put(dateVal,accountTransactionEntity.getTransactionAmount()); 
//							}
//							monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
//                            if(monthlyExpenseDataEntity.getCount()!=null)
//                            {
//                            	monthlyExpenseDataEntity.setCount(monthlyExpenseDataEntity.getCount()+1);
//                            }
//                            else
//                            {
//                            	monthlyExpenseDataEntity.setCount(1);
//                            }
//							monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
//						}
//						else
//						{
//							monthlyExpenseDataEntity = new MonthlyExpenseDataEntity();
//							monthlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
//							monthlyExpenseDataEntity.setCategory(accountTransactionEntity.getCategory());
//							monthlyExpenseDataEntity.setCreatedTimeStamp(new Date());
//							monthlyExpenseDataEntity
//							.setCustomerMaster(accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
//							monthlyExpenseDataEntity.setLastModifiedTimeStamp(null);
//							monthlyExpenseDataEntity.setLinkedAccounts(accountTransactionEntity.getLinkedAccounts());
//							monthlyExpenseDataEntity.setModifiedTimeStamp(null);
//							monthlyExpenseDataEntity.setTransactionAmount(accountTransactionEntity.getTransactionAmount());
//							monthlyExpenseDataEntity.setTypeOfTransaction(accountTransactionEntity.getType());
//							monthlyExpenseDataEntity.setMonth(dayOfMonth);
//							monthlyExpenseDataEntity.setCurrency(accountTransactionEntity.getCurrency());
//							monthlyExpenseDataEntity.setYear(dayOfYear);
//							monthlyExpenseDataEntity
//							.setCustomerMaster(accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
//							monthlyExpenseDataEntity.setMerchantId(accountTransactionEntity.getMerchantMaster()!=null?accountTransactionEntity.getMerchantMaster().getId():null);
//							monthlyExpenseDataEntity.setMode(accountTransactionEntity.getMode());
//							HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();
//							dateAndAmountMap.put(dateVal, accountTransactionEntity.getTransactionAmount());
//							monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
//							monthlyExpenseDataEntity.setCount(1);
//							monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
//						}
//						if (weeklyExpenseDataEntity != null) {
//							weeklyExpenseDataEntity.setTransactionAmount(weeklyExpenseDataEntity.getTransactionAmount()
//									+ accountTransactionEntity.getTransactionAmount());
//							weeklyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
//							weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
//						}
//						else
//						{
//							weeklyExpenseDataEntity = new WeeklyExpenseDataEntity();
//							weeklyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
//							weeklyExpenseDataEntity.setCategory(accountTransactionEntity.getCategory());
//							weeklyExpenseDataEntity.setCreatedTimeStamp(new Date());
//							weeklyExpenseDataEntity
//							.setCustomerMaster(accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
//							weeklyExpenseDataEntity.setLastModifiedTimeStamp(null);
//							weeklyExpenseDataEntity.setLinkedAccounts(accountTransactionEntity.getLinkedAccounts());
//							weeklyExpenseDataEntity.setModifiedTimeStamp(null);
//							weeklyExpenseDataEntity.setTransactionAmount(accountTransactionEntity.getTransactionAmount());
//							weeklyExpenseDataEntity.setTypeOfTransaction(accountTransactionEntity.getType());
//							weeklyExpenseDataEntity.setMonth(dayOfMonth);
//							weeklyExpenseDataEntity.setYear(dayOfYear);
//							weeklyExpenseDataEntity.setCurrency(accountTransactionEntity.getCurrency());
//							weeklyExpenseDataEntity.setWeekOfMonth(dayOfWeekMonth);
//							weeklyExpenseDataEntity.setWeek(dayOfWeek);
//							weeklyExpenseDataEntity.setRemarks("RECORD CREATED FROM SPLIT ");
//							weeklyExpenseDataEntity
//							.setCustomerMaster(accountTransactionEntity.getLinkedAccounts().getCustomerMaster());
//							weeklyExpenseDataEntity.setMerchantId(accountTransactionEntity.getMerchantMaster()!=null?accountTransactionEntity.getMerchantMaster().getId():null);
//							weeklyExpenseDataEntity.setMode(accountTransactionEntity.getMode());
//							weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
//						}
//						generalResponse = new ResponseEntity<GeneralResponse>(
//								new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED, null, authenticateUserResponse.getToken()),
//								HttpStatus.OK);
//					}
//				} 
//				else
//				{
//					generalResponse = new ResponseEntity<GeneralResponse>(
//							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.INVALID_TRANSACTION_ID, null, authenticateUserResponse.getToken()),
//							HttpStatus.OK);
//				}
//			} catch (Exception e) {
//				e.printStackTrace();
//				logger.error("Error :: ", e);
//				generalResponse = new ResponseEntity<GeneralResponse>(
//						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
//								null, authenticateUserResponse.getToken()),
//						HttpStatus.OK);
//			}
//		}
//		else
//		{
//			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.INVALID_CUSTOMER,HttpServletResponse.SC_CONFLICT,null), HttpStatus.OK);
//		}
//		logger.info("Response:" + gson.toJson(generalResponse));
//		logger.info(Constants.LOG_END);
//		return generalResponse;
//	}
//
	@PostMapping("split/transaction/u")
	public ResponseEntity<GeneralResponse> splitTransactionU(
			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,

			// @RequestHeader(value = Constants.HEADER_CUSTOMERID) String customerIdh,

			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
			@RequestHeader(value = Constants.HEADER_TOKEN) String token, HttpServletRequest request,
			HttpServletResponse response, @RequestBody SplitTransactionRequestModel dataModel) throws Exception {

		// Logger logger = null;
//		Logger logger = Logger.getLogger("splitTransactionsLogger");
//		logger.info(Constants.LOG_START);
//		ipaddress = CommonUtils.getClientIpAddress(request);
//		logger.info("Headers:"+"deviceId:"+deviceImei+",   timestamp : "+timestamp+", requestId : "+requestId+", channel : "+channel +" , deviceName : "+deviceName + ",ipaddress : "+ ipaddress+" , latitude : "+latitude +" , longitude : "+longitude +" , deviceMacAddress : "+deviceMacAddress );
//        logger.info("Before Encryption : "+ requestData);

		ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheckProduct(token);
		if (generalResponse.getBody().getStatus() == 200) {
			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
		} else {
			return generalResponse;
		}

		if (authenticateUserResponse != null) {
//			String sessionKey = requestData.substring(0, 16);
//			String decryptedBody =  cryptoJs.decrypt(requestData.substring(16), sessionKey);

//	        SplitTransactionRequestModel dataModel = null;
//			try
//			{
//				if(requestData!=null)
//				{
//					//dataModel = gson.fromJson(decryptedBody, SplitTransactionRequestModel.class);
//				}
//			}
//			catch(Exception e)
//			{
//				e.printStackTrace();
////				logger.error("Error :: ", e);
////				logger.info("Exception occured at parsing model");
//			}

			List<AccountTransactionEntity> accountEntityDetails = null;
			try {
				// accountEntity =
				// accountTransactionJpaRepository.findByTransactionId(dataModel.getTransactionId());

				accountEntityDetails = accountTransactionJpaRepository
						.getDataTransactionId(dataModel.getTransactionId());

				for (AccountTransactionEntity accountEntity : accountEntityDetails) {

					System.out.println("acc is:" + accountEntity);
					if (accountEntity != null) {
						System.out.println(dataModel.getTotalAmount() == accountEntity.getTransactionAmount());
						if (accountEntity.getInactivatedId() == null
								&& accountEntity.getTransactionAmount() == dataModel.getTotalAmount()
								&& accountEntity.getActiveFlag() == 1)

						{
							System.out.println("first split");
							dataModel.setParentId(accountEntity.getId());
							generalResponse = setDataForFreshTransaction(accountEntity, dataModel, deviceImei,
									requestId, timestamp, channel, deviceMacAddress, ipaddress, latitude, longitude,
									authenticateUserResponse.getToken());
						} else if (accountEntity.getInactivatedId() == null
								&& accountEntity.getTransactionAmount().compareTo(dataModel.getTotalAmount()) == 0
								&& accountEntity.getActiveFlag() == 0) {
							// logger.info("SECOND SPLIT");
							System.out.println("SECOND SPLIT");
							dataModel.setParentId(accountEntity.getInactivatedId());
							generalResponse = setDataForParentTransaction(accountEntity, dataModel, deviceImei,
									requestId, timestamp, channel, deviceMacAddress, ipaddress, latitude, longitude,
									authenticateUserResponse.getToken());
						} else {
							// logger.info("THIRD SPLIT");
							System.out.println("THIRD SPLIT");
							if (accountEntity.getInactivatedId() != null) {
								dataModel.setParentId(accountEntity.getInactivatedId());
							} else {
								dataModel.setParentId(accountEntity.getId());
							}
							generalResponse = setDataForParentTransaction(accountEntity, dataModel, deviceImei,
									requestId, timestamp, channel, deviceMacAddress, ipaddress, latitude, longitude,
									authenticateUserResponse.getToken());

							System.out.println("final data:" + generalResponse);
							// generalResponse = setDataForParentTransaction(accountEntity, dataModel,
							// logger);

						}
						generalResponse = new ResponseEntity<GeneralResponse>(
								new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED_1,
										generalResponse, authenticateUserResponse.getToken()),
								HttpStatus.OK);
					} else {
						generalResponse = new ResponseEntity<GeneralResponse>(
								new GeneralResponse(HttpServletResponse.SC_CONFLICT, Constants.INVALID_TRANSACTION_ID,
										null, authenticateUserResponse.getToken()),
								HttpStatus.OK);
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
								null, authenticateUserResponse.getToken()),
						HttpStatus.OK);
			}
		} else {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_CONFLICT,
					Constants.INVALID_CUSTOMER, HttpServletResponse.SC_CONFLICT, null), HttpStatus.OK);
		}

		return generalResponse;
	}

	//
//
//
//	@PostMapping("/child/row")
//	public ResponseEntity<GeneralResponse> childRowsWithParent(
//			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
//			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
//			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,
//			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
//			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
//			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
//			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
//			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
//			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
//			@RequestHeader(value = Constants.HEADER_TOKEN) String token,
//            HttpServletRequest request,HttpServletResponse response,
//            @RequestBody String requestData) {
//		//Logger logger = Logger.getLogger("AccountTransactionLogger");
//		logger.info(Constants.LOG_START);
//		ipaddress = CommonUtils.getClientIpAddress(request);
//		logger.info("Headers:"+"deviceId:"+deviceImei+",   timestamp : "+timestamp+", requestId : "+requestId+", channel : "+channel +" , deviceName : "+deviceName + ",ipaddress : "+ ipaddress+" , latitude : "+latitude +" , longitude : "+longitude +" , deviceMacAddress : "+deviceMacAddress );
//        ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheck(token);
//		if(generalResponse.getBody().getStatus()==200)
//		{
//			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
//		}
//		else
//		{
//			return generalResponse;
//	    }
//		if(authenticateUserResponse!=null)
//		{
//			DashboardFilterModel dataModel = null;
//			String sessionKey = requestData.substring(0, 16);
//			String decryptedBody =  cryptoJs.decrypt(requestData.substring(16), sessionKey);
//	        logger.info("After Decryption : "+ decryptedBody);
//	        try
//			{
//				if(requestData!=null)
//				{
//					dataModel = gson.fromJson(decryptedBody, DashboardFilterModel.class);
//				}
//			}
//			catch(Exception e)
//			{
//				e.printStackTrace();
//				logger.error("Error :: ", e);
//				logger.info("Exception occured at parsing model");
//			}
//	        logger.info("Request:"+gson.toJson(dataModel));
//			List<TransactionModesEntity> modes = (List<TransactionModesEntity>) modesJpaRepository.findAll();
//			HashMap<String, TransactionModesEntity> modesMap = new HashMap<String, TransactionModesEntity>();
//			TransactionsResponseModel transactionModel = null;
//			List<TransactionsResponseModel> transactionList = new ArrayList<TransactionsResponseModel>();
//			if (modes.size() > 0) {
//				for (TransactionModesEntity m : modes) {
//					modesMap.put(m.getModeName(), m);
//				}
//			}
//			try {
//				if (dataModel != null)
//				{
//					dataModel = CommonUtils.setDates(dataModel, logger);
//				}
//
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//			try {
//				// List<AccountTransactionEntity> accounTransactionEntities =
//				// accountTransactionJpaRepository.findByTransactionTimestampBetween( startDate,
//				// endDate);
////				System.out.println(
////								dataModel.getLinkedAccountId()+"  "+dataModel.getStartDate()+" "+dataModel.getEndDate());
//				List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository
//						.findByLinkedAccountsIdAndInactivatedIdIsNullAndTransactionTimestampBetween(
//								dataModel.getLinkedAccountId(), dataModel.getStartDate(), dataModel.getEndDate());
////				System.out.println("Account transactions :"+accountTransactionEntities.size());
//				if (accountTransactionEntities.size() > 0) {
//					for (AccountTransactionEntity a : accountTransactionEntities) {
//						//					System.out.println(a.getId());
//						//					System.out.println(a.getTransactionAmount());
//						List<AccountTransactionEntity> accounTransactions = accountTransactionJpaRepository
//								.findByInactivatedIdAndActiveFlag(a.getId(), 1);
//						if (accounTransactions.size() > 0) {
//							if (accounTransactions.size() == 1) {
//								for (AccountTransactionEntity childTransactions : accounTransactions) {
//									//								System.out.println(childTransactions.getId());
//									//								System.out.println(childTransactions.getTransactionAmount());
//									if (Double.compare(a.getTransactionAmount(),
//											childTransactions.getTransactionAmount()) == 0) {
//										transactionModel = commonUtils.setDataToModelAlt(childTransactions, transactionModel, modesMap,
//												a.getId(), "S");
//										transactionModel.setId(childTransactions.getId());
//										transactionList.add(transactionModel);
//									}
//								}
//							} else {
//								transactionModel = commonUtils.setDataToModelAlt(a, transactionModel, modesMap, a.getId(), "P");
//								transactionModel.setId(a.getId());
//								transactionList.add(transactionModel);
//								for (AccountTransactionEntity childTransactions : accounTransactions) {
//									transactionModel = commonUtils.setDataToModelAlt(childTransactions, transactionModel, modesMap,
//											a.getId(), "C");
//									transactionModel.setParentId(a.getId());
//									transactionModel.setId(childTransactions.getId());
//									transactionList.add(transactionModel);
//								}
//							}
//
//						} else {
//							transactionModel = commonUtils.setDataToModelAlt(a, transactionModel, modesMap, a.getId(), "S");
//							transactionModel.setId(a.getId());
//							transactionList.add(transactionModel);
//						}
//					}
//					sessionKey = Base64.encodeBase64String(CryptoJS.generateSessionKey()).substring(0, 16);
//					generalResponse = new ResponseEntity<GeneralResponse>(
//					new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED,
//							sessionKey+cryptoJs.encrypt(ObjectParser.produceJson(transactionList), sessionKey), authenticateUserResponse.getToken()),
//					HttpStatus.OK);
//
////					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_OK,
////							Constants.REQUEST_COMPLETED, transactionList, authenticateUserResponse.getToken()), HttpStatus.OK);
//				} else {
//					generalResponse = new ResponseEntity<GeneralResponse>(
//							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.NO_DATA_AVAILABLE,
//									null, authenticateUserResponse.getToken()),
//							HttpStatus.OK);
//				}
//			} catch (Exception e) {
//				e.printStackTrace();
//				logger.error("Error :: ", e);
//				generalResponse = new ResponseEntity<GeneralResponse>(
//						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
//								null, authenticateUserResponse.getToken()),
//						HttpStatus.OK);
//			}
//		}
//		else
//		{
//			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.INVALID_CUSTOMER,HttpServletResponse.SC_CONFLICT,null), HttpStatus.OK);
//		}
//		
//		logger.info("Response:" + gson.toJson(generalResponse));
//		logger.info(Constants.LOG_END);
//		return generalResponse;
//	}
//	
//
//	
	private ResponseEntity<GeneralResponse> setDataForFreshTransaction(AccountTransactionEntity a,
			SplitTransactionRequestModel dataModel, String deviceImei, String requestId, String timestamp,
			String channel, String deviceMacAddress, String ipaddress, Double latitude, Double longitude,
			String token) {

		// logger.info("FRESH TRANSACTION");
		ResponseEntity<GeneralResponse> generalResponse = null;
		YearlyExpenseDataEntity yearlyExpenseDataEntity = null;
		MonthlyExpenseDataEntity monthlyExpenseDataEntity = null;
		WeeklyExpenseDataEntity weeklyExpenseDataEntity = null;
		AccountTransactionEntity accountTransactionEntity = null;
		String oldData = "";
		String remarks = "";
		Calendar cal = Calendar.getInstance();
		cal.setTime(a.getTransactionTimestamp());
		int dayOfWeek = cal.get(Calendar.WEEK_OF_YEAR); // 6
		int dayOfMonth = cal.get(Calendar.MONTH) + 1; // 17
		int dayOfYear = cal.get(Calendar.YEAR); // 169
		String dateVal = dateFormatter.format(a.getTransactionTimestamp());
		try {
			List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository
					.findByInactivatedIdAndActiveFlag(a.getId(), 1);
			if (accountTransactionEntities.size() == 1) {
				for (AccountTransactionEntity acc : accountTransactionEntities) {
					if (a.getTransactionType().compareTo(Constants.CREDIT) == 0) {
						remarks = incomeCategoryJpaRepository.findByIncomeCategoryId(acc.getCategoryId())
								.getIncomeCategoryName() + ":" + acc.getTransactionAmount() + " is Categorized to ";
						oldData = oldData + incomeCategoryJpaRepository.findByIncomeCategoryId(acc.getCategoryId())
								.getIncomeCategoryName() + ":" + acc.getTransactionAmount();
					} else {
						remarks = categoriesJpaRepository.findByExpenseCategoryId(acc.getCategoryId())
								.getExpenseCategory() + ":" + acc.getTransactionAmount() + " is Categorized to ";
						oldData = oldData + categoriesJpaRepository.findByExpenseCategoryId(acc.getCategoryId())
								.getExpenseCategory() + ":" + acc.getTransactionAmount();
					}
				}
			} else {
				if (a.getTransactionType().compareTo(Constants.CREDIT) == 0) {
					remarks = incomeCategoryJpaRepository.findByIncomeCategoryId(a.getCategoryId())
							.getIncomeCategoryName() + ":" + a.getTransactionAmount() + " is Categorized to ";
					oldData = oldData + incomeCategoryJpaRepository.findByIncomeCategoryId(a.getCategoryId())
							.getIncomeCategoryName() + ":" + a.getTransactionAmount();
				} else {
					remarks = categoriesJpaRepository.findByExpenseCategoryId(a.getCategoryId()).getExpenseCategory()
							+ ":" + a.getTransactionAmount() + " is Categorized to ";
					oldData = oldData
							+ categoriesJpaRepository.findByExpenseCategoryId(a.getCategoryId()).getExpenseCategory()
							+ ":" + a.getTransactionAmount();
				}
			}

//		    System.out.println("Remarks:"+remarks);
//		    System.out.println("Old data:"+oldData);

//			setDataInAccountTransactionData(a, "Inactivating Transactions");
			a.setActiveFlag(0);
			a.setLastModifiedTimestamp(new Date());
			accountTransactionJpaRepository.save(a);
			yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
					.findByLinkedAccountsLinkedAccountIdAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
							a.getLinkedAccounts().getLinkedAccountId(), dayOfYear, a.getTransactionType(),
							a.getCategoryId(), 1, a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
							a.getMerchantMaster().getMerchantId(), a.getTransactionModes().getTransactionModeId());
			if (yearlyExpenseDataEntity != null) {
				// logger.info(yearlyExpenseDataEntity);
				yearlyExpenseDataEntity.setTransactionAmount(
						yearlyExpenseDataEntity.getTransactionAmount() - a.getTransactionAmount());
				yearlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
				yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
				// logger.info(yearlyExpenseDataEntity);
			}
			// logger.info("YEARLY SAVED");
			monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
					.findByLinkedAccountsLinkedAccountIdAndMonthAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
							a.getLinkedAccounts().getLinkedAccountId(), dayOfMonth, dayOfYear, a.getTransactionType(),
							a.getCategoryId(), 1, a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
							a.getMerchantMaster().getMerchantId(), a.getTransactionModes().getTransactionModeId());
			if (monthlyExpenseDataEntity != null) {
				// logger.info(monthlyExpenseDataEntity);
				monthlyExpenseDataEntity.setTransactionAmount(
						monthlyExpenseDataEntity.getTransactionAmount() - a.getTransactionAmount());
				monthlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());

				String value = monthlyExpenseDataEntity.getAmountDate();
				value = value.substring(1, value.length() - 1); // remove curly brackets
				String[] keyValuePairs = value.split(","); // split the string to creat key-value pairs
				HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();

				for (String pair : keyValuePairs) // iterate over the pairs
				{
					String[] entry = pair.split("="); // split the pairs to get key and value
					dateAndAmountMap.put(entry[0].trim(), Double.valueOf(entry[1].trim())); // add them to the hashmap
																							// and trim whitespaces
				}
				if (dateAndAmountMap.containsKey(dateVal)) {
					dateAndAmountMap.put(dateVal, (dateAndAmountMap.get(dateVal) - a.getTransactionAmount()));
				}

				monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());

				if (monthlyExpenseDataEntity.getCount() != null) {
					monthlyExpenseDataEntity.setCount(monthlyExpenseDataEntity.getCount() - 1);
				}
				monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
				// logger.info(monthlyExpenseDataEntity);
			}
			// logger.info("MONTHLY SAVED");
			weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
					.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndTypeOfTransactionAndMonthAndYearsAndWeekAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
							a.getLinkedAccounts().getLinkedAccountId(), a.getCategoryId(), a.getTransactionType(),
							dayOfMonth, dayOfYear, dayOfWeek, 1,
							a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
							a.getMerchantMaster().getMerchantId(), a.getTransactionModes().getTransactionModeId());
			if (weeklyExpenseDataEntity != null) {
				// logger.info(weeklyExpenseDataEntity);
				weeklyExpenseDataEntity.setTransactionAmount(
						weeklyExpenseDataEntity.getTransactionAmount() - a.getTransactionAmount());
				weeklyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
				weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
				// logger.info(weeklyExpenseDataEntity);
			}
			// logger.info("WEEKLY SAVED");
			String categoryData = "";
			for (CategoryRequestModel cat : dataModel.getCategoryList()) {
				// logger.info("cat:"+gson.toJson(cat));
				if (cat.getTransactionId() == null && cat.getAmount() > 0) {
					// logger.info("ENTERED");
					accountTransactionEntity = new AccountTransactionEntity();
					accountTransactionEntity.setActiveFlag(1);
					accountTransactionEntity.setCategoryId(cat.getCategoryId().longValue());
					accountTransactionEntity.setTransactionCurrencyCodeMaster(a.getTransactionCurrencyCodeMaster());
					accountTransactionEntity.setLastModifiedTimestamp(new Date());
					accountTransactionEntity.setLinkedAccounts(a.getLinkedAccounts());
					accountTransactionEntity.setMccCode(a.getMccCode());
					accountTransactionEntity.setMerchantMaster(a.getMerchantMaster());
					accountTransactionEntity.setTransactionModes(a.getTransactionModes());
					accountTransactionEntity.setNarration(a.getNarration());
					accountTransactionEntity.setTransactionAmount(cat.getAmount());
					accountTransactionEntity.setBaseCurrencyCodeMaster(a.getBaseCurrencyCodeMaster());
					accountTransactionEntity.setTransactionTimestamp(a.getTransactionTimestamp());
					accountTransactionEntity.setTransactionType(a.getTransactionType());
					accountTransactionEntity.setFiDetails(a.getFiDetails());
					accountTransactionEntity.setRemarks("RECORD CREATED FROM SPLIT ");
					if (a.getInactivatedId() != null) {
						accountTransactionEntity.setInactivatedId(a.getInactivatedId());
					} else {
						accountTransactionEntity.setInactivatedId(a.getId());
					}
					accountTransactionEntity.setLatitude(a.getLatitude());
					accountTransactionEntity.setLongitude(a.getLongitude());
					accountTransactionEntity.setAttachmentList(a.getAttachmentList());
					accountTransactionEntity.setMapDescription(a.getMapDescription());
					accountTransactionEntity.setDeviceImei(deviceImei);
					accountTransactionEntity.setRequestId(requestId);
					// accountTransactionEntity.setIpAddress(ipaddress);
					accountTransactionEntity.setDeviceMacAddress(deviceMacAddress);
					accountTransactionEntity.setChannel(channel);
					accountTransactionEntity.setDeviceLatitude(latitude);
					accountTransactionEntity.setDeviceLongitude(longitude);
					accountTransactionJpaRepository.save(accountTransactionEntity);

					List<TransactionContactsMappingEntity> transactionContactsMappingEntities = transactionContactsMappingJpaRepository
							.findByAccountTransactionEntityAccountTransactionIdAndActiveFlag(a.getId(), 1);
					if (transactionContactsMappingEntities.size() > 0) {
						for (TransactionContactsMappingEntity t : transactionContactsMappingEntities) {
							TransactionContactsMappingEntity transactionContactsMappingEntity = new TransactionContactsMappingEntity();
							transactionContactsMappingEntity.setAccountTransactionEntity(accountTransactionEntity);
							transactionContactsMappingEntity.setContactMaster(t.getContactMaster());
							transactionContactsMappingEntity.setActiveFlag(1);
							transactionContactsMappingJpaRepository.save(transactionContactsMappingEntity);
						}
					}

					List<TransactionBeneficiaryMappingEntity> transactionBeneficiaryMappingEntities = transactionBeneficiaryMappingJpaRepository
							.findByAccountTransactionEntityAccountTransactionIdAndActiveFlag(a.getId(), 1);
					if (transactionBeneficiaryMappingEntities.size() > 0) {
						for (TransactionBeneficiaryMappingEntity t : transactionBeneficiaryMappingEntities) {
							TransactionBeneficiaryMappingEntity transactionBeneficiaryMappingEntity = new TransactionBeneficiaryMappingEntity();
							transactionBeneficiaryMappingEntity.setAccountTransactionEntity(accountTransactionEntity);
							transactionBeneficiaryMappingEntity.setActiveFlag(1);
							transactionBeneficiaryMappingEntity.setBenediciaryData(t.getBenediciaryData());
							transactionBeneficiaryMappingJpaRepository.save(transactionBeneficiaryMappingEntity);
						}
					}
//					logger.info("Account entity craeted");
//					logger.info("Account Entity Id:" + accountTransactionEntity.getAccountTransactionId());
					accountTransactionEntity
							.setTransactionId(CommonUtils.getTransactionId(a.getLinkedAccounts().getLinkedAccountId(),
									accountTransactionEntity.getAccountTransactionId(), "S"));
					accountTransactionJpaRepository.save(accountTransactionEntity);
					remarks = remarks + categoryData;

					cal.setTime(accountTransactionEntity.getTransactionTimestamp());
//					cal.add(Calendar.DATE, 1);
					cal.set(Calendar.HOUR_OF_DAY, 0);
					cal.set(Calendar.MINUTE, 0);
					cal.set(Calendar.SECOND, 0);
					System.out.println(cal.getTime());

					EuroHistDataEntity euroHistDataEntity = euroHistoryDataService.getEuroHistoryDate(cal.getTime());
					if (euroHistDataEntity != null) {
						System.out.println("gggg");
						SetDataInAccountTransaction(euroHistDataEntity, accountTransactionEntity);
					}
//					else
//					{
//					     System.out.println("NO");
//						 System.out.println("Before Date : "+ cal.getTime());
//					     euroHistDataEntity = euroHistDataJpaRepository.findTopByDateBeforeOrderByDateDesc(cal.getTime());
//					     if(euroHistDataEntity!=null)
//					     {
//					    	 System.out.println("After Date : "+euroHistDataEntity.getDate());
//					    	 SetDataInAccountTransaction(euroHistDataEntity,accountTransactionEntity);
//					    	 
//					     }
//					     else
//					     {
//					    	 System.out.println("*******");
//					    	 euroHistDataEntity = euroHistDataJpaRepository.findTopByDateAfterOrderByDateAsc(cal.getTime());
//						     if(euroHistDataEntity!=null)
//						     {
//						    	 System.out.println("After Date : "+euroHistDataEntity.getDate());
//						     } 
//						     SetDataInAccountTransaction(euroHistDataEntity,accountTransactionEntity);
//					     }
//					}

					yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
							.findByLinkedAccountsLinkedAccountIdAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
									a.getLinkedAccounts().getLinkedAccountId(), dayOfYear, a.getTransactionType(),
									a.getCategoryId(), 1, a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
									a.getMerchantMaster().getMerchantId(),
									a.getTransactionModes().getTransactionModeId());
					yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
							.findByLinkedAccountsLinkedAccountIdAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
									a.getLinkedAccounts().getLinkedAccountId(), dayOfYear, a.getTransactionType(),
									cat.getCategoryId().longValue(), 1,
									a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
									a.getMerchantMaster().getMerchantId(),
									a.getTransactionModes().getTransactionModeId());
					if (yearlyExpenseDataEntity != null) {
						yearlyExpenseDataEntity
								.setTransactionAmount(yearlyExpenseDataEntity.getTransactionAmount() + cat.getAmount());
					} else {
						yearlyExpenseDataEntity = new YearlyExpenseDataEntity();
						yearlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
						yearlyExpenseDataEntity.setBalanceAmount(cat.getAmount());
						yearlyExpenseDataEntity.setCategoryId(cat.getCategoryId().longValue());
						yearlyExpenseDataEntity.setCreatedTimeStamp(new Date());
						yearlyExpenseDataEntity.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
						yearlyExpenseDataEntity.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
						yearlyExpenseDataEntity.setLastModifiedTimeStamp(null);
						yearlyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
						yearlyExpenseDataEntity.setModifiedTimeStamp(null);
						yearlyExpenseDataEntity.setTransactionAmount(cat.getAmount());
						yearlyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
						yearlyExpenseDataEntity.setYears(dayOfYear);
						yearlyExpenseDataEntity.setMerchantMaster(a.getMerchantMaster());
						yearlyExpenseDataEntity.setTransactionModes(a.getTransactionModes());
					}
					yearlyExpenseDataEntity = this.yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
					// logger.info("yearlyExpenseDataEntity:" + yearlyExpenseDataEntity);
					monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
							.findByLinkedAccountsLinkedAccountIdAndMonthAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
									a.getLinkedAccounts().getLinkedAccountId(), dayOfMonth, dayOfYear,
									a.getTransactionType(), cat.getCategoryId().longValue(), 1,
									a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
									a.getMerchantMaster().getMerchantId(),
									a.getTransactionModes().getTransactionModeId());
					if (monthlyExpenseDataEntity != null) {
						// monthlyExpenseDataEntity.setBalanceAmount(monthlyExpenseDataEntity.getBalanceAmount()
						// + cat.getAmount());
						monthlyExpenseDataEntity.setTransactionAmount(
								monthlyExpenseDataEntity.getTransactionAmount() + cat.getAmount());
						String value = monthlyExpenseDataEntity.getAmountDate();
						value = value.substring(1, value.length() - 1); // remove curly brackets
						String[] keyValuePairs = value.split(","); // split the string to creat key-value pairs
						HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();

						for (String pair : keyValuePairs) // iterate over the pairs
						{
							String[] entry = pair.split("="); // split the pairs to get key and value
							dateAndAmountMap.put(entry[0].trim(), Double.valueOf(entry[1].trim())); // add them to the
																									// hashmap and trim
																									// whitespaces
						}
						if (dateAndAmountMap.containsKey(dateVal)) {
							dateAndAmountMap.put(dateVal, (dateAndAmountMap.get(dateVal) + cat.getAmount()));
						} else {
							dateAndAmountMap.put(dateVal, cat.getAmount());
						}
						if (monthlyExpenseDataEntity.getCount() != null) {
							monthlyExpenseDataEntity.setCount(monthlyExpenseDataEntity.getCount() + 1);
						} else {
							monthlyExpenseDataEntity.setCount(1);
						}
						monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
					} else {
						monthlyExpenseDataEntity = new MonthlyExpenseDataEntity();
						monthlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
						monthlyExpenseDataEntity.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
						monthlyExpenseDataEntity.setBalanceAmount(cat.getAmount());
						monthlyExpenseDataEntity.setCategoryId(cat.getCategoryId().longValue());
						monthlyExpenseDataEntity.setCreatedTimeStamp(new Date());
						monthlyExpenseDataEntity.setCount(1);
						monthlyExpenseDataEntity.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
						monthlyExpenseDataEntity.setLastModifiedTimeStamp(null);
						monthlyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
						monthlyExpenseDataEntity.setModifiedTimeStamp(null);
						monthlyExpenseDataEntity.setTransactionAmount(cat.getAmount());
						monthlyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
						monthlyExpenseDataEntity.setMonth(dayOfMonth);
						monthlyExpenseDataEntity.setYears(dayOfYear);
						monthlyExpenseDataEntity.setMerchantMaster(a.getMerchantMaster());
						monthlyExpenseDataEntity.setTransactionModes(a.getTransactionModes());
						HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();
						dateAndAmountMap.put(dateVal, cat.getAmount());
						monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());

					}

					monthlyExpenseDataEntity = this.monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
					// System.out.println(monthlyExpenseDataEntity.getId());
					// logger.info("monthlyExpenseDataEntity:" + monthlyExpenseDataEntity);
					weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
							.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndTypeOfTransactionAndMonthAndYearsAndWeekAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
									a.getLinkedAccounts().getLinkedAccountId(), cat.getCategoryId().longValue(),
									a.getTransactionType(), dayOfMonth, dayOfYear, dayOfWeek, 1,
									a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
									a.getMerchantMaster().getMerchantId(),
									a.getTransactionModes().getTransactionModeId());
					if (weeklyExpenseDataEntity != null) {
						weeklyExpenseDataEntity
								.setTransactionAmount(weeklyExpenseDataEntity.getTransactionAmount() + cat.getAmount());
					} else {
						weeklyExpenseDataEntity = new WeeklyExpenseDataEntity();
						weeklyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
						weeklyExpenseDataEntity.setBalanceAmount(cat.getAmount().longValue());
						weeklyExpenseDataEntity.setCategoryId(cat.getCategoryId().longValue());
						weeklyExpenseDataEntity.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
						weeklyExpenseDataEntity.setCreatedTimeStamp(new Date());
						weeklyExpenseDataEntity.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
						weeklyExpenseDataEntity.setLastModifiedTimeStamp(null);
						weeklyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
						weeklyExpenseDataEntity.setModifiedTimeStamp(null);
						weeklyExpenseDataEntity.setTransactionAmount(cat.getAmount());
						weeklyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
						weeklyExpenseDataEntity.setMonth(dayOfMonth);
						weeklyExpenseDataEntity.setYears(dayOfYear);
						weeklyExpenseDataEntity.setWeek(dayOfWeek);
						weeklyExpenseDataEntity.setRemarks("RECORD CREATED FROM SPLIT ");
						weeklyExpenseDataEntity.setMerchantMaster(a.getMerchantMaster());
						weeklyExpenseDataEntity.setTransactionModes(a.getTransactionModes());

					}
					weeklyExpenseDataEntity = this.weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
					// logger.info(weeklyExpenseDataEntity);
					// System.out.println(weeklyExpenseDataEntity.getId());
					PopularCategoryDetailsEntity popularCategoryDetailsEntity = popularCategoryDetailsJpaRepository
							.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndType(
									a.getLinkedAccounts().getLinkedAccountId(), cat.getCategoryId().longValue(),
									a.getTransactionType());
					if (popularCategoryDetailsEntity != null) {
						popularCategoryDetailsEntity.setCount(popularCategoryDetailsEntity.getCount() != null
								? popularCategoryDetailsEntity.getCount() + 1
								: 0);
						popularCategoryDetailsEntity.setTimestamp(new Date());
						popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
					} else {
						popularCategoryDetailsEntity = new PopularCategoryDetailsEntity();
						popularCategoryDetailsEntity.setCategoryId(cat.getCategoryId().longValue());
						popularCategoryDetailsEntity.setCount(1);
						popularCategoryDetailsEntity.setLinkedAccounts(a.getLinkedAccounts());
						popularCategoryDetailsEntity.setType(a.getTransactionType());
						popularCategoryDetailsEntity.setTimestamp(new Date());
						popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
					}
					try {
						SendNotification(accountTransactionEntity);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			List<AccountTransactionEntity> accountTransactionNew = new ArrayList<>();
			if (a.getInactivatedId() != null) {
				accountTransactionNew = accountTransactionJpaRepository
						.findByInactivatedIdAndActiveFlag(a.getInactivatedId(), 1);
			} else {
				accountTransactionNew = accountTransactionJpaRepository.findByInactivatedIdAndActiveFlag(a.getId(), 1);
			}

			if (accountTransactionNew.size() > 0) {
				for (AccountTransactionEntity acc : accountTransactionNew) {
					if (acc.getTransactionType().compareTo(Constants.CREDIT) == 0) {
						if (categoryData.compareTo("") != 0) {
							categoryData = categoryData + "," + incomeCategoryJpaRepository
									.findByIncomeCategoryId(acc.getCategoryId()).getIncomeCategoryName() + ":"
									+ acc.getTransactionAmount();
						} else {
							categoryData = categoryData + incomeCategoryJpaRepository
									.findByIncomeCategoryId(acc.getCategoryId()).getIncomeCategoryName() + ":"
									+ acc.getTransactionAmount();
						}
					} else {
						if (categoryData.compareTo("") != 0) {
							categoryData = categoryData + "," + categoriesJpaRepository
									.findByExpenseCategoryId(acc.getCategoryId()).getExpenseCategory() + ":"
									+ acc.getTransactionAmount();
						} else {
							categoryData = categoryData + categoriesJpaRepository
									.findByExpenseCategoryId(acc.getCategoryId()).getExpenseCategory() + ":"
									+ acc.getTransactionAmount();
						}
					}

				}

			}
			String msg = "";
			if (accountTransactionNew.size() == 1) {
				msg = msg + "Un Split";
			} else {
				msg = msg + "Split";
			}
			remarks = remarks + " " + categoryData;
//			System.out.println("^^^^^^^^^^^msg"+msg);
			setDataInAccountTransactionForSplit(msg, deviceImei, requestId, timestamp, channel, deviceMacAddress,
					ipaddress, latitude, longitude, oldData, categoryData, remarks, a);
			List<AccountTransactionEntity> accountTransactionEntity2 = null;
			if (a.getInactivatedId() == null) {
				accountTransactionEntity2 = accountTransactionJpaRepository.findByInactivatedIdAndActiveFlag(a.getId(),
						1);
			} else if (a.getInactivatedId() != null) {
				accountTransactionEntity2 = accountTransactionJpaRepository
						.findByInactivatedIdAndActiveFlag(a.getInactivatedId(), 1);
			}
//			logger.info("Transactions size:"+accountTransactionEntity2.size());
//			logger.info("Transaction id:"+a.getTransactionId());
			PredictionTransactionsEntity predictionTransactinsEntity = predictionTransactionsJpaRepository
					.findByTransactionId(a.getTransactionId());

			if (predictionTransactinsEntity != null) {
				// logger.info("Prediction present");
				int count = 1;
				for (AccountTransactionEntity acc : accountTransactionEntity2) {
					// logger.info(acc.getCategoryId()+" "+acc.getTransactionAmount());
					if (acc.getNotAExpense() == null || acc.getNotAExpense().compareTo("false") == 0) {

						if (count == 1) {
							predictionTransactinsEntity.setSplitCategory(acc.getCategoryId().toString());
							predictionTransactinsEntity.setSplitAmount(acc.getTransactionAmount().toString());
						} else {
							if (predictionTransactinsEntity.getSplitCategory() != null) {
								predictionTransactinsEntity.setSplitCategory(
										predictionTransactinsEntity.getSplitCategory() + "," + acc.getCategoryId());
							}

							if (predictionTransactinsEntity.getSplitAmount() != null) {
								predictionTransactinsEntity.setSplitAmount(predictionTransactinsEntity.getSplitAmount()
										+ "," + acc.getTransactionAmount());
							}
						}

						predictionTransactinsEntity.setCompletedFlag(1);
						predictionTransactinsEntity.setUserInputDate(new Date());
						predictionTransactionsJpaRepository.save(predictionTransactinsEntity);
					}
					count++;
				}

			} else {
				// logger.info("Prediction Not present");
			}

			generalResponse = new ResponseEntity<GeneralResponse>(
					new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED, null, token),
					HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return generalResponse;
	}

//
//	
//
	private void setDataInAccountTransactionForSplit(String msg, String deviceImei, String requestId, String timestamp,
			String channel, String deviceMacAddress, String ipaddress, Double latitude, Double longitude,
			String oldData, String categoryData, String remarks, AccountTransactionEntity oldAccountTransactionRecord) {

//		System.out.println("******************SPLIT********************");

		AccountTransactionHistoryEntity accountTransactionHistoryEntity = new AccountTransactionHistoryEntity();
		accountTransactionHistoryEntity.setActiveFlag(oldAccountTransactionRecord.getActiveFlag());
		accountTransactionHistoryEntity.setCategory(oldAccountTransactionRecord.getCategoryId());
		accountTransactionHistoryEntity
				.setCurrency(oldAccountTransactionRecord.getTransactionCurrencyCodeMaster().getCurrencyName());
		accountTransactionHistoryEntity
				.setLastModifiedTimestamp(accountTransactionHistoryEntity.getLastModifiedTimestamp());
		accountTransactionHistoryEntity
				.setLinkedAccountId(oldAccountTransactionRecord.getLinkedAccounts().getLinkedAccountId());
		if (oldAccountTransactionRecord.getMccCode() != null) {
			accountTransactionHistoryEntity.setMccCode(oldAccountTransactionRecord.getMccCode().getMccCodeId());
		}
		if (oldAccountTransactionRecord.getMerchantMaster() != null) {
			accountTransactionHistoryEntity
					.setParentId(oldAccountTransactionRecord.getMerchantMaster().getMerchantId());
		}
		accountTransactionHistoryEntity.setMode(oldAccountTransactionRecord.getTransactionModes().getModeName());
		accountTransactionHistoryEntity.setNarration(oldAccountTransactionRecord.getNarration());
		accountTransactionHistoryEntity.setTransactionAmount(oldAccountTransactionRecord.getTransactionAmount());
		accountTransactionHistoryEntity.setTransactionId(oldAccountTransactionRecord.getTransactionId());
		accountTransactionHistoryEntity.setTransactionTimestamp(oldAccountTransactionRecord.getTransactionTimestamp());
		accountTransactionHistoryEntity.setType(oldAccountTransactionRecord.getTransactionType());
		accountTransactionHistoryEntity.setSourceCurrency(oldAccountTransactionRecord.getSourceCurrency());
		accountTransactionHistoryEntity.setDestinationCurrency(oldAccountTransactionRecord.getDestinationCurrency());
		accountTransactionHistoryEntity
				.setBaseCurrency(oldAccountTransactionRecord.getBaseCurrencyCodeMaster().getCurrencyCode().toString());
		accountTransactionHistoryEntity.setRemarks(oldAccountTransactionRecord.getRemarks());
		accountTransactionHistoryEntity.setLatitude(oldAccountTransactionRecord.getLatitude());
		accountTransactionHistoryEntity.setLongitude(oldAccountTransactionRecord.getLongitude());
		accountTransactionHistoryEntity.setMapDescription(oldAccountTransactionRecord.getMapDescription());
		accountTransactionHistoryEntity.setAttachmentList(oldAccountTransactionRecord.getAttachmentList());
		accountTransactionHistoryEntity.setDeviceImei(deviceImei);
		accountTransactionHistoryEntity.setRequestId(requestId);
		accountTransactionHistoryEntity.setChannel(channel);
		accountTransactionHistoryEntity.setDeviceMacAddress(deviceMacAddress);
		accountTransactionHistoryEntity.setIpAddress(ipaddress);
		accountTransactionHistoryEntity.setTimestamp(new Date());
		accountTransactionHistoryEntity.setLatitude(oldAccountTransactionRecord.getLatitude());
		accountTransactionHistoryEntity.setLongitude(oldAccountTransactionRecord.getLongitude());
		accountTransactionHistoryEntity.setDeviceLatitude(latitude);
		accountTransactionHistoryEntity.setDeviceLongitude(longitude);
		accountTransactionHistoryEntity
				.setCustomerId(oldAccountTransactionRecord.getLinkedAccounts().getLinkedAccountId());

		accountTransactionHistoryEntity.setAccountTransactionRemarks(remarks);
		accountTransactionHistoryEntity.setOldData(oldData);
		accountTransactionHistoryEntity.setNewData(categoryData);

		accountTransactionHistoryEntity.setOperation(msg);
		if (msg.compareTo("Split") == 0) {
			accountTransactionHistoryEntity.setAction("ADD");
		} else {
			accountTransactionHistoryEntity.setAction("EDIT");
		}

		accountTransactionHistoryJpaRepository.save(accountTransactionHistoryEntity);

	}

	private ResponseEntity<GeneralResponse> setDataForParentTransaction(AccountTransactionEntity a,
			SplitTransactionRequestModel dataModel, String deviceImei, String requestId, String timestamp,
			String channel, String deviceMacAddress, String ipaddress, Double latitude, Double longitude,
			String token) {

		// logger.info("PARENT TRANSACTION SECOND");

		System.out.println("PARENT TRANSACTION SECOND");
		ResponseEntity<GeneralResponse> generalResponse = null;
		YearlyExpenseDataEntity yearlyExpenseDataEntity = null;
		MonthlyExpenseDataEntity monthlyExpenseDataEntity = null;
		WeeklyExpenseDataEntity weeklyExpenseDataEntity = null;
		AccountTransactionEntity accountTransactionEntity = null;
		HashMap<String, CategoryRequestModel> transactionIdMap = new HashMap<String, CategoryRequestModel>();
		for (CategoryRequestModel cat : dataModel.getCategoryList()) {
			if (cat.getTransactionId() != null) {
				transactionIdMap.put(cat.getTransactionId(), cat);
			}
		}
//		logger.info("Map:"+transactionIdMap);
//		logger.info("PARENT ID:"+dataModel.getParentId());
		String remarks = "";
		String oldData = "";
		String newData = "";
		try {
			Calendar cal = Calendar.getInstance();
			cal.setTime(a.getTransactionTimestamp());
			int dayOfWeek = cal.get(Calendar.WEEK_OF_YEAR); // 6
			int dayOfMonth = cal.get(Calendar.MONTH) + 1; // 17
			int dayOfYear = cal.get(Calendar.YEAR); // 169
			int dayOfWeekMonth = cal.get(Calendar.WEEK_OF_MONTH); // 169
			String dateVal = dateFormatter.format(a.getTransactionTimestamp());
			if (dataModel.getParentId() != null) {
				AccountTransactionEntity parentAccountTransactionEntity = accountTransactionJpaRepository
						.findByAccountTransactionId(dataModel.getParentId());

				List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository
						.findByInactivatedIdAndActiveFlag(dataModel.getParentId(), 1);
				// System.out.println("accountTransactionEntities
				// size"+accountTransactionEntities.size());
				if (accountTransactionEntities.size() > 1) {
					for (AccountTransactionEntity acc : accountTransactionEntities) {
						if (acc.getTransactionType().compareTo(Constants.CREDIT) == 0) {
							if (remarks.compareTo("") != 0) {
								remarks = remarks + "," + incomeCategoryJpaRepository
										.findByIncomeCategoryId(acc.getCategoryId()).getIncomeCategoryName() + ":"
										+ acc.getTransactionAmount();
							} else {
								remarks = remarks + incomeCategoryJpaRepository
										.findByIncomeCategoryId(acc.getCategoryId()).getIncomeCategoryName() + ":"
										+ acc.getTransactionAmount();
							}
						} else {
							if (remarks.compareTo("") != 0) {
								remarks = remarks + "," + categoriesJpaRepository
										.findByExpenseCategoryId(acc.getCategoryId()).getExpenseCategory() + ":"
										+ acc.getTransactionAmount();
							} else {
								remarks = remarks + categoriesJpaRepository.findByExpenseCategoryId(acc.getCategoryId())
										.getExpenseCategory() + ":" + acc.getTransactionAmount();
							}
						}

						// logger.info(acc.getTransactionAmount()+"-----"+acc.getTransactionId());
						if (transactionIdMap.containsKey(acc.getTransactionId())) {
							if (transactionIdMap.get(acc.getTransactionId()).getNotAExpense() != null
									&& transactionIdMap.get(acc.getTransactionId()).getNotAExpense()
											.compareTo("true") == 0) {
//								logger.info("NOT A EXPENSE/INCOME PRESENT");
//								logger.info("Transaction Id:"+acc.getTransactionId());
								if (transactionIdMap.get(acc.getTransactionId()).getChangedFlag() == 1) {
									// logger.info("NOT A EXPENSE/INCOME CHANGED");
									yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
											.findByLinkedAccountsLinkedAccountIdAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
													a.getLinkedAccounts().getLinkedAccountId(), dayOfYear,
													a.getTransactionType(),
													transactionIdMap.get(acc.getTransactionId()).getCategoryId()
															.longValue(),
													1, a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
													a.getMerchantMaster() != null
															? a.getMerchantMaster().getMerchantId()
															: null,
													a.getTransactionModes().getTransactionModeId());
									if (yearlyExpenseDataEntity != null) {
										// logger.info(yearlyExpenseDataEntity);
										yearlyExpenseDataEntity
												.setTransactionAmount(yearlyExpenseDataEntity.getTransactionAmount()
														+ transactionIdMap.get(acc.getTransactionId()).getAmount());
										yearlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
										yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
										// logger.info(yearlyExpenseDataEntity);
									} else {

										yearlyExpenseDataEntity = new YearlyExpenseDataEntity();
										yearlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
										yearlyExpenseDataEntity.setCategoryId(transactionIdMap
												.get(acc.getTransactionId()).getCategoryId().longValue());
										yearlyExpenseDataEntity.setCreatedTimeStamp(new Date());
										yearlyExpenseDataEntity
												.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
										yearlyExpenseDataEntity.setLastModifiedTimeStamp(null);
										yearlyExpenseDataEntity.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
										yearlyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
										yearlyExpenseDataEntity.setModifiedTimeStamp(null);
										yearlyExpenseDataEntity.setTransactionAmount(
												transactionIdMap.get(acc.getTransactionId()).getAmount());
										yearlyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
										yearlyExpenseDataEntity.setYears(dayOfYear);
										yearlyExpenseDataEntity.setMerchantMaster(a.getMerchantMaster());
										yearlyExpenseDataEntity.setTransactionModes(a.getTransactionModes());
										yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);

									}
									HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();
									monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
											.findByLinkedAccountsLinkedAccountIdAndMonthAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
													a.getLinkedAccounts().getLinkedAccountId(), dayOfMonth, dayOfYear,
													a.getTransactionType(),
													transactionIdMap.get(acc.getTransactionId()).getCategoryId()
															.longValue(),
													1, a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
													a.getMerchantMaster() != null
															? a.getMerchantMaster().getMerchantId()
															: null,
													a.getTransactionModes().getTransactionModeId());
									if (monthlyExpenseDataEntity != null) {
										// logger.info(monthlyExpenseDataEntity);
										monthlyExpenseDataEntity
												.setTransactionAmount(monthlyExpenseDataEntity.getTransactionAmount()
														+ transactionIdMap.get(acc.getTransactionId()).getAmount());
										dateAndAmountMap = new HashMap<String, Double>();
										monthlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
										String value = monthlyExpenseDataEntity.getAmountDate();
										value = value.substring(1, value.length() - 1); // remove curly brackets
										String[] keyValuePairs = value.split(","); // split the string to creat
																					// key-value pairs

										for (String pair : keyValuePairs) // iterate over the pairs
										{
											String[] entry = pair.split("="); // split the pairs to get key and value
											dateAndAmountMap.put(entry[0].trim(), Double.valueOf(entry[1].trim())); // add
																													// them
																													// to
																													// the
																													// hashmap
																													// and
																													// trim
																													// whitespaces
										}
										if (dateAndAmountMap.containsKey(dateVal)) {
											dateAndAmountMap.put(dateVal, (dateAndAmountMap.get(dateVal)
													+ transactionIdMap.get(acc.getTransactionId()).getAmount()));
										} else {
											dateAndAmountMap.put(dateVal,
													transactionIdMap.get(acc.getTransactionId()).getAmount());
										}
										monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
										if (monthlyExpenseDataEntity.getCount() != null) {
											monthlyExpenseDataEntity.setCount(monthlyExpenseDataEntity.getCount() + 1);
										} else {
											monthlyExpenseDataEntity.setCount(1);
										}

										monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
										// logger.info(monthlyExpenseDataEntity);
									} else {
										monthlyExpenseDataEntity = new MonthlyExpenseDataEntity();
										monthlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
										monthlyExpenseDataEntity.setCategoryId(transactionIdMap
												.get(acc.getTransactionId()).getCategoryId().longValue());
										monthlyExpenseDataEntity.setCreatedTimeStamp(new Date());
										monthlyExpenseDataEntity
												.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
										monthlyExpenseDataEntity
												.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
										monthlyExpenseDataEntity.setLastModifiedTimeStamp(null);
										monthlyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
										monthlyExpenseDataEntity.setModifiedTimeStamp(null);
										monthlyExpenseDataEntity.setTransactionAmount(
												transactionIdMap.get(acc.getTransactionId()).getAmount());
										monthlyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
										monthlyExpenseDataEntity.setMonth(dayOfMonth);
										monthlyExpenseDataEntity.setYears(dayOfYear);
										monthlyExpenseDataEntity.setMerchantMaster(a.getMerchantMaster());
										monthlyExpenseDataEntity.setTransactionModes(a.getTransactionModes());
										monthlyExpenseDataEntity.setCount(1);
										dateAndAmountMap = new HashMap<String, Double>();
										dateAndAmountMap.put(dateVal,
												transactionIdMap.get(acc.getTransactionId()).getAmount());
										monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
										monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);

									}
									weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
											.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndTypeOfTransactionAndMonthAndYearsAndWeekAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
													a.getLinkedAccounts().getLinkedAccountId(),
													transactionIdMap.get(acc.getTransactionId()).getCategoryId()
															.longValue(),
													a.getTransactionType(), dayOfMonth, dayOfYear, dayOfWeek, 1,
													a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
													a.getMerchantMaster().getMerchantId(),
													a.getTransactionModes().getTransactionModeId());
									if (weeklyExpenseDataEntity != null) {
										// logger.info(weeklyExpenseDataEntity);
										weeklyExpenseDataEntity
												.setTransactionAmount(weeklyExpenseDataEntity.getTransactionAmount()
														+ transactionIdMap.get(acc.getTransactionId()).getAmount());
										weeklyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
										weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
										// logger.info(weeklyExpenseDataEntity);
									} else {

										weeklyExpenseDataEntity = new WeeklyExpenseDataEntity();
										weeklyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
										weeklyExpenseDataEntity.setCategoryId(transactionIdMap
												.get(acc.getTransactionId()).getCategoryId().longValue());
										weeklyExpenseDataEntity.setCreatedTimeStamp(new Date());
										weeklyExpenseDataEntity.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
										weeklyExpenseDataEntity
												.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
										weeklyExpenseDataEntity.setLastModifiedTimeStamp(null);
										weeklyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
										weeklyExpenseDataEntity.setModifiedTimeStamp(null);
										weeklyExpenseDataEntity.setTransactionAmount(
												transactionIdMap.get(acc.getTransactionId()).getAmount());
										weeklyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
										weeklyExpenseDataEntity.setMonth(dayOfMonth);
										weeklyExpenseDataEntity.setYears(dayOfYear);
										weeklyExpenseDataEntity.setWeek(dayOfWeek);
										weeklyExpenseDataEntity.setWeek(dayOfWeekMonth);
										weeklyExpenseDataEntity.setRemarks("RECORD CREATED FROM SPLIT ");
										weeklyExpenseDataEntity.setMerchantMaster(a.getMerchantMaster());
										weeklyExpenseDataEntity.setTransactionModes(a.getTransactionModes());
										weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);

									}
//									setDataInAccountTransactionData(acc, "NOT AN EXPENSE/INCOME");

									acc.setNotAExpense("false");
									acc.setCategoryId(
											transactionIdMap.get(acc.getTransactionId()).getCategoryId().longValue());
									acc.setTransactionAmount(transactionIdMap.get(acc.getTransactionId()).getAmount());
									acc.setDeviceImei(deviceImei);
									acc.setRequestId(requestId);
									// acc.setIpAddress(ipaddress);
									acc.setDeviceMacAddress(deviceMacAddress);
									acc.setChannel(channel);
									acc.setDeviceLatitude(latitude);
									acc.setDeviceLongitude(longitude);
									accountTransactionJpaRepository.save(acc);
									cal.setTime(acc.getTransactionTimestamp());
//									cal.add(Calendar.DATE, 1);
									cal.set(Calendar.HOUR_OF_DAY, 0);
									cal.set(Calendar.MINUTE, 0);
									cal.set(Calendar.SECOND, 0);
//									System.out.println(cal.getTime());

									EuroHistDataEntity euroHistDataEntity = euroHistoryDataService
											.getEuroHistoryDate(cal.getTime());
									if (euroHistDataEntity != null) {
										SetDataInAccountTransaction(euroHistDataEntity, acc);
									}
//									else
//									{
//									     System.out.println("NO");
//										 System.out.println("Before Date : "+ cal.getTime());
//									     euroHistDataEntity = euroHistDataJpaRepository.findTopByDateBeforeOrderByDateDesc(cal.getTime());
//									     if(euroHistDataEntity!=null)
//									     {
//									    	 System.out.println("After Date : "+euroHistDataEntity.getDate());
//									    	 SetDataInAccountTransaction(euroHistDataEntity,acc);
//									    	 
//									     }
//									     else
//									     {
//									    	 System.out.println("*******");
//									    	 euroHistDataEntity = euroHistDataJpaRepository.findTopByDateAfterOrderByDateAsc(cal.getTime());
//										     if(euroHistDataEntity!=null)
//										     {
//										    	 System.out.println("After Date : "+euroHistDataEntity.getDate());
//										     } 
//										     SetDataInAccountTransaction(euroHistDataEntity,acc);
//									     }
//									}
									UnsplitAccountTransactionEntity unsplitAccountTransactionEntity = unsplitAccountTransactionJpaRepository
											.findByTransactionId(acc.getTransactionId());
									if (unsplitAccountTransactionEntity != null) {
										unsplitAccountTransactionEntity = unsplitAccountTransactionJpaRepository
												.findByTransactionId(
														unsplitAccountTransactionEntity.getTransactionId());
										unsplitAccountTransactionJpaRepository.delete(unsplitAccountTransactionEntity);
									}
									try {
										SendNotification(accountTransactionEntity);
									} catch (Exception e) {
										e.printStackTrace();
									}
									// logger.info("$$$$$$$$$$$NOT A EXPENSE/INCOME Transaction:"+acc);
								}
							} else {
								// logger.info("TRANSACTION ID PRESENT");
								if (Double.compare(acc.getTransactionAmount(),
										transactionIdMap.get(acc.getTransactionId()).getAmount()) != 0
										|| acc.getCategoryId() != transactionIdMap.get(acc.getTransactionId())
												.getCategoryId().longValue()) {
//									logger.info("Map Transaction id and amount::::"+transactionIdMap.get(acc.getTransactionId()).getTransactionId()+" "+transactionIdMap.get(acc.getTransactionId()).getCategoryId()+"  "+transactionIdMap.get(acc.getTransactionId()).getAmount());
//								//	logger.info("Old:"+acc.getTransactionId()+" "+acc.getCategory()+" "+acc.getTransactionAmount());
//									logger.info("Amount OR Category DOESNOT MATCH");
									yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
											.findByLinkedAccountsLinkedAccountIdAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
													a.getLinkedAccounts().getLinkedAccountId(), dayOfYear,
													a.getTransactionType(), acc.getCategoryId(), 1,
													a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
													a.getMerchantMaster() != null
															? a.getMerchantMaster().getMerchantId()
															: null,
													a.getTransactionModes().getTransactionModeId());

									if (yearlyExpenseDataEntity != null) {
										// logger.info("INITIAL:"+yearlyExpenseDataEntity.getTransactionAmount()+"
										// "+acc.getTransactionAmount());
										yearlyExpenseDataEntity
												.setTransactionAmount(yearlyExpenseDataEntity.getTransactionAmount()
														- acc.getTransactionAmount());
										yearlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
										yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
										// logger.info(yearlyExpenseDataEntity);
									}
									HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();
									monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
											.findByLinkedAccountsLinkedAccountIdAndMonthAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
													acc.getLinkedAccounts().getLinkedAccountId(), dayOfMonth, dayOfYear,
													acc.getTransactionType(), acc.getCategoryId(), 1,
													a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
													a.getMerchantMaster() != null
															? a.getMerchantMaster().getMerchantId()
															: null,
													a.getTransactionModes().getTransactionModeId());
									if (monthlyExpenseDataEntity != null) {
										// logger.info("INITIAL:"+monthlyExpenseDataEntity.getTransactionAmount()+"
										// "+acc.getTransactionAmount());
										monthlyExpenseDataEntity
												.setTransactionAmount(monthlyExpenseDataEntity.getTransactionAmount()
														- acc.getTransactionAmount());
										monthlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
										String value = monthlyExpenseDataEntity.getAmountDate();
										value = value.substring(1, value.length() - 1); // remove curly brackets
										String[] keyValuePairs = value.split(","); // split the string to creat
																					// key-value pairs
										dateAndAmountMap = new HashMap<String, Double>();

										for (String pair : keyValuePairs) // iterate over the pairs
										{
											String[] entry = pair.split("="); // split the pairs to get key and value
											dateAndAmountMap.put(entry[0].trim(), Double.valueOf(entry[1].trim())); // add
																													// them
																													// to
																													// the
																													// hashmap
																													// and
																													// trim
																													// whitespaces
										}
										if (dateAndAmountMap.containsKey(dateVal)) {
											dateAndAmountMap.put(dateVal,
													(dateAndAmountMap.get(dateVal) - acc.getTransactionAmount()));
										}
										monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
										monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
										// logger.info(monthlyExpenseDataEntity);
									}
									weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
											.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndTypeOfTransactionAndMonthAndYearsAndWeekAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
													acc.getLinkedAccounts().getLinkedAccountId(), acc.getCategoryId(),
													acc.getTransactionType(), dayOfMonth, dayOfYear, dayOfWeek, 1,
													a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
													a.getMerchantMaster() != null
															? a.getMerchantMaster().getMerchantId()
															: null,
													a.getTransactionModes().getTransactionModeId());
									if (weeklyExpenseDataEntity != null) {
										// logger.info("INITIAL:"+weeklyExpenseDataEntity.getTransactionAmount()+"
										// "+acc.getTransactionAmount());
										weeklyExpenseDataEntity
												.setTransactionAmount(weeklyExpenseDataEntity.getTransactionAmount()
														- acc.getTransactionAmount());
										weeklyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
										weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
										// logger.info(weeklyExpenseDataEntity);
									}

									yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
											.findByLinkedAccountsLinkedAccountIdAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
													a.getLinkedAccounts().getLinkedAccountId(), dayOfYear,
													a.getTransactionType(),
													transactionIdMap.get(acc.getTransactionId()).getCategoryId()
															.longValue(),
													1, a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
													acc.getMerchantMaster() != null
															? acc.getMerchantMaster().getMerchantId()
															: null,
													acc.getTransactionModes().getTransactionModeId());
									if (yearlyExpenseDataEntity != null) {
										// logger.info("Yearly
										// Before::"+yearlyExpenseDataEntity.getTransactionAmount()+"
										// "+transactionIdMap.get(acc.getTransactionId()).getAmount());
										yearlyExpenseDataEntity.setTransactionAmount(
												yearlyExpenseDataEntity.getTransactionAmount() != 0
														? yearlyExpenseDataEntity.getTransactionAmount()
																+ transactionIdMap.get(acc.getTransactionId())
																		.getAmount()
														: transactionIdMap.get(acc.getTransactionId()).getAmount());
										yearlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
										yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
										// logger.info("Yearly After:"+yearlyExpenseDataEntity.getTransactionAmount()+"
										// "+transactionIdMap.get(acc.getTransactionId()).getAmount());
									} else {
										yearlyExpenseDataEntity = new YearlyExpenseDataEntity();
										yearlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
										yearlyExpenseDataEntity.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
										yearlyExpenseDataEntity.setCategoryId(transactionIdMap
												.get(acc.getTransactionId()).getCategoryId().longValue());
										yearlyExpenseDataEntity.setCreatedTimeStamp(new Date());
										yearlyExpenseDataEntity
												.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
										yearlyExpenseDataEntity.setLastModifiedTimeStamp(null);
										yearlyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
										yearlyExpenseDataEntity.setModifiedTimeStamp(null);
										yearlyExpenseDataEntity.setTransactionAmount(
												transactionIdMap.get(acc.getTransactionId()).getAmount());
										yearlyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
										yearlyExpenseDataEntity.setYears(dayOfYear);
										yearlyExpenseDataEntity.setMerchantMaster(acc.getMerchantMaster());
										yearlyExpenseDataEntity.setTransactionModes(acc.getTransactionModes());
										yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
										// logger.info("Yearly After::"+yearlyExpenseDataEntity.getTransactionAmount()+"
										// "+transactionIdMap.get(acc.getTransactionId()).getAmount());
									}
									monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
											.findByLinkedAccountsLinkedAccountIdAndMonthAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
													a.getLinkedAccounts().getLinkedAccountId(), dayOfMonth, dayOfYear,
													a.getTransactionType(),
													transactionIdMap.get(acc.getTransactionId()).getCategoryId()
															.longValue(),
													1, a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
													acc.getMerchantMaster() != null
															? acc.getMerchantMaster().getMerchantId()
															: null,
													acc.getTransactionModes().getTransactionModeId());
									if (monthlyExpenseDataEntity != null) {
										// logger.info("Monthly
										// Before::"+yearlyExpenseDataEntity.getTransactionAmount()+"
										// "+transactionIdMap.get(acc.getTransactionId()).getAmount());
										monthlyExpenseDataEntity.setTransactionAmount(
												monthlyExpenseDataEntity.getTransactionAmount() != 0
														? monthlyExpenseDataEntity.getTransactionAmount()
																+ transactionIdMap.get(acc.getTransactionId())
																		.getAmount()
														: transactionIdMap.get(acc.getTransactionId()).getAmount());
										monthlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());

										String value = monthlyExpenseDataEntity.getAmountDate();
										value = value.substring(1, value.length() - 1); // remove curly brackets
										String[] keyValuePairs = value.split(","); // split the string to creat
																					// key-value pairs
										dateAndAmountMap = new HashMap<String, Double>();

										for (String pair : keyValuePairs) // iterate over the pairs
										{
											String[] entry = pair.split("="); // split the pairs to get key and value
											dateAndAmountMap.put(entry[0].trim(), Double.valueOf(entry[1].trim())); // add
																													// them
																													// to
																													// the
																													// hashmap
																													// and
																													// trim
																													// whitespaces
										}
										if (dateAndAmountMap.containsKey(dateVal)) {
											dateAndAmountMap.put(dateVal, (dateAndAmountMap.get(dateVal)
													+ transactionIdMap.get(acc.getTransactionId()).getAmount()));
										} else {
											dateAndAmountMap.put(dateVal,
													transactionIdMap.get(acc.getTransactionId()).getAmount());
										}
										monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());

										if (monthlyExpenseDataEntity.getCount() != null) {
											monthlyExpenseDataEntity.setCount(monthlyExpenseDataEntity.getCount() + 1);
										} else {
											monthlyExpenseDataEntity.setCount(1);
										}
										monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
//										logger.info("Monthly after:::"+yearlyExpenseDataEntity.getTransactionAmount()+"  "+transactionIdMap.get(acc.getTransactionId()).getAmount());
									} else {

										monthlyExpenseDataEntity = new MonthlyExpenseDataEntity();
										monthlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
										monthlyExpenseDataEntity
												.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
										monthlyExpenseDataEntity.setCategoryId(transactionIdMap
												.get(acc.getTransactionId()).getCategoryId().longValue());
										monthlyExpenseDataEntity.setCreatedTimeStamp(new Date());
										monthlyExpenseDataEntity
												.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
										monthlyExpenseDataEntity.setLastModifiedTimeStamp(null);
										monthlyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
										monthlyExpenseDataEntity.setModifiedTimeStamp(null);
										monthlyExpenseDataEntity.setTransactionAmount(
												transactionIdMap.get(acc.getTransactionId()).getAmount());
										monthlyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
										monthlyExpenseDataEntity.setMonth(dayOfMonth);
										monthlyExpenseDataEntity.setYears(dayOfYear);
										monthlyExpenseDataEntity.setMerchantMaster(acc.getMerchantMaster());
										monthlyExpenseDataEntity.setTransactionModes(acc.getTransactionModes());
										monthlyExpenseDataEntity.setCount(1);
										dateAndAmountMap = new HashMap<String, Double>();
										dateAndAmountMap.put(dateVal,
												transactionIdMap.get(acc.getTransactionId()).getAmount());
										monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
										monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
										// logger.info("Monthly
										// after::"+yearlyExpenseDataEntity.getTransactionAmount()+"
										// "+transactionIdMap.get(acc.getTransactionId()).getAmount());
									}
									weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
											.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndTypeOfTransactionAndMonthAndYearsAndWeekAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
													a.getLinkedAccounts().getLinkedAccountId(),
													transactionIdMap.get(acc.getTransactionId()).getCategoryId()
															.longValue(),
													a.getTransactionType(), dayOfMonth, dayOfYear, dayOfWeek, 1,
													a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
													acc.getMerchantMaster() != null
															? acc.getMerchantMaster().getMerchantId()
															: null,
													acc.getTransactionModes().getTransactionModeId());
									if (weeklyExpenseDataEntity != null) {
										// logger.info("Weekly
										// Before::"+yearlyExpenseDataEntity.getTransactionAmount()+"
										// "+transactionIdMap.get(acc.getTransactionId()).getAmount());
										weeklyExpenseDataEntity.setTransactionAmount(
												weeklyExpenseDataEntity.getTransactionAmount() != 0
														? weeklyExpenseDataEntity.getTransactionAmount()
																+ transactionIdMap.get(acc.getTransactionId())
																		.getAmount()
														: transactionIdMap.get(acc.getTransactionId()).getAmount());
										weeklyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
										weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
										// logger.info("Weekly after::"+yearlyExpenseDataEntity.getTransactionAmount()+"
										// "+transactionIdMap.get(acc.getTransactionId()).getAmount());
									} else {

										weeklyExpenseDataEntity = new WeeklyExpenseDataEntity();
										weeklyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
										weeklyExpenseDataEntity.setCategoryId(transactionIdMap
												.get(acc.getTransactionId()).getCategoryId().longValue());
										weeklyExpenseDataEntity.setCreatedTimeStamp(new Date());
										weeklyExpenseDataEntity.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
										weeklyExpenseDataEntity
												.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
										weeklyExpenseDataEntity.setLastModifiedTimeStamp(null);
										weeklyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
										weeklyExpenseDataEntity.setModifiedTimeStamp(null);
										weeklyExpenseDataEntity.setTransactionAmount(
												transactionIdMap.get(acc.getTransactionId()).getAmount());
										weeklyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
										weeklyExpenseDataEntity.setMonth(dayOfMonth);
										weeklyExpenseDataEntity.setYears(dayOfYear);
										weeklyExpenseDataEntity.setWeek(dayOfWeek);
										weeklyExpenseDataEntity.setWeekOfMonth(dayOfWeekMonth);
										weeklyExpenseDataEntity.setRemarks("RECORD CREATED FROM SPLIT ");
										weeklyExpenseDataEntity.setMerchantMaster(acc.getMerchantMaster());
										weeklyExpenseDataEntity.setTransactionModes(acc.getTransactionModes());
										weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
										// logger.info("Weekly after:"+yearlyExpenseDataEntity.getTransactionAmount()+"
										// "+transactionIdMap.get(acc.getTransactionId()).getAmount());
									}
//									setDataInAccountTransactionData(acc, "SPLIT");
									acc.setDeviceImei(deviceImei);
									acc.setRequestId(requestId);
									// acc.setIpAddress(ipaddress);
									acc.setDeviceMacAddress(deviceMacAddress);
									acc.setChannel(channel);
									acc.setDeviceLatitude(latitude);
									acc.setDeviceLongitude(longitude);
									acc.setCategoryId(
											transactionIdMap.get(acc.getTransactionId()).getCategoryId().longValue());
									acc.setTransactionAmount(transactionIdMap.get(acc.getTransactionId()).getAmount());
									acc.setLastModifiedTimestamp(new Date());
									accountTransactionJpaRepository.save(acc);
									try {
										SendNotification(accountTransactionEntity);
									} catch (Exception e) {
										e.printStackTrace();
									}
									cal.setTime(acc.getTransactionTimestamp());
//									cal.add(Calendar.DATE, 1);
									cal.set(Calendar.HOUR_OF_DAY, 0);
									cal.set(Calendar.MINUTE, 0);
									cal.set(Calendar.SECOND, 0);
//									System.out.println(cal.getTime());

									EuroHistDataEntity euroHistDataEntity = euroHistoryDataService
											.getEuroHistoryDate(cal.getTime());
									if (euroHistDataEntity != null) {
										SetDataInAccountTransaction(euroHistDataEntity, acc);
									}
//									else
//									{
//									     System.out.println("NO");
//										 System.out.println("Before Date : "+ cal.getTime());
//									     euroHistDataEntity = euroHistDataJpaRepository.findTopByDateBeforeOrderByDateDesc(cal.getTime());
//									     if(euroHistDataEntity!=null)
//									     {
//									    	 System.out.println("After Date : "+euroHistDataEntity.getDate());
//									    	 SetDataInAccountTransaction(euroHistDataEntity,acc);
//									    	 
//									     }
//									     else
//									     {
//									    	 System.out.println("*******");
//									    	 euroHistDataEntity = euroHistDataJpaRepository.findTopByDateAfterOrderByDateAsc(cal.getTime());
//										     if(euroHistDataEntity!=null)
//										     {
//										    	 System.out.println("After Date : "+euroHistDataEntity.getDate());
//										     } 
//										     SetDataInAccountTransaction(euroHistDataEntity,acc);
//									     }
//									}
									// System.out.println("ACC:::::"+acc.getId()+"---"+acc.getCategory()+"----"+transactionIdMap.get(acc.getTransactionId()).getCategoryId());

								}
							}
						} else {
							// logger.info("TRANSACTION ID NOT PRESENT");
							acc.setActiveFlag(0);
							acc.setLastModifiedTimestamp(new Date());
							accountTransactionJpaRepository.save(acc);

							yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
									.findByLinkedAccountsLinkedAccountIdAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
											a.getLinkedAccounts().getLinkedAccountId(), dayOfYear,
											a.getTransactionType(), acc.getCategoryId(), 1,
											a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
											acc.getMerchantMaster() != null ? acc.getMerchantMaster().getMerchantId()
													: null,
											acc.getTransactionModes().getTransactionModeId());

							if (yearlyExpenseDataEntity != null) {
								yearlyExpenseDataEntity.setTransactionAmount(
										yearlyExpenseDataEntity.getTransactionAmount() - acc.getTransactionAmount());
								yearlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
								yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
							}
							monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
									.findByLinkedAccountsLinkedAccountIdAndMonthAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
											acc.getLinkedAccounts().getLinkedAccountId(), dayOfMonth, dayOfYear,
											acc.getTransactionType(), acc.getCategoryId(), 1,
											a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
											acc.getMerchantMaster() != null ? acc.getMerchantMaster().getMerchantId()
													: null,
											acc.getTransactionModes().getTransactionModeId());
							HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();
							if (monthlyExpenseDataEntity != null) {
								monthlyExpenseDataEntity.setTransactionAmount(
										monthlyExpenseDataEntity.getTransactionAmount() - acc.getTransactionAmount());
								String value = monthlyExpenseDataEntity.getAmountDate();
								value = value.substring(1, value.length() - 1); // remove curly brackets
								String[] keyValuePairs = value.split(","); // split the string to creat key-value pairs
								dateAndAmountMap = new HashMap<String, Double>();

								for (String pair : keyValuePairs) // iterate over the pairs
								{
									String[] entry = pair.split("="); // split the pairs to get key and value
									dateAndAmountMap.put(entry[0].trim(), Double.valueOf(entry[1].trim())); // add them
																											// to the
																											// hashmap
																											// and trim
																											// whitespaces
								}
								if (dateAndAmountMap.containsKey(dateVal)) {
									dateAndAmountMap.put(dateVal,
											(dateAndAmountMap.get(dateVal) - acc.getTransactionAmount()));
								}
								monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
								if (monthlyExpenseDataEntity.getCount() != null) {
									monthlyExpenseDataEntity.setCount(monthlyExpenseDataEntity.getCount() - 1);
								}

								monthlyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
								monthlyExpenseDataJpaRepository.save(monthlyExpenseDataEntity);
							}
							weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
									.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndTypeOfTransactionAndMonthAndYearsAndWeekAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
											acc.getLinkedAccounts().getLinkedAccountId(), acc.getCategoryId(),
											acc.getTransactionType(), dayOfMonth, dayOfYear, dayOfWeek, 1,
											a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
											acc.getMerchantMaster() != null ? acc.getMerchantMaster().getMerchantId()
													: null,
											acc.getTransactionModes().getTransactionModeId());
							if (weeklyExpenseDataEntity != null) {
								weeklyExpenseDataEntity.setTransactionAmount(
										weeklyExpenseDataEntity.getTransactionAmount() - acc.getTransactionAmount());
								weeklyExpenseDataEntity.setLastModifiedTimeStamp(new Date());
								weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
							}
						}
					}

					for (CategoryRequestModel cat : dataModel.getCategoryList()) {
						if (cat.getTransactionId() == null && cat.getAmount() > 0) {
							accountTransactionEntity = new AccountTransactionEntity();
							accountTransactionEntity.setActiveFlag(1);
							accountTransactionEntity.setCategoryId(cat.getCategoryId().longValue());
							accountTransactionEntity
									.setTransactionCurrencyCodeMaster(a.getTransactionCurrencyCodeMaster());
							accountTransactionEntity.setLastModifiedTimestamp(new Date());
							accountTransactionEntity.setLinkedAccounts(a.getLinkedAccounts());
							accountTransactionEntity.setMccCode(a.getMccCode());
							accountTransactionEntity.setMerchantMaster(a.getMerchantMaster());
							accountTransactionEntity.setTransactionModes(a.getTransactionModes());
							accountTransactionEntity.setNarration(a.getNarration());
							accountTransactionEntity.setTransactionAmount(cat.getAmount());
							accountTransactionEntity.setBaseCurrencyCodeMaster(a.getBaseCurrencyCodeMaster());
							accountTransactionEntity.setMapDescription(a.getMapDescription());
							accountTransactionEntity.setTransactionTimestamp(a.getTransactionTimestamp());
							accountTransactionEntity.setFiDetails(a.getFiDetails());
							accountTransactionEntity.setTransactionType(a.getTransactionType());
							accountTransactionEntity.setRemarks("RECORD CREATED FROM SPLIT ");
							if (a.getInactivatedId() != null) {
								accountTransactionEntity.setInactivatedId(a.getInactivatedId());
							} else {
								accountTransactionEntity.setInactivatedId(a.getId());
							}
							accountTransactionEntity.setLatitude(a.getLatitude());
							accountTransactionEntity.setLongitude(a.getLongitude());
							accountTransactionEntity.setAttachmentList(a.getAttachmentList());
							accountTransactionEntity.setDeviceImei(deviceImei);
							accountTransactionEntity.setRequestId(requestId);
							// accountTransactionEntity.setIpAddress(ipaddress);
							accountTransactionEntity.setDeviceMacAddress(deviceMacAddress);
							accountTransactionEntity.setChannel(channel);
							accountTransactionEntity.setDeviceLatitude(latitude);
							accountTransactionEntity.setDeviceLongitude(longitude);
							accountTransactionJpaRepository.save(accountTransactionEntity);
							List<TransactionContactsMappingEntity> transactionContactsMappingEntities = transactionContactsMappingJpaRepository
									.findByAccountTransactionEntityAccountTransactionIdAndActiveFlag(a.getId(), 1);
							if (transactionContactsMappingEntities.size() > 0) {
								for (TransactionContactsMappingEntity t : transactionContactsMappingEntities) {
									TransactionContactsMappingEntity transactionContactsMappingEntity = new TransactionContactsMappingEntity();
									transactionContactsMappingEntity
											.setAccountTransactionEntity(accountTransactionEntity);
									transactionContactsMappingEntity.setContactMaster(t.getContactMaster());
									transactionContactsMappingEntity.setActiveFlag(1);
									transactionContactsMappingJpaRepository.save(transactionContactsMappingEntity);
								}
							}

							List<TransactionBeneficiaryMappingEntity> transactionBeneficiaryMappingEntities = transactionBeneficiaryMappingJpaRepository
									.findByAccountTransactionEntityAccountTransactionIdAndActiveFlag(a.getId(), 1);
							if (transactionBeneficiaryMappingEntities.size() > 0) {
								for (TransactionBeneficiaryMappingEntity t : transactionBeneficiaryMappingEntities) {
									TransactionBeneficiaryMappingEntity transactionBeneficiaryMappingEntity = new TransactionBeneficiaryMappingEntity();
									transactionBeneficiaryMappingEntity
											.setAccountTransactionEntity(accountTransactionEntity);
									transactionBeneficiaryMappingEntity.setActiveFlag(1);
									transactionBeneficiaryMappingEntity.setBenediciaryData(t.getBenediciaryData());
									transactionBeneficiaryMappingJpaRepository
											.save(transactionBeneficiaryMappingEntity);
								}
							}
							cal.setTime(accountTransactionEntity.getTransactionTimestamp());
//							cal.add(Calendar.DATE, 1);
							cal.set(Calendar.HOUR_OF_DAY, 0);
							cal.set(Calendar.MINUTE, 0);
							cal.set(Calendar.SECOND, 0);
//							System.out.println(cal.getTime());

							EuroHistDataEntity euroHistDataEntity = euroHistoryDataService
									.getEuroHistoryDate(cal.getTime());
							if (euroHistDataEntity != null) {
								SetDataInAccountTransaction(euroHistDataEntity, accountTransactionEntity);
							}
//							logger.info("Account entity craeted");
//							logger.info("Account Entity Id:" + accountTransactionEntity.getAccountTransactionId());
							accountTransactionEntity.setTransactionId(
									CommonUtils.getTransactionId(a.getLinkedAccounts().getLinkedAccountId(),
											accountTransactionEntity.getAccountTransactionId(), "S"));
							accountTransactionEntity.setBaseCurrencyCodeMaster(a.getBaseCurrencyCodeMaster());
							accountTransactionJpaRepository.save(accountTransactionEntity);
							yearlyExpenseDataEntity = yearlyExpenseDataJpaRepository
									.findByLinkedAccountsLinkedAccountIdAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
											a.getLinkedAccounts().getLinkedAccountId(), dayOfYear,
											a.getTransactionType(), cat.getCategoryId().longValue(), 1,
											a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
											a.getMerchantMaster() != null ? a.getMerchantMaster().getMerchantId()
													: null,
											a.getTransactionModes().getTransactionModeId());
							if (yearlyExpenseDataEntity != null) {
								yearlyExpenseDataEntity.setTransactionAmount(
										yearlyExpenseDataEntity.getTransactionAmount() + cat.getAmount());
							} else {
								yearlyExpenseDataEntity = new YearlyExpenseDataEntity();
								yearlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
								yearlyExpenseDataEntity.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
								yearlyExpenseDataEntity.setBalanceAmount(cat.getAmount());
								yearlyExpenseDataEntity.setCategoryId(cat.getCategoryId().longValue());
								yearlyExpenseDataEntity.setCreatedTimeStamp(new Date());
								yearlyExpenseDataEntity.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
								yearlyExpenseDataEntity.setLastModifiedTimeStamp(null);
								yearlyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
								yearlyExpenseDataEntity.setModifiedTimeStamp(null);
								yearlyExpenseDataEntity.setTransactionAmount(cat.getAmount());
								yearlyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
								yearlyExpenseDataEntity.setYears(dayOfYear);
								yearlyExpenseDataEntity.setMerchantMaster(a.getMerchantMaster());
								yearlyExpenseDataEntity.setTransactionModes(a.getTransactionModes());
							}
							yearlyExpenseDataEntity = this.yearlyExpenseDataJpaRepository.save(yearlyExpenseDataEntity);
							// logger.info("yearlyExpenseDataEntity:" + yearlyExpenseDataEntity);
							monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository
									.findByLinkedAccountsLinkedAccountIdAndMonthAndYearsAndTypeOfTransactionAndCategoryIdAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
											a.getLinkedAccounts().getLinkedAccountId(), dayOfMonth, dayOfYear,
											a.getTransactionType(), cat.getCategoryId().longValue(), 1,
											a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
											a.getMerchantMaster() != null ? a.getMerchantMaster().getMerchantId()
													: null,
											a.getTransactionModes().getTransactionModeId());
							HashMap<String, Double> dateAndAmountMap = new HashMap<String, Double>();
							if (monthlyExpenseDataEntity != null) {
								// monthlyExpenseDataEntity.setBalanceAmount(monthlyExpenseDataEntity.getBalanceAmount()
								// + cat.getAmount());
								monthlyExpenseDataEntity.setTransactionAmount(
										monthlyExpenseDataEntity.getTransactionAmount() + cat.getAmount());
								if (monthlyExpenseDataEntity.getCount() != null) {
									monthlyExpenseDataEntity.setCount(monthlyExpenseDataEntity.getCount() + 1);
								} else {
									monthlyExpenseDataEntity.setCount(1);
								}
								String value = monthlyExpenseDataEntity.getAmountDate();
								value = value.substring(1, value.length() - 1); // remove curly brackets
								String[] keyValuePairs = value.split(","); // split the string to creat key-value pairs
								dateAndAmountMap = new HashMap<String, Double>();

								for (String pair : keyValuePairs) // iterate over the pairs
								{
									String[] entry = pair.split("="); // split the pairs to get key and value
									dateAndAmountMap.put(entry[0].trim(), Double.valueOf(entry[1].trim())); // add them
																											// to the
																											// hashmap
																											// and trim
																											// whitespaces
								}
								if (dateAndAmountMap.containsKey(dateVal)) {
									dateAndAmountMap.put(dateVal, (dateAndAmountMap.get(dateVal) + cat.getAmount()));
								} else {
									dateAndAmountMap.put(dateVal, cat.getAmount());
								}
								monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
							} else {
								monthlyExpenseDataEntity = new MonthlyExpenseDataEntity();
								monthlyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
								monthlyExpenseDataEntity.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
								monthlyExpenseDataEntity.setBalanceAmount(cat.getAmount());
								monthlyExpenseDataEntity.setCategoryId(cat.getCategoryId().longValue());
								monthlyExpenseDataEntity.setCreatedTimeStamp(new Date());
								monthlyExpenseDataEntity.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
								monthlyExpenseDataEntity.setLastModifiedTimeStamp(null);
								monthlyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
								monthlyExpenseDataEntity.setModifiedTimeStamp(null);
								monthlyExpenseDataEntity.setTransactionAmount(cat.getAmount());
								monthlyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
								monthlyExpenseDataEntity.setMonth(dayOfMonth);
								monthlyExpenseDataEntity.setYears(dayOfYear);
								monthlyExpenseDataEntity.setMerchantMaster(a.getMerchantMaster());
								monthlyExpenseDataEntity.setTransactionModes(a.getTransactionModes());
								dateAndAmountMap = new HashMap<String, Double>();
								dateAndAmountMap.put(dateVal, cat.getAmount());
								monthlyExpenseDataEntity.setAmountDate(dateAndAmountMap.toString());
								monthlyExpenseDataEntity.setCount(1);
							}

							monthlyExpenseDataEntity = this.monthlyExpenseDataJpaRepository
									.save(monthlyExpenseDataEntity);
							// System.out.println(monthlyExpenseDataEntity.getId());
							// logger.info("monthlyExpenseDataEntity:" + monthlyExpenseDataEntity);
							weeklyExpenseDataEntity = weeklyExpenseDataJpaRepository
									.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndTypeOfTransactionAndMonthAndYearsAndWeekAndActiveFlagAndCurrencyMasterCurrencyCodeIdAndMerchantMasterMerchantIdAndTransactionModesTransactionModeId(
											a.getLinkedAccounts().getLinkedAccountId(), cat.getCategoryId().longValue(),
											a.getTransactionType(), dayOfMonth, dayOfYear, dayOfWeek, 1,
											a.getTransactionCurrencyCodeMaster().getCurrencyCodeId(),
											a.getMerchantMaster() != null ? a.getMerchantMaster().getMerchantId()
													: null,
											a.getTransactionModes().getTransactionModeId());
							if (weeklyExpenseDataEntity != null) {
								weeklyExpenseDataEntity.setTransactionAmount(
										weeklyExpenseDataEntity.getTransactionAmount() + cat.getAmount());
							} else {
								weeklyExpenseDataEntity = new WeeklyExpenseDataEntity();
								weeklyExpenseDataEntity.setActiveFlag(Constants.ACTIVE_TRUE);
								weeklyExpenseDataEntity.setBalanceAmount(cat.getAmount().longValue());
								weeklyExpenseDataEntity.setCurrencyMaster(a.getTransactionCurrencyCodeMaster());
								weeklyExpenseDataEntity.setCategoryId(cat.getCategoryId().longValue());
								weeklyExpenseDataEntity.setCreatedTimeStamp(new Date());
								weeklyExpenseDataEntity.setCustomerMaster(a.getLinkedAccounts().getCustomerMaster());
								weeklyExpenseDataEntity.setLastModifiedTimeStamp(null);
								weeklyExpenseDataEntity.setLinkedAccounts(a.getLinkedAccounts());
								weeklyExpenseDataEntity.setModifiedTimeStamp(null);
								weeklyExpenseDataEntity.setTransactionAmount(cat.getAmount());
								weeklyExpenseDataEntity.setTypeOfTransaction(a.getTransactionType());
								weeklyExpenseDataEntity.setMonth(dayOfMonth);
								weeklyExpenseDataEntity.setYears(dayOfYear);
								weeklyExpenseDataEntity.setWeek(dayOfWeek);
								weeklyExpenseDataEntity.setMerchantMaster(a.getMerchantMaster());
								weeklyExpenseDataEntity.setTransactionModes(a.getTransactionModes());
								weeklyExpenseDataEntity.setRemarks("RECORD CREATED FROM SPLIT ");
							}
							weeklyExpenseDataEntity = this.weeklyExpenseDataJpaRepository.save(weeklyExpenseDataEntity);
							// logger.info(weeklyExpenseDataEntity);
							// System.out.println(weeklyExpenseDataEntity.getId());
							PopularCategoryDetailsEntity popularCategoryDetailsEntity = popularCategoryDetailsJpaRepository
									.findByLinkedAccountsLinkedAccountIdAndCategoryIdAndType(
											a.getLinkedAccounts().getLinkedAccountId(), cat.getCategoryId().longValue(),
											a.getTransactionType());
							if (popularCategoryDetailsEntity != null) {
								popularCategoryDetailsEntity.setCount(popularCategoryDetailsEntity.getCount() != null
										? popularCategoryDetailsEntity.getCount() + 1
										: 0);
								popularCategoryDetailsEntity.setTimestamp(new Date());
								popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
							} else {
								popularCategoryDetailsEntity = new PopularCategoryDetailsEntity();
								popularCategoryDetailsEntity.setCategoryId(cat.getCategoryId().longValue());
								popularCategoryDetailsEntity.setCount(1);
								popularCategoryDetailsEntity.setLinkedAccounts(a.getLinkedAccounts());
								popularCategoryDetailsEntity.setType(a.getTransactionType());
								popularCategoryDetailsEntity.setTimestamp(new Date());
								popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
							}
							try {
								SendNotification(accountTransactionEntity);
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
					List<AccountTransactionEntity> accountTransactionEntity2 = null;
					if (a.getInactivatedId() == null) {
						accountTransactionEntity2 = accountTransactionJpaRepository
								.findByInactivatedIdAndActiveFlag(a.getId(), 1);
					} else if (a.getInactivatedId() != null) {
						accountTransactionEntity2 = accountTransactionJpaRepository
								.findByInactivatedIdAndActiveFlag(a.getInactivatedId(), 1);
					}
//					logger.info("Transactions size:"+accountTransactionEntity2.size());
//					logger.info("Transaction id:"+a.getTransactionId());

					PredictionTransactionsEntity predictionTransactinsEntity = predictionTransactionsJpaRepository
							.findByTransactionId(a.getTransactionId());
					if (predictionTransactinsEntity != null) {
						// logger.info("Prediction present");
						int count = 1;
						for (AccountTransactionEntity acc : accountTransactionEntity2) {
							// logger.info(acc.getCategoryId()+" "+acc.getTransactionAmount());
							if (acc.getNotAExpense() == null || acc.getNotAExpense().compareTo("false") == 0) {

								if (count == 1) {
									predictionTransactinsEntity.setSplitCategory(acc.getCategoryId().toString());
									predictionTransactinsEntity.setSplitAmount(acc.getTransactionAmount().toString());
								} else {
									if (predictionTransactinsEntity.getSplitCategory() != null) {
										predictionTransactinsEntity
												.setSplitCategory(predictionTransactinsEntity.getSplitCategory() + ","
														+ acc.getCategoryId());
									}

									if (predictionTransactinsEntity.getSplitAmount() != null) {
										predictionTransactinsEntity
												.setSplitAmount(predictionTransactinsEntity.getSplitAmount() + ","
														+ acc.getTransactionAmount());
									}
								}

								predictionTransactinsEntity.setCompletedFlag(1);
								predictionTransactinsEntity.setUserInputDate(new Date());
								predictionTransactionsJpaRepository.save(predictionTransactinsEntity);
							}
							count++;
						}

					} else {
						// logger.info("Prediction Not present");
					}

					oldData = oldData + remarks;
					String remarksData = "";
					List<AccountTransactionEntity> accTransactionEntities = accountTransactionJpaRepository
							.findByInactivatedIdAndActiveFlag(dataModel.getParentId(), 1);
					if (accountTransactionEntities.size() > 0) {
						for (AccountTransactionEntity acc : accTransactionEntities) {
							if (acc.getTransactionType().compareTo(Constants.CREDIT) == 0) {
								if (remarksData.compareTo("") != 0) {
									remarksData = remarksData
											+ "," + incomeCategoryJpaRepository
													.findByIncomeCategoryId(acc.getCategoryId()).getIncomeCategoryName()
											+ ":" + acc.getTransactionAmount();
								} else {
									remarksData = remarksData + incomeCategoryJpaRepository
											.findByIncomeCategoryId(acc.getCategoryId()).getIncomeCategoryName() + ":"
											+ acc.getTransactionAmount();
								}
							} else {
								if (remarksData.compareTo("") != 0) {
									remarksData = remarksData + "," + categoriesJpaRepository
											.findByExpenseCategoryId(acc.getCategoryId()).getExpenseCategory() + ":"
											+ acc.getTransactionAmount();
								} else {
									remarksData = remarksData + categoriesJpaRepository
											.findByExpenseCategoryId(acc.getCategoryId()).getExpenseCategory() + ":"
											+ acc.getTransactionAmount();
								}
							}
						}
					}

					String operation = "";
					if (accTransactionEntities.size() == 1) {
						operation = "Un Split";
						remarks = remarks + "Un Split to" + remarksData;
						newData = newData + remarksData;
					} else {
						operation = "Split";
						remarks = remarks + "Split to" + remarksData;
						newData = newData + remarksData;
					}
//					System.out.println("OPeration:"+operation);
					setDataInAccountTransactionForSplit(operation, deviceImei, requestId, timestamp, channel,
							deviceMacAddress, ipaddress, latitude, longitude, oldData, newData, remarks,
							parentAccountTransactionEntity);
					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED, null, token),
							HttpStatus.OK);
				} else if (accountTransactionEntities.size() == 1) {
					// logger.info("1 RECORD");
					generalResponse = setDataForFreshTransaction(a, dataModel, deviceImei, requestId, timestamp,
							channel, deviceMacAddress, ipaddress, latitude, longitude, token);
				} else {
					// logger.info("Size 0");

					System.out.println("I AM ELSE" + accountTransactionEntities.size());
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(
					new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
							null, token),
					HttpStatus.OK);
		}
		return generalResponse;
	}

//	
//	
//	
	private void SendNotification(AccountTransactionEntity accountTransactionEntity) {

		System.out.println("send notification");
		Calendar cal = Calendar.getInstance();
		cal.setTime(accountTransactionEntity.getTransactionTimestamp());
		Integer dayOfMonth = cal.get(Calendar.MONTH) + 1; // 17
		Integer dayOfYear = cal.get(Calendar.YEAR); // 169
		Double expenseAmount = 0.0;
		BudgetMasterEntity budgetMasterEntity = budgetMasterJpaRepository
				.findByCustomerMasterCustomerIdAndMonthAndDayOfYearAndTransactionType(
						accountTransactionEntity.getLinkedAccounts().getCustomerMaster().getCustomerId(),
						dayOfMonth.longValue(), dayOfYear.longValue(), accountTransactionEntity.getTransactionType());
		if (budgetMasterEntity != null) {
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(accountTransactionEntity.getTransactionTimestamp());
			calendar.set(Calendar.DATE, 1);
			calendar.set(Calendar.SECOND, 0);
			calendar.set(Calendar.MINUTE, 0);
			calendar.set(Calendar.HOUR, 0);
			calendar.set(Calendar.HOUR_OF_DAY, 0);
			Date startDate = calendar.getTime();
			calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));
			calendar.set(Calendar.SECOND, 59);
			calendar.set(Calendar.MINUTE, 59);
			calendar.set(Calendar.HOUR, 23);
			calendar.set(Calendar.HOUR_OF_DAY, 23);
			Date endDate = calendar.getTime();
//			List<MonthlyExpenseDataEntity> monthlyExpenseDataEntity = monthlyExpenseDataJpaRepository.findByMonthAndYearAndTypeOfTransactionAndCategoryAndActiveFlag(dayOfMonth, dayOfYear, accountTransactionEntity.getType(), accountTransactionEntity.getCategory(), 1);
			List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository
					.findByActiveFlagAndTransactionTypeAndCategoryIdAndTransactionTimestampBetween(1,
							accountTransactionEntity.getTransactionType(), accountTransactionEntity.getCategoryId(),
							startDate, endDate);
			if (accountTransactionEntities.size() > 0) {
				for (AccountTransactionEntity m : accountTransactionEntities) {
					expenseAmount = expenseAmount + m.getTransactionAmount();
				}
			}
			BudgetDetailsEntity budgetDetailsEntity = budgetDetailsJpaRepository
					.findByCategoryIdAndBudgetMasterBudgetMasterIdAndBudgetMasterTransactionType(
							accountTransactionEntity.getCategoryId(), budgetMasterEntity.getBudgetMasterId(),
							accountTransactionEntity.getTransactionType());
			if (budgetDetailsEntity != null) {
				Double budgetPercentage = (expenseAmount / budgetDetailsEntity.getAmount()) * 100;
				DashboardConfigurationEntity dashboardConfigurationEntity = dashboardConfigurationJpaRepository
						.findByDashboardConfigurationId(16L);
				if (dashboardConfigurationEntity != null) {
//					System.out.println("BudgetPercentage:"+budgetPercentage +" "+"Threshold:"+dashboardConfigurationEntity.getValue());
//					String threshold = dashboardConfigurationEntity.getValue();
					if (Double.compare(budgetPercentage,
							Double.parseDouble(dashboardConfigurationEntity.getDashVal())) > 0) {
						dashboardConfigurationEntity = dashboardConfigurationJpaRepository
								.findByDashboardConfigurationId(17L);
						if (dashboardConfigurationEntity != null) {
							String msg = dashboardConfigurationEntity.getDashVal();
							msg = msg.replace("<threshold>", String.valueOf(Math.round(budgetPercentage)));
							if (accountTransactionEntity.getTransactionType() == "CR") {
								msg = msg.replace("<category>",
										incomeCategoryJpaRepository
												.findByIncomeCategoryId(accountTransactionEntity.getCategoryId())
												.getIncomeCategoryName().toLowerCase());
							} else {
								msg = msg.replace("<category>",
										categoriesJpaRepository
												.findByExpenseCategoryId(accountTransactionEntity.getCategoryId())
												.getExpenseCategory().toLowerCase());
							}
							List<String> tokens = new ArrayList<String>();
							PushTokenCustomerMappingEntity pushTokenCustomerMappingEntity = pushTokenCustomerMappingJpaRepository
									.findByCustomerId(
											budgetDetailsEntity.getBudgetMaster().getCustomerMaster().getCustomerId());
							if (pushTokenCustomerMappingEntity != null
									&& pushTokenCustomerMappingEntity.getPushToken() != null) {
								tokens.add(pushTokenCustomerMappingEntity.getPushToken());
							}
							if (tokens.size() > 0) {
								try {
									FilesUtil.sendNotification(tokens, msg);
								} catch (IOException e) {

									e.printStackTrace();
								}
							} else {
//								System.out.println("PUSH TOKEN NOT PRESSENT");
							}

						}
					}
				}
			}
		}
	}

//
//		
//
//	private void setDataInPopularCategory(Integer linkedAccountId, Integer category, String type,
//			Integer updatedCategoryId, Logger logger) {
//		// TODO Auto-generated method stub
//		logger.info("linked Account Id:" + linkedAccountId);
//		logger.info("From Category:" + category);
//		logger.info("Type:" + type);
//		logger.info("To category:" + updatedCategoryId);
//		try {
//			PopularCategoryDetailsEntity popularCategoryDetailsEntity = popularCategoryDetailsJpaRepository
//					.findByLinkedAccountIdAndCategoryIdAndType(linkedAccountId, category, type);
//			if (popularCategoryDetailsEntity != null) {
//				popularCategoryDetailsEntity.setCount(
//						popularCategoryDetailsEntity.getCount() != null ? popularCategoryDetailsEntity.getCount() - 1
//								: 0);
//				popularCategoryDetailsEntity.setTimestamp(new Date());
//				popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
//			}
//			popularCategoryDetailsEntity = popularCategoryDetailsJpaRepository
//					.findByLinkedAccountIdAndCategoryIdAndType(linkedAccountId, updatedCategoryId, type);
//			if (popularCategoryDetailsEntity != null) {
//				popularCategoryDetailsEntity.setCount(popularCategoryDetailsEntity.getCount() + 1);
//				popularCategoryDetailsEntity.setTimestamp(new Date());
//				popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
//			} else {
//				popularCategoryDetailsEntity = new PopularCategoryDetailsEntity();
//				popularCategoryDetailsEntity.setCategoryId(updatedCategoryId);
//				popularCategoryDetailsEntity.setCount(1);
//				popularCategoryDetailsEntity.setLinkedAccountId(linkedAccountId);
//				popularCategoryDetailsEntity.setType(type);
//				popularCategoryDetailsEntity.setTimestamp(new Date());
//				popularCategoryDetailsJpaRepository.save(popularCategoryDetailsEntity);
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//			logger.info("Change in popular categories Exception");
//			logger.error("Error :: ", e);
//		}
//
//	}
//
//	private void setDataInAccountTransactionCategoryChange( String msg,
//			AccountTransactionEntity oldAccountTransactionRecord, AccountTransactionEntity newAccountTransactionRecord, String deviceImei, String requestId, String timestamp, String channel, String deviceMacAddress, String ipaddress, Double latitude, Double longitude,String oldData,String newData) {
//		// TODO Auto-generated method stub
//		
//		if(oldAccountTransactionRecord.getInactivatedId()==null)
//		{
//			AccountTransactionHistoryEntity accountTransactionHistoryEntity = new AccountTransactionHistoryEntity();
//			accountTransactionHistoryEntity.setActiveFlag(oldAccountTransactionRecord.getActiveFlag());
//			accountTransactionHistoryEntity.setCategory(oldAccountTransactionRecord.getCategory());
//			accountTransactionHistoryEntity.setCurrency(oldAccountTransactionRecord.getCurrency());
//			accountTransactionHistoryEntity.setLastModifiedTimestamp(accountTransactionHistoryEntity.getLastModifiedTimestamp());
//			accountTransactionHistoryEntity.setLinkedAccountId(oldAccountTransactionRecord.getLinkedAccounts().getId());
//			if(oldAccountTransactionRecord.getMccCode()!=null)
//			{
//				accountTransactionHistoryEntity.setMccCode(oldAccountTransactionRecord.getMccCode().getId());
//			}
//			if(oldAccountTransactionRecord.getMerchantMaster()!=null)
//			{
//				accountTransactionHistoryEntity.setParentId(oldAccountTransactionRecord.getMerchantMaster().getId());
//			}
//			accountTransactionHistoryEntity.setMode(oldAccountTransactionRecord.getMode());
//			accountTransactionHistoryEntity.setNarration(oldAccountTransactionRecord.getNarration());
//			accountTransactionHistoryEntity.setTransactionAmount(oldAccountTransactionRecord.getTransactionAmount());
//			accountTransactionHistoryEntity.setTransactionId(oldAccountTransactionRecord.getTransactionId());
//			accountTransactionHistoryEntity.setTransactionTimestamp(oldAccountTransactionRecord.getTransactionTimestamp());
//			accountTransactionHistoryEntity.setType(oldAccountTransactionRecord.getType());
//			accountTransactionHistoryEntity.setSourceCurrency(oldAccountTransactionRecord.getSourceCurrency());
//			accountTransactionHistoryEntity.setDestinationCurrency(oldAccountTransactionRecord.getDestinationCurrency());
//			accountTransactionHistoryEntity.setBaseCurrency(oldAccountTransactionRecord.getBaseCurrency());
//			accountTransactionHistoryEntity
//			.setRemarks(oldAccountTransactionRecord.getRemarks());
//			accountTransactionHistoryEntity.setLatitude(oldAccountTransactionRecord.getLatitude());
//			accountTransactionHistoryEntity.setLongitude(oldAccountTransactionRecord.getLongitude());
//			accountTransactionHistoryEntity.setMapDescription(oldAccountTransactionRecord.getMapDescription());
//			accountTransactionHistoryEntity.setAttachmentList(oldAccountTransactionRecord.getAttachmentList());
//			accountTransactionHistoryEntity.setDeviceImei(deviceImei);
//			accountTransactionHistoryEntity.setRequestId(requestId);
//			accountTransactionHistoryEntity.setChannel(channel);
//			accountTransactionHistoryEntity.setDeviceMacAddress(deviceMacAddress);
//			accountTransactionHistoryEntity.setIpAddress(ipaddress);
//			accountTransactionHistoryEntity.setTimestamp(new Date());
//			accountTransactionHistoryEntity.setLatitude(oldAccountTransactionRecord.getLatitude());
//			accountTransactionHistoryEntity.setLongitude(oldAccountTransactionRecord.getLongitude());
//			accountTransactionHistoryEntity.setDeviceLatitude(latitude);
//			accountTransactionHistoryEntity.setDeviceLongitude(longitude);
//			accountTransactionHistoryEntity.setCustomerId(oldAccountTransactionRecord.getLinkedAccounts().getId());
//			
//			if(oldAccountTransactionRecord.getCategory()!=null && oldAccountTransactionRecord.getCategory()!=0 && newAccountTransactionRecord!=null && oldAccountTransactionRecord.getCategory()!=0)
//			{
//				String remarks =" ";
//				String oldCategoryName = "";
//				String newCategoryName = "";
//				if(oldAccountTransactionRecord.getType().compareTo(Constants.CREDIT)==0)
//				{
//					oldCategoryName = incomeCategoryJpaRepository.findOne(oldAccountTransactionRecord.getCategory()).getIncomeCategoryName();
//					newCategoryName  = incomeCategoryJpaRepository.findOne(newAccountTransactionRecord.getCategory()).getIncomeCategoryName();
//					remarks = oldCategoryName +"  is Categorized to  "+newCategoryName +" , Amount  :  "+oldAccountTransactionRecord.getTransactionAmount();
//				}
//				else
//				{
//					oldCategoryName = categoriesJpaRepository.findOne(oldAccountTransactionRecord.getCategory()).getExpenseCategory();
//					newCategoryName  = categoriesJpaRepository.findOne(newAccountTransactionRecord.getCategory()).getExpenseCategory();
//					remarks = oldCategoryName +"  is Categorized to  "+ newCategoryName +" , Amount  :  "+oldAccountTransactionRecord.getTransactionAmount();
//				}
//				accountTransactionHistoryEntity.setAccountTransactionRemarks(remarks);
//				accountTransactionHistoryEntity.setOldData(oldCategoryName+":"+oldAccountTransactionRecord.getTransactionAmount());
//				accountTransactionHistoryEntity.setNewData(newCategoryName+":"+oldAccountTransactionRecord.getTransactionAmount());
//				
//			}
//			accountTransactionHistoryEntity.setOperation(" Category Change ");
//			accountTransactionHistoryEntity.setAction("EDIT");
//			accountTransactionHistoryJpaRepository.save(accountTransactionHistoryEntity);
//		}
//		else
//		{
//			if(newAccountTransactionRecord.getInactivatedId()!=null)
//			{
//				AccountTransactionEntity accountTransactionEntity = accountTransactionJpaRepository.findOne(newAccountTransactionRecord.getInactivatedId());
//				AccountTransactionHistoryEntity accountTransactionHistoryEntity = new AccountTransactionHistoryEntity();
//				accountTransactionHistoryEntity.setActiveFlag(accountTransactionEntity.getActiveFlag());
//				accountTransactionHistoryEntity.setCategory(accountTransactionEntity.getCategory());
//				accountTransactionHistoryEntity.setCurrency(accountTransactionEntity.getCurrency());
//				accountTransactionHistoryEntity.setLastModifiedTimestamp(accountTransactionHistoryEntity.getLastModifiedTimestamp());
//				accountTransactionHistoryEntity.setLinkedAccountId(accountTransactionEntity.getLinkedAccounts().getId());
//				if(accountTransactionEntity.getMccCode()!=null)
//				{
//					accountTransactionHistoryEntity.setMccCode(accountTransactionEntity.getMccCode().getId());
//				}
//				if(accountTransactionEntity.getMerchantMaster()!=null)
//				{
//					accountTransactionHistoryEntity.setParentId(accountTransactionEntity.getMerchantMaster().getId());
//				}
//				accountTransactionHistoryEntity.setMode(accountTransactionEntity.getMode());
//				accountTransactionHistoryEntity.setNarration(accountTransactionEntity.getNarration());
//				accountTransactionHistoryEntity.setTransactionAmount(accountTransactionEntity.getTransactionAmount());
//				accountTransactionHistoryEntity.setTransactionId(accountTransactionEntity.getTransactionId());
//				accountTransactionHistoryEntity.setTransactionTimestamp(accountTransactionEntity.getTransactionTimestamp());
//				accountTransactionHistoryEntity.setType(accountTransactionEntity.getType());
//				accountTransactionHistoryEntity.setSourceCurrency(accountTransactionEntity.getSourceCurrency());
//				accountTransactionHistoryEntity.setDestinationCurrency(accountTransactionEntity.getDestinationCurrency());
//				accountTransactionHistoryEntity.setBaseCurrency(accountTransactionEntity.getBaseCurrency());
//				accountTransactionHistoryEntity
//				.setRemarks(accountTransactionEntity.getRemarks());
//				accountTransactionHistoryEntity.setLatitude(accountTransactionEntity.getLatitude());
//				accountTransactionHistoryEntity.setLongitude(accountTransactionEntity.getLongitude());
//				accountTransactionHistoryEntity.setMapDescription(accountTransactionEntity.getMapDescription());
//				accountTransactionHistoryEntity.setAttachmentList(accountTransactionEntity.getAttachmentList());
//				accountTransactionHistoryEntity.setDeviceImei(deviceImei);
//				accountTransactionHistoryEntity.setRequestId(requestId);
//				accountTransactionHistoryEntity.setChannel(channel);
//				accountTransactionHistoryEntity.setDeviceMacAddress(deviceMacAddress);
//				accountTransactionHistoryEntity.setIpAddress(ipaddress);
//				accountTransactionHistoryEntity.setTimestamp(new Date());
//				accountTransactionHistoryEntity.setLatitude(accountTransactionEntity.getLatitude());
//				accountTransactionHistoryEntity.setLongitude(accountTransactionEntity.getLongitude());
//				accountTransactionHistoryEntity.setDeviceLatitude(latitude);
//				accountTransactionHistoryEntity.setDeviceLongitude(longitude);
//				accountTransactionHistoryEntity.setCustomerId(accountTransactionEntity.getLinkedAccounts().getId());
//				
//				if(oldAccountTransactionRecord.getCategory()!=null && oldAccountTransactionRecord.getCategory()!=0 && newAccountTransactionRecord!=null && oldAccountTransactionRecord.getCategory()!=0)
//				{
//					String remarks =" ";
//					String oldCategoryName = "";
//					String newCategoryName = "";
//					if(oldAccountTransactionRecord.getType().compareTo(Constants.CREDIT)==0)
//					{
//						oldCategoryName = incomeCategoryJpaRepository.findOne(oldAccountTransactionRecord.getCategory()).getIncomeCategoryName();
//						newCategoryName  = incomeCategoryJpaRepository.findOne(newAccountTransactionRecord.getCategory()).getIncomeCategoryName();
//						remarks = oldCategoryName +"  is Categorized to  "+newCategoryName +" , Amount  :  "+oldAccountTransactionRecord.getTransactionAmount();
//					}
//					else
//					{
//						oldCategoryName = categoriesJpaRepository.findOne(oldAccountTransactionRecord.getCategory()).getExpenseCategory();
//						newCategoryName  = categoriesJpaRepository.findOne(newAccountTransactionRecord.getCategory()).getExpenseCategory();
//						remarks = oldCategoryName +"  is Categorized to  "+ newCategoryName +" , Amount  :  "+oldAccountTransactionRecord.getTransactionAmount();
//					}
//					accountTransactionHistoryEntity.setAccountTransactionRemarks(remarks);
//					
//				}
//				accountTransactionHistoryEntity.setOldData(oldData);
//                accountTransactionHistoryEntity.setNewData(newData);	
//                accountTransactionHistoryEntity.setOperation("Category Change");
//                accountTransactionHistoryEntity.setAction("EDIT");
//				accountTransactionHistoryJpaRepository.save(accountTransactionHistoryEntity);
//			  }
//			}
//		}
//
//	
	private void SetDataInAccountTransaction(EuroHistDataEntity euroHistDataEntity,
			AccountTransactionEntity accountTransactionEntity2) {
		// TODO Auto-generated method stub
		Double euroCurrency = 0.0;
		if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode() != null) {
			if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode().compareTo("INR") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getInr();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("AED") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getAed();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("QAR") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getQar();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("USD") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getUsd();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("GBP") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getGbp();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("AUD") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getAud();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("JPY") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getJpy();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("BRL") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getBrl();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("CAD") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getCad();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("SGD") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getSgd();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("MYR") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getMyr();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("CNY") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getCny();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("MXN") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getMxn();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("PHP") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getPhp();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			} else if (accountTransactionEntity2.getTransactionCurrencyCodeMaster().getCurrencyCode()
					.compareTo("IDR") == 0) {
				euroCurrency = accountTransactionEntity2.getTransactionAmount() / euroHistDataEntity.getIdr();
				accountTransactionEntity2.setSourceCurrency(euroCurrency);
			}
			setDestinationCurrency(accountTransactionEntity2, euroHistDataEntity);
		}

	}

//
	private void setDestinationCurrency(AccountTransactionEntity accountTransactionEntity2,
			EuroHistDataEntity euroHistDataEntity) {
		Double destinationCurrency = 0.0;
		// TODO Auto-generated method stub
		if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("INR") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getInr();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("AED") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getAed();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("QAR") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getQar();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("USD") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getUsd();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("GBP") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getGbp();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("AUD") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getAud();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("JPY") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getJpy();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("BRL") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getBrl();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("CAD") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getCad();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("SGD") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getSgd();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("MYR") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getMyr();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("CNY") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getCny();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("MXN") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getMxn();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("PHP") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getPhp();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		} else if (accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster()
				.getCurrencyCode().compareTo("IDR") == 0) {
			destinationCurrency = accountTransactionEntity2.getSourceCurrency() * euroHistDataEntity.getIdr();
			accountTransactionEntity2.setDestinationCurrency(destinationCurrency);
		}
		accountTransactionEntity2.setBaseCurrencyCodeMaster(
				accountTransactionEntity2.getLinkedAccounts().getCustomerMaster().getPreferredCurrencyCodeMaster());
		accountTransactionJpaRepository.save(accountTransactionEntity2);

	}

//	
//	
//	
//	
//	@PostMapping("mode/wise/getTransactions")
//	public ResponseEntity<GeneralResponse> getTransactionsDataModeWise(
//			@RequestHeader(value = Constants.HEADER_DEVICEIMEI) String deviceImei,
//			@RequestHeader(value = Constants.HEADER_DEVICENAME) String deviceName,
//			@RequestHeader(value = Constants.HEADER_REQUESTID) String requestId,
//			@RequestHeader(value = Constants.HEADER_TIMESTAMP) String timestamp,
//			@RequestHeader(value = Constants.HEADER_CHANNEL) String channel,
//			@RequestHeader(value = Constants.HEADER_IPADDRESS) String ipaddress,
//			@RequestHeader(value = Constants.HEADER_LATITUDE) Double latitude,
//			@RequestHeader(value = Constants.HEADER_LONGITUDE) Double longitude,
//			@RequestHeader(value = Constants.HEADER_DEVICEMAC) String deviceMacAddress,
//			@RequestHeader(value = Constants.HEADER_TOKEN) String token,
//            HttpServletRequest request,HttpServletResponse response,
//			@RequestBody String requestData) {
//		//Logger logger = Logger.getLogger("GetTransactionsModeWiseLogger");
//		logger.info(Constants.LOG_START);
//		ipaddress = CommonUtils.getClientIpAddress(request);
//		logger.info("Headers:"+"deviceId:"+deviceImei+",   timestamp : "+timestamp+", requestId : "+requestId+", channel : "+channel +" , deviceName : "+deviceName + ",ipaddress : "+ ipaddress+" , latitude : "+latitude +" , longitude : "+longitude +" , deviceMacAddress : "+deviceMacAddress );
//        ResponseEntity<GeneralResponse> generalResponse = commonUtils.jwtCheck(token);
//        if(generalResponse.getBody().getStatus()==200)
//		{
//			authenticateUserResponse = (LoginDataResponseModel) generalResponse.getBody().getData();
//		}
//		else
//		{
//			return generalResponse;
//	    }
//		if(authenticateUserResponse!=null)
//		{
//			DashboardFilterModel dataModel = null;
//			String sessionKey = requestData.substring(0, 16);
//			String decryptedBody =  cryptoJs.decrypt(requestData.substring(16), sessionKey);
//	        logger.info("After Decryption : "+ decryptedBody);
//	        try
//			{
//				if(requestData!=null)
//				{
//					dataModel = gson.fromJson(decryptedBody, DashboardFilterModel.class);
//				}
//			}
//			catch(Exception e)
//			{
//				e.printStackTrace();
//				logger.error("Error :: ", e);
//				logger.info("Exception occured at parsing model");
//			}
//	        logger.info("Request:"+gson.toJson(dataModel));
//	        
//			HashMap<String, GetTransactionResponseDataModel> getTransactionsMap = new HashMap<String, GetTransactionResponseDataModel>();
//			GetTransactionResponseDataModel transactionModel = null;
//			List<TransactionModesEntity> modes = (List<TransactionModesEntity>) modesJpaRepository.findAll();
//			HashMap<String, TransactionModesEntity> modesMap = new HashMap<String, TransactionModesEntity>();
//			if (modes.size() > 0) {
//				for (TransactionModesEntity m : modes) {
//					modesMap.put(m.getModeName(), m);
//					
//				}
//			}
//			try {
//				if (dataModel != null) {
//					//				if(filter.getCalenderSelectedFlag()!=null && filter.getCalenderSelectedFlag() ==1)
//					//				{
//					dataModel = CommonUtils.setDates(dataModel, logger);
//					//				}
//				}
//
//			} catch (Exception e) {
//				e.printStackTrace();
//			}
//			try {
////							System.out.println(
////									dataModel.getLinkedAccountId() + "-  " + dataModel.getStartDate() + "-" + dataModel.getEndDate());
//				List<AccountTransactionEntity> transacList = accountTransactionJpaRepository
//						.findByLinkedAccountsIdAndActiveFlagAndTransactionTimestampBetween(dataModel.getLinkedAccountId(),
//								1, dataModel.getStartDate(), dataModel.getEndDate());
////				System.out.println("Transaction lists:"+transacList.size());
//				if (transacList.size() > 0) {
//					for (AccountTransactionEntity transactions : transacList)
//					{
//						String key  = transactions.getMode();
//						if (getTransactionsMap.containsKey(key)) 
//						{
//							transactionModel = getTransactionsMap.get(key);
//							if (transactionModel.getAmount() != null) {
//								transactionModel
//								.setAmount(transactionModel.getAmount() + transactions.getTransactionAmount());
//							} else {
//								transactionModel.setAmount(transactions.getTransactionAmount());
//							}
//							 Calendar cal = Calendar.getInstance();
//							 cal.setTime(transactions.getTransactionTimestamp());
//							 cal.set(Calendar.HOUR_OF_DAY, 0);
//								cal.set(Calendar.MINUTE, 0);
//								cal.set(Calendar.SECOND, 0);
//						    	EuroHistDataEntity euroHistDataEntity = euroHistoryDataService.getEuroHistoryDate(cal.getTime());
//								
//							if(transactionModel.getAmountInUserPreferredCurrency()!=null)
//							{
//							    transactionModel.setAmountInUserPreferredCurrency(transactionModel.getAmountInUserPreferredCurrency()+euroHistoryDataService.getUserPreferedCurrenyAmount(euroHistDataEntity,transactions));
//							}
//							else
//							{
//							    transactionModel.setAmountInUserPreferredCurrency(euroHistoryDataService.getUserPreferedCurrenyAmount(euroHistDataEntity,transactions));
//							}
//							if(transactionModel.getAmountInAccountCurrency()!=null)
//							{
//								transactionModel.setAmountInAccountCurrency(transactionModel.getAmountInAccountCurrency()+euroHistoryDataService.getAccountTransactionAmount(euroHistDataEntity,transactions));
//							}
//							else
//							{
//								transactionModel.setAmountInAccountCurrency(euroHistoryDataService.getAccountTransactionAmount(euroHistDataEntity,transactions));
//							}
//							getTransactionsMap.put(key, transactionModel);
//						} else {
//
//							transactionModel = new GetTransactionResponseDataModel();
//							transactionModel.setAmount(transactions.getTransactionAmount());
//							 Calendar cal = Calendar.getInstance();
//							 cal.setTime(transactions.getTransactionTimestamp());
//							 cal.set(Calendar.HOUR_OF_DAY, 0);
//								cal.set(Calendar.MINUTE, 0);
//								cal.set(Calendar.SECOND, 0);
//							EuroHistDataEntity	euroHistDataEntity = euroHistoryDataService.getEuroHistoryDate(cal.getTime());
//	                        transactionModel.setUserPreferredCurrency(transactions.getLinkedAccounts().getCustomerMaster().getBaseCurrency());
//	                        transactionModel.setAmountInUserPreferredCurrency(euroHistoryDataService.getUserPreferedCurrenyAmount(euroHistDataEntity,transactions));
//	                        transactionModel.setAmountInAccountCurrency(euroHistoryDataService.getAccountTransactionAmount(euroHistDataEntity,transactions));
//	                        transactionModel.setAccountCurrency(transactions.getLinkedAccounts().getCurrency());
//	                        transactionModel.setMode(transactions.getMode());
//							transactionModel.setLinkedAccountId(dataModel.getLinkedAccountId());
//							if (transactions.getMode() != null) {
//								if ( modesMap.containsKey(transactionModel.getMode())) {
//									transactionModel.setImage(modesMap.get(transactionModel.getMode()).getModeLogo());
//									transactionModel.setMode(key);
//								}
//							}
//							getTransactionsMap.put(key, transactionModel);
//
//						}
//					}
//					//				System.out.println(getTransactionsMap.size());
//					if (getTransactionsMap.size() > 0) {
//						List<GetTransactionEncryptedResponseModel> data = new ArrayList<GetTransactionEncryptedResponseModel>();
//						GetTransactionEncryptedResponseModel model = null;
//						for(GetTransactionResponseDataModel d: getTransactionsMap.values())
//						{
//							model = new GetTransactionEncryptedResponseModel();
//							model.setAccountCurrency(d.getAccountCurrency());
//							if(d.getAmount()!=null)
//							{
//								model.setAmount(d.getAmount().toString());
//							}
//							if(d.getAmountInAccountCurrency()!=null)
//							{
//								model.setAmountInAccountCurrency(d.getAmountInAccountCurrency().toString());					
//							}
//			                if(d.getAmountInUserPreferredCurrency()!=null)
//			                {
//			                	model.setAmountInUserPreferredCurrency(d.getAmountInUserPreferredCurrency().toString());
//			                }
//			                model.setImage(d.getImage());
//			                model.setLinkedAccountId(d.getLinkedAccountId());
//			                model.setMode(d.getMode());
//							model.setUserPreferredCurrency(d.getUserPreferredCurrency());
//							data.add(model);
//						}
//						
//						sessionKey = Base64.encodeBase64String(CryptoJS.generateSessionKey()).substring(0, 16);
//						generalResponse = new ResponseEntity<GeneralResponse>(
//						new GeneralResponse(HttpServletResponse.SC_OK, Constants.REQUEST_COMPLETED,
//								sessionKey+cryptoJs.encrypt(ObjectParser.produceJson(data), sessionKey), authenticateUserResponse.getToken()),
//						HttpStatus.OK);
//
////						generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_OK,
////								Constants.REQUEST_COMPLETED, data, authenticateUserResponse.getToken()), HttpStatus.OK);
//					} else {
//						generalResponse = new ResponseEntity<GeneralResponse>(
//								new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
//										Constants.NO_DATA_AVAILABLE, null, authenticateUserResponse.getToken()),
//								HttpStatus.OK);
//					}
//				} else {
//					generalResponse = new ResponseEntity<GeneralResponse>(
//							new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.NO_DATA_AVAILABLE,
//									null, authenticateUserResponse.getToken()),
//							HttpStatus.OK);
//				}
//
//			} catch (Exception e) {
//				e.printStackTrace();
//				logger.error("Error :: ", e);
//				generalResponse = new ResponseEntity<GeneralResponse>(
//						new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, Constants.EXCEPTION_IN_SERVER,
//								null, authenticateUserResponse.getToken()),
//						HttpStatus.OK);
//			}
//        }
//		else
//		{
//			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,Constants.INVALID_CUSTOMER,HttpServletResponse.SC_CONFLICT,null), HttpStatus.OK);
//		}
//		
//		logger.info("Response:" + gson.toJson(generalResponse));
//		logger.info(Constants.LOG_END);
//		return generalResponse;
//	}
//	
//	
//	@GetMapping("/email/{customerId}/{month}/{year}")
//	public ResponseEntity<GeneralResponse> sendEmail(@PathVariable Integer month,@PathVariable Integer year,@PathVariable Long customerId) throws ParseException
//	{
//    	String str_Array[] = new String[2];
//		str_Array[0] ="ramyasam42@gmail.com";
//		CustomerMasterEntity customer = customerMasterJpaRepository.findOne(customerId);
//		str_Array[1] =customer.getUserEmail();
//			
//		Calendar cal = Calendar.getInstance();
//		cal.setTime(new Date());
//		String fromDate = year + "-" + month + "-" + 1 + " 00:00:00";
//		Date startDate = dateFormat.parse(fromDate);
//		cal.setTime(startDate);
//		int lastDate = cal.getActualMaximum(Calendar.DATE);
//		String toDate = year + "-" + month + "-" + lastDate + " 23:59:59";
//		Date endDate = dateFormat.parse(toDate);
//		HashMap<Integer, CategoryDetailsModel> incomeMap = new HashMap<Integer, CategoryDetailsModel>();
//		HashMap<Integer, CategoryDetailsModel> expenseMap = new HashMap<Integer, CategoryDetailsModel>();
//		CategoryDetailsModel model = null;
//		List<String> types = new ArrayList<String>();
//		types.add(Constants.CREDIT);
//		types.add(Constants.DEBIT);
//		for(String type :types)
//		{
//			BudgetMasterEntity budgtMasterEntity  = budgetMasterJpaRepository.findByCustomerMasterIdAndMonthAndYearAndType(customerId, month, year,type);
////			System.out.println(budgtMasterEntity);
//			if(budgtMasterEntity!=null)
//			{
//				List<BudgetDetailsEntity> budgetDetailsEntities = budgetDetailsJpaRepository.findByBudgetMasterId(budgtMasterEntity.getId());
////				System.out.println("Type:::::"+type +"   "+budgetDetailsEntities.size());
//				if(budgetDetailsEntities.size()>0)
//				{
//					for(BudgetDetailsEntity b: budgetDetailsEntities)
//					{
//						if(budgtMasterEntity.getType().compareTo(Constants.CREDIT)==0)
//						{
//							model = new CategoryDetailsModel();
//							IncomeCategoriesMasterEntity incomeEntity = incomeCategoryJpaRepository.findOne(b.getCategory());
//							model.setCategoryIcon(incomeEntity.getIcon());
//							model.setCategoryId(b.getCategory());
//							EuroHistDataEntity euroHistDataEntity = euroHistoryDataService.getEuroHistoryDate(new Date());
//							model.setAmount(0.0);
//							model.setBudgetAmount(euroHistoryDataService.getBudgetAmountIEuroCurrency(euroHistDataEntity, b.getAmount(), b.getCurrency()));
//							model.setCategoryName(incomeEntity.getIncomeCategoryName());
//							incomeMap.put(b.getCategory(),model);
//						}
//						else
//						{
//							model = new CategoryDetailsModel();
//							ExpenseCategoriesMasterEntity expenseEntity = categoriesJpaRepository.findOne(b.getCategory());
//							model.setCategoryIcon(expenseEntity.getIcon());
//							model.setCategoryId(b.getCategory());
//							model.setAmount(0.0);
//							EuroHistDataEntity euroHistDataEntity = euroHistoryDataService.getEuroHistoryDate(new Date());
//							model.setBudgetAmount(euroHistoryDataService.getBudgetAmountIEuroCurrency(euroHistDataEntity, b.getAmount(), b.getCurrency()));
//							model.setCategoryName(expenseEntity.getExpenseCategory());
//							expenseMap.put(b.getCategory(),model);
//						}
//					}
//				}
//			}
//		}
//		
//		
//		Double prevIncome = 0.0, prevExpense =0.0, preIncome = 0.0, preExpense = 0.0;
//		
//		if(startDate!=null && endDate!=null)
//		{
//			List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository.findByActiveFlagAndLinkedAccountsCustomerMasterIdAndTransactionTimestampBetween( 1, customerId,startDate,endDate);
//			if(accountTransactionEntities.size()>0)
//			{
//				for(AccountTransactionEntity acc: accountTransactionEntities)
//				{
//					if(acc.getType().compareTo(Constants.CREDIT)==0)
//					{
//						preIncome = preIncome+ acc.getSourceCurrency();
//						if(incomeMap.containsKey(acc.getCategory()))
//						{
//							model = incomeMap.get(acc.getCategory());
//							if(model.getAmount()!=null)
//							{
//								model.setAmount(model.getAmount()+Double.valueOf(Math.round(acc.getSourceCurrency())));
//							}
//							else
//							{
//								model.setAmount(Double.valueOf(Math.round(acc.getSourceCurrency())));
//							}
//							incomeMap.put(acc.getCategory(),model);
//						}
//					}
//					else
//					{
//						preExpense = preExpense+ acc.getSourceCurrency();
//						if(expenseMap.containsKey(acc.getCategory()))
//						{
//							model = expenseMap.get(acc.getCategory());
//							if(model.getAmount()!=null)
//							{
//								model.setAmount(model.getAmount()+Double.valueOf(Math.round(acc.getSourceCurrency())));
//							}
//							else
//							{
//								model.setAmount(Double.valueOf(Math.round(acc.getSourceCurrency())));
//							}
//							expenseMap.put(acc.getCategory(),model);
//						}
//					}
//				}
//			}
//			 cal.setTime(new Date());
//			 fromDate = year + "-" + (month-1) + "-" + 1 + " 00:00:00";
//			 startDate = dateFormat.parse(fromDate);
//			 cal.setTime(startDate);
//			 lastDate = cal.getActualMaximum(Calendar.DATE);
//			 toDate = year + "-" + (month-1) + "-" + lastDate + " 23:59:59";
//			 endDate = dateFormat.parse(toDate);
//			 
//			 accountTransactionEntities = accountTransactionJpaRepository.findByActiveFlagAndLinkedAccountsCustomerMasterIdAndTransactionTimestampBetween( 1, customerId,startDate,endDate);
//				if(accountTransactionEntities.size()>0)
//				{
//					for(AccountTransactionEntity acc: accountTransactionEntities)
//					{
//						if(acc.getType().compareTo(Constants.CREDIT)==0)
//						{
//							prevIncome = prevIncome+ acc.getSourceCurrency();
//						}
//						else
//						{
//							prevExpense = prevExpense+ acc.getSourceCurrency();
//						}
//					}
//				}
//			 
//			}
//		
//		    List<CategoryDetailsModel> incomeUnderUtilized = new ArrayList<>();
//		    List<CategoryDetailsModel> expenseUnderUtilized = new ArrayList<>();
//		    List<CategoryDetailsModel> incomeOverUtilized = new ArrayList<>();
//		    List<CategoryDetailsModel> expenseOverUtilized = new ArrayList<>();
//		    List<CategoryDetailsModel> incomeNeutral = new ArrayList<>();
//		    List<CategoryDetailsModel> expenseNeutral = new ArrayList<>();
//		    
//		    Integer incomeUnderUtilizedCount =0,expenseUnderUtilizedCount =0,incomeOverUtilizedCount=0,expenseOverUtilizedCount=0,incomeNeutralCount=0,expenseNeutralCount=0,expenseCount=0,incomeCount=0 ;
//		    
////		    System.out.println("Income and expense map:"+expenseMap.size()+"   "+incomeMap.size());
//		    Double per = 0.0;
//		    for(CategoryDetailsModel c: incomeMap.values())
//		    {
//		    	if(c.getAmount()!=null && c.getAmount()>0 && c.getCategoryId()!=18)
//		    	{
//		    		incomeCount = incomeCount + 1;
//		    		if(Double.compare(c.getAmount(), c.getBudgetAmount()) < 0)
//			    	{
//			    		incomeUnderUtilizedCount = incomeUnderUtilizedCount+1;
//			    		per = (c.getAmount()*100)/c.getBudgetAmount();
//			    		c.setPercentage(Math.round(per));
//			    		incomeUnderUtilized.add(c);
//			    	}
//			    	else if(Double.compare(c.getAmount(), c.getBudgetAmount()) > 0)
//			    	{
//			    		incomeOverUtilizedCount = incomeOverUtilizedCount+1;
//			    		per = (c.getAmount()*100)/c.getBudgetAmount();
//			    		c.setPercentage(Math.round(per));
//			    		incomeOverUtilized.add(c);
//			    	}
//			    	else
//			    	{
//			    		incomeNeutralCount = incomeNeutralCount+1;
//			    		per = (c.getAmount()*100)/c.getBudgetAmount();
//			    		c.setPercentage(Math.round(per));
//			    		incomeNeutral.add(c);
//			    	}
//		    	}
////		    	System.out.println(c.getAmount()+"  "+c.getBudgetAmount()+" "+c.getCategoryName());
//		    
//		    }
//		    for(CategoryDetailsModel c: expenseMap.values())
//		    {
//		    	expenseCount = expenseCount+1;
//		    	if(c.getAmount()!=null && c.getAmount()>0 && c.getCategoryId()!=18)
//		    	{
//		    		if(Double.compare(c.getAmount(), c.getBudgetAmount()) < 0)
//			    	{
//			    		expenseUnderUtilizedCount = expenseUnderUtilizedCount+1;
//			    		per = (c.getAmount()*100)/c.getBudgetAmount();
//			    		c.setPercentage(Math.round(per));                                                                                                          
//			    		expenseUnderUtilized.add(c);
//			    	}
//			    	else if(Double.compare(c.getAmount(), c.getBudgetAmount()) > 0)
//			    	{
//			    		expenseOverUtilizedCount = expenseOverUtilizedCount+1;
//			    		
//			    		per = (c.getAmount()*100)/c.getBudgetAmount();
//			    		c.setPercentage(Math.round(per));
//			    		expenseOverUtilized.add(c);
//			    	}
//			    	else
//			    	{
//			    		expenseNeutralCount = expenseNeutralCount+1;
//			    		per = (c.getAmount()*100)/c.getBudgetAmount();
//			    		c.setPercentage(Math.round(per));
//			    		expenseNeutral.add(c);
//			    	}
//		    	}
////		    	System.out.println(c.getAmount()+"  "+c.getBudgetAmount()+" "+c.getCategoryName());
//		    	
//		    }
//		    
////		    System.out.println(incomeUnderUtilized +"   "+ expenseUnderUtilized+"  " +  incomeOverUtilized+"  "+ expenseOverUtilized);
////		    System.out.println(incomeUnderUtilizedCount +"   "+ expenseUnderUtilizedCount+"  " +  incomeOverUtilizedCount+"  "+ expenseOverUtilizedCount);
//		    String message ="";
//		    String data ="";
////		    long incomePer = 0;
//		    long incomePercentage=0;
//		    long expensePercentage=0;
////		    long expensePer = 0;
//		    String incomeArrow ="";
//		    String expenseArrow = "";
////		    System.out.println("Previous income expense::"+prevIncome+"   "+prevExpense);
////		    System.out.println("Present income expense::"+preIncome+"   "+preExpense);
//		    if(Double.compare(prevIncome, preIncome) < 0)
//		    {
//		    	incomePercentage =Math.round((preIncome-prevIncome)*100/preIncome);
//		    	message = "Excellent !!!";
//		    	data = data +"Your Income has Iincreased by  <b>"+ incomePercentage+ "%</b>";
//		    	incomeArrow = "/media/pfm/income_up_arrow.png";
//		    }
//		    else if(Double.compare(prevIncome, preIncome) > 0)
//		    {
////		    	message =" Alert !!!";
//		    	incomePercentage =Math.round((-(preIncome-prevIncome)*100/preIncome))  ;
//		    	data = data+ "Your Income has decreased by <b>" +incomePercentage +"%</b>";
//		    	incomeArrow = "/media/pfm/income_down_arrow.png";
//		    }
//		    else
//		    {
//		    	message = "Good !!!";
//		    	data = data+ "Your Income has remain same ";
//		    }
//		    
//		    if(Double.compare(prevExpense, preExpense) < 0)
//		    {
//		    	message =" Alert !!! ";
//		    	expensePercentage =Math.round(((preExpense-prevExpense)*100/preExpense)) ;
//		    	expenseArrow = "/media/pfm/expense_up_arrow.png";
//		    	data = data+ "  And Expense has increased by <b>"+ expensePercentage+"%</b> compared to previous month";
//		    }
//		    else if(Double.compare(prevExpense, preExpense) > 0)
//		    {
////		    	message =" Excellent !!! ";
//		    	expensePercentage =Math.round((-(preExpense-prevExpense)*100/preExpense)) ;
//		    	expenseArrow = "/media/pfm/expense_down_arrow.png";
//		    	data = data+ "  And Expense has decreased by <b>"+expensePercentage+"%</b> compared to previous month";
//		    }
//		    else
//		    {
//		    	message = "Good !!!";
//		    	data = data+" And Expense has Remain same Compared to Previous Month";
//		    }
////		    System.out.println("Message:::::::::::"+message);
////		    System.out.println("Percentages::"+incomePercentage+"   "+expensePercentage);
////		    if(incomePercentage > 0 && expensePercentage>0)
////		    {
////		    	  incomePer = (incomePercentage)/incomePercentage+expensePercentage;
////				    
////				  expensePer = (expensePercentage)/incomePercentage+expensePercentage;
////		    }
//		  
////		    System.out.println("Per::::"+incomePer+"  "+expensePer);
//		    Map<String, String> inlineImages = new HashMap<String, String>();
//	        inlineImages.put("image1", "/media/pfm/"+new String(Base64.decodeBase64("YmcucG5n")));
//	        inlineImages.put("calendar", "/media/pfm/calendar.png");
////	        inlineImages.put("userImage", "/media/pfm/"+new String(Base64.decodeBase64(customer.getUserImage())));
//	        inlineImages.put("income", "/media/pfm/all_Income_icon.png");
//	        inlineImages.put("expense", "/media/pfm/all_expense_icon.png");
//	        if(expenseArrow!=null && expenseArrow.compareTo("")!=0)
//	        {
//	        	inlineImages.put("expenseArrow", expenseArrow);	
//	        }
//	        if(incomeArrow!=null && incomeArrow.compareTo("")!=0)
//	        {
//	        	inlineImages.put("incomeArrow", incomeArrow);	
//	        }
//	        
//	        
////	        inlineImages.put("message", message);
////	        inlineImages.put("data", data);
////	        inlineImages.put("incomeuparrow", "/media/pfm/income_up_arrow.png");
//	        
////	        inlineImages.put("expensedownward", "/media/pfm/expense_down_arrow.png");
////	        inlineImages.put("underuitilized", "/media/pfm/under-utilized.png");
////	        inlineImages.put("food", "/media/pfm/Food_icon.png");
////	        inlineImages.put("entertainment", "/media/pfm/Entertainment_icon.png");
////	        inlineImages.put("travel", "/media/pfm/Travel.png");
//	        inlineImages.put("appstore", "/media/pfm/app_store.png");
//	        inlineImages.put("googlepay", "/media/pfm/google_play.png");
//	        String msg="";
//	        DashboardConfigurationEntity dashboardConfigurationEntity = dashboardConfigurationJpaRepository.findOne(26);
//	        if(dashboardConfigurationEntity!=null && dashboardConfigurationEntity.getValue().compareTo("1")==0)
//	        {
//	        	if(incomeUnderUtilized.size()>0)
//		        {
//		        	msg = msg+"   <tr>                 \r\n" + 
//		        			"                <td valign=\"top\" style=\"padding:15px 30px 15px 30px;\">\r\n" + 
//		        			"                    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:0 0 30px 0;border-bottom:1px solid rgba(170, 170, 170, 0.5);\">\r\n" + 
//		        			"                      <tr>\r\n" + 
//		        			"                        <td width=\"50%\" valign=\"top\">\r\n" + 
//		        			"                          <span style=\"font-size:18px;color:rgba(69, 79, 99, 0.7);font-weight: 600;\"> Income Under Utilized Budget</span>\r\n" + 
//		        			"                          <p style=\"font-size: 32px;font-weight: 500;color:#454F63;\"></p>\r\n" + 
//		        			"                          <div style=\"padding-top:25px;\"><img src='http://63.142.252.161:8080/pfm/api/customer/dW5kZXItdXRpbGl6ZWQucG5n\\'></div>\r\n" + 
//		        			"                        </td>\r\n" + 
//		        			"                        <td width=\"50%\" align=\"right\" valign=\"top\">\r\n" + 
//		        			"                          <table width=\"80%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:10px 0 0 0;\">\r\n" + 
//		        			"                            <tr>\r\n" + 
//		        			"                              <td width=\"55%\" align=\"center\" valign=\"top\">\r\n" + 
//		        			"                                <p style=\"font-size:32px;\">\r\n" + 
//		        			"                                  <span style=\"background:#DFE4FB;padding:0 5px;\">"+incomeUnderUtilizedCount+"</span>\r\n" + 
//		        			"                                  <span>/</span>\r\n" + 
//		        			"                                  <span>"+incomeCount+"</span>\r\n" + 
//		        			"                                </p>\r\n" + 
//		        			"                              </td>\r\n" + 
//		        			"                              <td width=\"45%\" align=\"left\" valign=\"middle\">\r\n" + 
//		        			"                                <p style=\"font-size:14px;color:#454F63;padding-left:10px;\">Categories</p>\r\n" + 
//		        			"                              </td>\r\n" + 
//		        			"                            </tr>\r\n" + 
//		        			"                          </table>\r\n" + 
//		        			"\r\n" + 
//		        			"                          <table width=\"80%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:25px 0 0 0;\">";
//		           
//		            String innerMsg =  "";
//		        	int count=0;
//		        	for(CategoryDetailsModel c: incomeUnderUtilized)
//		        	{
//		        	
//		        		if(count==1)
//	        			{
//		        			innerMsg = innerMsg+"  <td width=\"50%\" align=\"center\" valign=\"top\">\r\n" + 
//		        					"                                <div><img src='http://63.142.252.161:8080/pfm/api/customer/"+c.getCategoryIcon()+"'></div>\r\n" + 
//		        					"                                <p style=\"color:#5E83F2;font-size:10px;font-weight:bold;\">"+c.getCategoryName()+" </p>\r\n" + 
//		        					"                                <p style=\"color:#454F63;font-size:10px;\"></p>\r\n" + 
//		        					"                                <p style=\"color:#5E83F2;font-size:24px;\">"+c.getPercentage()+"%</p>\r\n" + 
//		        					"                              </td></tr>";
////		        			System.out.println("Break  added");
//		        			count=0;
//	        			}
//		        		else
//		        		{
//		        			innerMsg = innerMsg+" <tr> <td width=\"50%\" align=\"center\" valign=\"top\">\r\n" + 
//		        					"                                <div><img src='http://63.142.252.161:8080/pfm/api/customer/"+c.getCategoryIcon()+"'></div>\r\n" + 
//		        					"                                <p style=\"color:#5E83F2;font-size:10px;font-weight:bold;\">"+c.getCategoryName()+" </p>\r\n" + 
//		        					"                                <p style=\"color:#454F63;font-size:10px;\"></p>\r\n" + 
//		        					"                                <p style=\"color:#5E83F2;font-size:24px;\">"+c.getPercentage()+"%</p>\r\n" + 
//		        					"                              </td>";
////		        			System.out.println("Break   added");
//		        			count=count+1;
//		        		}
//		        		
//		        	}
//		        	msg = msg+innerMsg+"   </table>\r\n" + 
//		        			"\r\n" + 
//		        			"                        </td>\r\n" + 
//		        			"                      </tr>\r\n" + 
//		        			"                    </table> \r\n" + 
//		        			"                 </td>		\r\n" + 
//		        			"              </tr>";
//		        }
//	        }
//	        
//	        dashboardConfigurationEntity = dashboardConfigurationJpaRepository.findOne(29);
//	        if(dashboardConfigurationEntity!=null && dashboardConfigurationEntity.getValue().compareTo("1")==0)
//	        {
//	        	 if(expenseOverUtilized.size()>0)
//	 	         {
//	 	        	msg = msg+"   <tr>                 \r\n" + 
//	 	        			"                <td valign=\"top\" style=\"padding:15px 30px 15px 30px;\">\r\n" + 
//	 	        			"                    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:0 0 30px 0;border-bottom:1px solid rgba(170, 170, 170, 0.5);\">\r\n" + 
//	 	        			"                      <tr>\r\n" + 
//	 	        			"                        <td width=\"50%\" valign=\"top\">\r\n" + 
//	 	        			"                          <span style=\"font-size:18px;color:rgba(69, 79, 99, 0.7);font-weight: 600;\"> Expense Over Utilized Budget</span>\r\n" + 
//	 	        			"                          <p style=\"font-size: 32px;font-weight: 500;color:#454F63;\"></p>\r\n" + 
//	 	        			"                          <div style=\"padding-top:25px;\"><img src='http://63.142.252.161:8080/pfm/api/customer/bGltaXQtZXhjZWVkZWQucG5n\\'></div>\r\n" + 
//	 	        			"                        </td>\r\n" + 
//	 	        			"                        <td width=\"50%\" align=\"right\" valign=\"top\">\r\n" + 
//	 	        			"                          <table width=\"80%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:10px 0 0 0;\">\r\n" + 
//	 	        			"                            <tr>\r\n" + 
//	 	        			"                              <td width=\"55%\" align=\"center\" valign=\"top\">\r\n" + 
//	 	        			"                                <p style=\"font-size:32px;\">\r\n" + 
//	 	        			"                                  <span style=\"background:#DFE4FB;padding:0 5px;\">"+expenseOverUtilizedCount+"</span>\r\n" + 
//	 	        			"                                  <span>/</span>\r\n" + 
//	 	        			"                                  <span>"+expenseCount+"</span>\r\n" + 
//	 	        			"                                </p>\r\n" + 
//	 	        			"                              </td>\r\n" + 
//	 	        			"                              <td width=\"45%\" align=\"left\" valign=\"middle\">\r\n" + 
//	 	        			"                                <p style=\"font-size:14px;color:#454F63;padding-left:10px;\">Categories</p>\r\n" + 
//	 	        			"                              </td>\r\n" + 
//	 	        			"                            </tr>\r\n" + 
//	 	        			"                          </table>\r\n" + 
//	 	        			"\r\n" + 
//	 	        			"                          <table width=\"80%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:25px 0 0 0;\">";
//	 	           
//	 	            String innerMsg =  "";
//	 	        	int count=0;
//	 	        	for(CategoryDetailsModel c: expenseOverUtilized)
//	 	        	{
//	 	        	
//	 	        		if(count==1)
//	         			{
//	 	        			innerMsg = innerMsg+"  <td width=\"50%\" align=\"center\" valign=\"top\">\r\n" + 
//	 	        					"                                <div><img src='http://63.142.252.161:8080/pfm/api/customer/"+c.getCategoryIcon()+"'></div>\r\n" + 
//	 	        					"                                <p style=\"color:#5E83F2;font-size:10px;font-weight:bold;\">"+c.getCategoryName()+"</p>\r\n" + 
//	 	        					"                                <p style=\"color:#454F63;font-size:10px;\"></p>\r\n" + 
//	 	        					"                                <p style=\"color:#5E83F2;font-size:24px;\">"+c.getPercentage()+"%</p>\r\n" + 
//	 	        					"                              </td></tr>";
////	 	        			System.out.println("Break  added");
//	 	        			count=0;
//	         			}
//	 	        		else
//	 	        		{
//	 	        			innerMsg = innerMsg+" <tr> <td width=\"50%\" align=\"center\" valign=\"top\">\r\n" + 
//	 	        					"                                <div><img src='http://63.142.252.161:8080/pfm/api/customer/"+c.getCategoryIcon()+"'></div>\r\n" + 
//	 	        					"                                <p style=\"color:#5E83F2;font-size:10px;font-weight:bold;\">"+c.getCategoryName()+"</p>\r\n" + 
//	 	        					"                                <p style=\"color:#454F63;font-size:10px;\"></p>\r\n" + 
//	 	        					"                                <p style=\"color:#5E83F2;font-size:24px;\">"+c.getPercentage()+"%</p>\r\n" + 
//	 	        					"                              </td>";
////	 	        			System.out.println("Break   added");
//	 	        			count=count+1;
//	 	        		}
//	 	        		
//	 	        	}
//	 	        	msg = msg+innerMsg+"   </table>\r\n" + 
//	 	        			"\r\n" + 
//	 	        			"                        </td>\r\n" + 
//	 	        			"                      </tr>\r\n" + 
//	 	        			"                    </table> \r\n" + 
//	 	        			"                 </td>		\r\n" + 
//	 	        			"              </tr>";
//	 	        }
//	        }
//	        
//	       
//	        dashboardConfigurationEntity = dashboardConfigurationJpaRepository.findOne(28);
//	        if(dashboardConfigurationEntity!=null && dashboardConfigurationEntity.getValue().compareTo("1")==0)
//	        {
//	        	 if(expenseUnderUtilized.size()>0)
//	 	        {
//	 	        	msg = msg+"   <tr>                 \r\n" + 
//	 	        			"                <td valign=\"top\" style=\"padding:15px 30px 15px 30px;\">\r\n" + 
//	 	        			"                    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:0 0 30px 0;border-bottom:1px solid rgba(170, 170, 170, 0.5);\">\r\n" + 
//	 	        			"                      <tr>\r\n" + 
//	 	        			"                        <td width=\"50%\" valign=\"top\">\r\n" + 
//	 	        			"                          <span style=\"font-size:18px;color:rgba(69, 79, 99, 0.7);font-weight: 600;\"> Expense Under Utilized Budget</span>\r\n" + 
//	 	        			"                          <p style=\"font-size: 32px;font-weight: 500;color:#454F63;\"></p>\r\n" + 
//	 	        			"                          <div style=\"padding-top:25px;\"><img src='http://63.142.252.161:8080/pfm/api/customer/dW5kZXItdXRpbGl6ZWQucG5n\\'></div>\r\n" + 
//	 	        			"                        </td>\r\n" + 
//	 	        			"                        <td width=\"50%\" align=\"right\" valign=\"top\">\r\n" + 
//	 	        			"                          <table width=\"80%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:10px 0 0 0;\">\r\n" + 
//	 	        			"                            <tr>\r\n" + 
//	 	        			"                              <td width=\"55%\" align=\"center\" valign=\"top\">\r\n" + 
//	 	        			"                                <p style=\"font-size:32px;\">\r\n" + 
//	 	        			"                                  <span style=\"background:#DFE4FB;padding:0 5px;\">"+expenseUnderUtilizedCount+"</span>\r\n" + 
//	 	        			"                                  <span>/</span>\r\n" + 
//	 	        			"                                  <span>"+expenseCount+"</span>\r\n" + 
//	 	        			"                                </p>\r\n" + 
//	 	        			"                              </td>\r\n" + 
//	 	        			"                              <td width=\"45%\" align=\"left\" valign=\"middle\">\r\n" + 
//	 	        			"                                <p style=\"font-size:14px;color:#454F63;padding-left:10px;\">Categories</p>\r\n" + 
//	 	        			"                              </td>\r\n" + 
//	 	        			"                            </tr>\r\n" + 
//	 	        			"                          </table>\r\n" + 
//	 	        			"\r\n" + 
//	 	        			"                          <table width=\"80%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:25px 0 0 0;\">";
//	 	           
//	 	            String innerMsg =  "";
//	 	        	int count=0;
//	 	        	for(CategoryDetailsModel c: expenseUnderUtilized)
//	 	        	{
//	 	        	
//	 	        		if(count==1)
//	         			{
//	 	        			innerMsg = innerMsg+"  <td width=\"50%\" align=\"center\" valign=\"top\">\r\n" + 
//	 	        					"                                <div><img src='http://63.142.252.161:8080/pfm/api/customer/"+c.getCategoryIcon()+"'></div>\r\n" + 
//	 	        					"                                <p style=\"color:#5E83F2;font-size:10px;font-weight:bold;\">"+c.getCategoryName()+"</p>\r\n" + 
//	 	        					"                                <p style=\"color:#454F63;font-size:10px;\"></p>\r\n" + 
//	 	        					"                                <p style=\"color:#5E83F2;font-size:24px;\">"+c.getPercentage()+"%</p>\r\n" + 
//	 	        					"                              </td></tr>";
////	 	        			System.out.println("Break  added");
//	 	        			count=0;
//	         			}
//	 	        		else
//	 	        		{
//	 	        			innerMsg = innerMsg+" <tr> <td width=\"50%\" align=\"center\" valign=\"top\">\r\n" + 
//	 	        					"                                <div><img src='http://63.142.252.161:8080/pfm/api/customer/"+c.getCategoryIcon()+"'></div>\r\n" + 
//	 	        					"                                <p style=\"color:#5E83F2;font-size:10px;font-weight:bold;\">"+c.getCategoryName()+"</p>\r\n" + 
//	 	        					"                                <p style=\"color:#454F63;font-size:10px;\"></p>\r\n" + 
//	 	        					"                                <p style=\"color:#5E83F2;font-size:24px;\">"+c.getPercentage()+"%</p>\r\n" + 
//	 	        					"                              </td>";
////	 	        			System.out.println("Break   added");
//	 	        			count=count+1;
//	 	        		}
//	 	        		
//	 	        	}
//	 	        	msg = msg+innerMsg+"   </table>\r\n" + 
//	 	        			"\r\n" + 
//	 	        			"                        </td>\r\n" + 
//	 	        			"                      </tr>\r\n" + 
//	 	        			"                    </table> \r\n" + 
//	 	        			"                 </td>		\r\n" + 
//	 	        			"              </tr>";
//	 	        }
//	        }
//	        
//	        dashboardConfigurationEntity = dashboardConfigurationJpaRepository.findOne(27);
//	        if(dashboardConfigurationEntity!=null && dashboardConfigurationEntity.getValue().compareTo("1")==0)
//	        {
//
//		        if(incomeOverUtilized.size()>0)
//		        {
//		        	msg = msg+"   <tr>                 \r\n" + 
//		        			"                <td valign=\"top\" style=\"padding:15px 30px 15px 30px;\">\r\n" + 
//		        			"                    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:0 0 30px 0;border-bottom:1px solid rgba(170, 170, 170, 0.5);\">\r\n" + 
//		        			"                      <tr>\r\n" + 
//		        			"                        <td width=\"50%\" valign=\"top\">\r\n" + 
//		        			"                          <span style=\"font-size:18px;color:rgba(69, 79, 99, 0.7);font-weight: 600;\"> Income Over Utilized Budget</span>\r\n" + 
//		        			"                          <p style=\"font-size: 32px;font-weight: 500;color:#454F63;\"></p>\r\n" + 
//		        			"                          <div style=\"padding-top:25px;\"><img src='http://63.142.252.161:8080/pfm/api/customer/bGltaXQtZXhjZWVkZWQucG5n\\'></div>\r\n" + 
//		        			"                        </td>\r\n" + 
//		        			"                        <td width=\"50%\" align=\"right\" valign=\"top\">\r\n" + 
//		        			"                          <table width=\"80%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:10px 0 0 0;\">\r\n" + 
//		        			"                            <tr>\r\n" + 
//		        			"                              <td width=\"55%\" align=\"center\" valign=\"top\">\r\n" + 
//		        			"                                <p style=\"font-size:32px;\">\r\n" + 
//		        			"                                  <span style=\"background:#DFE4FB;padding:0 5px;\">"+incomeOverUtilizedCount+"</span>\r\n" + 
//		        			"                                  <span>/</span>\r\n" + 
//		        			"                                  <span>"+incomeCount+"</span>\r\n" + 
//		        			"                                </p>\r\n" + 
//		        			"                              </td>\r\n" + 
//		        			"                              <td width=\"45%\" align=\"left\" valign=\"middle\">\r\n" + 
//		        			"                                <p style=\"font-size:14px;color:#454F63;padding-left:10px;\">Categories</p>\r\n" + 
//		        			"                              </td>\r\n" + 
//		        			"                            </tr>\r\n" + 
//		        			"                          </table>\r\n" + 
//		        			"\r\n" + 
//		        			"                          <table width=\"80%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"padding:25px 0 0 0;\">";
//		           
//		            String innerMsg =  "";
//		        	int count=0;
//		        	for(CategoryDetailsModel c: incomeOverUtilized)
//		        	{
//		        	
//		        		if(count==1)
//	        			{
//		        			innerMsg = innerMsg+"  <td width=\"50%\" align=\"center\" valign=\"top\">\r\n" + 
//		        					"                                <div><img src='http://63.142.252.161:8080/pfm/api/customer/"+c.getCategoryIcon()+"'></div>\r\n" + 
//		        					"                                <p style=\"color:#5E83F2;font-size:10px;font-weight:bold;\">"+c.getCategoryName()+"</p>\r\n" + 
//		        					"                                <p style=\"color:#454F63;font-size:10px;\"></p>\r\n" + 
//		        					"                                <p style=\"color:#5E83F2;font-size:24px;\">"+c.getPercentage()+"%</p>\r\n" + 
//		        					"                              </td></tr>";
////		        			System.out.println("Break  added");
//		        			count=0;
//	        			}
//		        		else
//		        		{
//		        			innerMsg = innerMsg+" <tr> <td width=\"50%\" align=\"center\" valign=\"top\">\r\n" + 
//		        					"                                <div><img src='http://63.142.252.161:8080/pfm/api/customer/"+c.getCategoryIcon()+"'></div>\r\n" + 
//		        					"                                <p style=\"color:#5E83F2;font-size:10px;font-weight:bold;\">"+c.getCategoryName()+"</p>\r\n" + 
//		        					"                                <p style=\"color:#454F63;font-size:10px;\"></p>\r\n" + 
//		        					"                                <p style=\"color:#5E83F2;font-size:24px;\">"+c.getPercentage()+"%</p>\r\n" + 
//		        					"                              </td>";
////		        			System.out.println("Break   added");
//		        			count=count+1;
//		        		}
//		        		
//		        	}
//		        	msg = msg+innerMsg+"   </table>\r\n" + 
//		        			"\r\n" + 
//		        			"                        </td>\r\n" + 
//		        			"                      </tr>\r\n" + 
//		        			"                    </table> \r\n" + 
//		        			"                 </td>		\r\n" + 
//		        			"              </tr>";
//		        }
//		    }
//	        Integer totalGoals =0;
//	        String goalIcon ="";
//	        int percentage =0;
//	        Integer goal = 0;
//	        boolean flag = false;
//	        String status = "";
//	        String goalName ="";
//	        String goalMessage="";
//	        String goalData = "";
//	        List<GoalDetailsEntity> goals = goalDetailsJpaRepository.findByActiveFlagAndCustomerMasterIdOrderByCompletedTimestampAsc(1, customerId);
//	        
//	        if(goals.size()>0)
//	        {
//	        	totalGoals = totalGoals+goals.size();
//	        	for(GoalDetailsEntity g: goals)
//	        	{
//	        		if(g.getStatus().compareTo("COMPLETED")==0)
//	        		{
//	        			if(flag == false)
//	        			{
//	        				goalIcon = goalCategoriesJpaRepository.findOne(g.getCategory()).getImage();
//	        				percentage=100;
//	        				status = "Completed";
//	        				goalMessage="Congratulations !!!";
//	        				goal = goal+ 1;
//	        				goalData= "You have made it. You are an achiever. Goals are good for health"; 
//	        				goalName =  g.getGoalName();
//	        			}
//	        			else if(flag == true)
//	        			{
//	        				goalIcon = goalCategoriesJpaRepository.findOne(g.getCategory()).getImage();
//	        				goal = goal+ 1;
//	        				percentage=100;
//	        				status = "Completed";
//	        				goalMessage="Congratulations !!!";
//	        				goalData= "You have made it. You are an achiever. Goals are good for health";
//	        				goalName =  g.getGoalName();
//	        			}
//	        		}
//	        		else 
//	        		{
//	        			if(flag == false)
//	        			{
//	        				goalIcon = goalCategoriesJpaRepository.findOne(g.getCategory()).getImage();
//	        				Double savedAmount =0.0;
//	        				List<GoalStatementsEntity> goalStatementsEntities = goalStatementsJpaRepository.findByRdNumber(g.getRdNumber());
//	        				if(goalStatementsEntities.size()>0)
//	        				{
//	        					for(GoalStatementsEntity s: goalStatementsEntities)
//	        					{
//	        						savedAmount = savedAmount+s.getTransactionAmount();
//	        					}
//	        				}
//	        				percentage =  (int) ((savedAmount*100)/g.getTotalAmountNeeded());
//	        				status = "Near To Completion";
//	        				goal = goal+ 1;
//	        				goalMessage="Keep going !!!";
//	        				goalData= "You are making good progress on your goals. Keep saving";
//	        				goalName =  g.getGoalName();
//	        				
//	        			}
//	        		}
//	        	}
//	        }
//	        try
//	        {
//	        	
//	        	String htmlBody = FilesUtil.getProperty("data1");
//	            MimeBodyPart messageBodyPart = new MimeBodyPart();
//		        htmlBody = htmlBody.replaceFirst("#backgroundImage", "/media/pfm/bg.png");
//		        htmlBody = htmlBody.replaceFirst("#name", customer.getUserName());
//		        htmlBody = htmlBody.replaceFirst("#monthAndYear", CommonUtils.getMonthName(month)+" "+year);
//		        htmlBody = htmlBody.replaceFirst("#message", message);
//		        htmlBody = htmlBody.replaceFirst("#data", data);
//		        htmlBody = htmlBody.replaceFirst("#incomePer", String.valueOf(incomePercentage));
//		        htmlBody = htmlBody.replaceFirst("#expensePer", String.valueOf(expensePercentage));
//		        htmlBody = htmlBody.replaceFirst("#Code", msg);
//		        htmlBody = htmlBody.replaceFirst("userImage", FilesUtil.getProperty("domainUrl")+customer.getUserImage());
//		        htmlBody = htmlBody.replaceFirst("goalCategoryIcon", FilesUtil.getProperty("domainUrl")+goalIcon);  
//		        htmlBody = htmlBody.replaceFirst("#goalname", goalName);
//		        htmlBody = htmlBody.replaceFirst("#percentage", String.valueOf(percentage));
//		        htmlBody = htmlBody.replaceFirst("#goalMessage", goalMessage);
//		        htmlBody = htmlBody.replaceFirst("#goalData", goalData);
//		        htmlBody = htmlBody.replaceFirst("#totalGoals", totalGoals.toString());
//		        htmlBody = htmlBody.replaceFirst("#goal", goal.toString());
//		        htmlBody = htmlBody.replaceFirst("#status", status);
//		        messageBodyPart.setContent(htmlBody, "text/html");
//		        
////		        System.out.println(htmlBody);
////		        System.out.println("::::::"+inlineImages+"  "+str_Array[0]+"  "+str_Array[1]+"  "+messageBodyPart);
//	        	send( htmlBody.toString(), inlineImages,str_Array,messageBodyPart);
//	         
//	        } catch (Exception ex) {
////	            System.out.println("Could not send email.");
//	            ex.printStackTrace();
//	        }
//	    
//		return null;
//	}
//		
//	
//	
//	
//	@GetMapping("/test1")
//	public ResponseEntity<GeneralResponse> test1(){
//		String str_Array[] = new String[1];
////		str_Array[0] ="krupa.hirani@apptmyz.com";
//		str_Array[0] ="ramyasam42@gmail.com";
////		str_Array[1] ="anusha.gazaram@apptmyz.com";
//
//		    Map<String, String> inlineImages = new HashMap<String, String>();
//	        inlineImages.put("image1", "/media/pfm/bg.png");
//	        inlineImages.put("calendar", "/media/pfm/calendar.png");
//	        inlineImages.put("userimage", "/media/pfm/user photo.png");
//	        inlineImages.put("income", "/media/pfm/all_Income_icon.png");
//	        inlineImages.put("expense", "/media/pfm/all_expense_icon.png");
//	        inlineImages.put("incomeuparrow", "/media/pfm/income_up_arrow.png");
//	        
//	        inlineImages.put("expensedownward", "/media/pfm/expense_down_arrow.png");
//	        inlineImages.put("underuitilized", "/media/pfm/under-utilized.png");
//	        inlineImages.put("food", "/media/pfm/Food_icon.png");
//	        inlineImages.put("entertainment", "/media/pfm/Entertainment_icon.png");
//	        inlineImages.put("travel", "/media/pfm/Travel.png");
////	        inlineImages.put("appstore", "/media/pfm/app_store.png");
////	        inlineImages.put("googlepay", "/media/pfm/google_play.png");
//	        try
//	        {
//	        	
//	        	String body = FilesUtil.getProperty("data1");
////	        	send( body.toString(), inlineImages,str_Array);
//	         
//	        } catch (Exception ex) {
////	            System.out.println("Could not send email.");
//	            ex.printStackTrace();
//	        }
//		return null;
//	}
//
//	
//	
//	
//	 public static void send( String htmlBody,
//	            Map<String, String> mapInlineImages, String[] mailIds, MimeBodyPart messageBodyPart)
//	                throws AddressException, MessagingException {
////		 System.out.println(mailIds);
////		 System.out.println(htmlBody);
//		 
//	        // sets SMTP server properties
//	        Properties props = new Properties();
//	        
//	        props.put("mail.smtp.host", "smtp.gmail.com");
//			props.put("mail.smtp.socketFactory.port", "465");
//			
//			props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
//			props.put("mail.smtp.starttls.enable", "true");
//			
//			props.put("mail.smtp.auth", "true");
//			props.put("mail.smtp.port", "587");
//	        props.put("mail.user", "ramya.tutiki@apptmyz.com");
//	        props.put("mail.password","abcd12345");
//	 
//	        // creates a new session with an authenticator
//	        Session session = Session.getInstance(props, new javax.mail.Authenticator() {
//			    protected PasswordAuthentication getPasswordAuthentication() {
//			        return new PasswordAuthentication("ramya.tutiki@apptmyz.com","abcd12345");
//			    }
//			});
////			String[] mailIds = mailList.toArray(new String[mailList.size()]);
//			InternetAddress[] address = new InternetAddress[mailIds.length];
//			for(int i =0; i< mailIds.length; i++)
//			  {
//
//			      try {
//					address[i] = new InternetAddress(mailIds[i]);
//				} catch (AddressException e) {
//					e.printStackTrace();
////					logger.error( "Exception in sending mail :",e);
//				}
//			  }
//	 
//	        // creates a new e-mail message
//			Message msg = new MimeMessage(session);
//			msg.setRecipients(Message.RecipientType.TO, address);
//			msg.setFrom(new InternetAddress("ramya.tutiki@apptmyz.com"));
//			msg.setSubject("PFM");
//			msg.setText("");
//	        msg.setSentDate(new Date());
//	 
//	        // creates message part
//	  
//	        // creates multi-part
//	        Multipart multipart = new MimeMultipart();
//	        multipart.addBodyPart(messageBodyPart);
//	 
//	        // adds inline image attachments
//	        if (mapInlineImages != null && mapInlineImages.size() > 0) {
//	            Set<String> setImageID = mapInlineImages.keySet();
//	             
//	            for (String contentId : setImageID) {
//	                MimeBodyPart imagePart = new MimeBodyPart();
//	                imagePart.setHeader("Content-ID", "<" + contentId + ">");
//	                imagePart.setDisposition(MimeBodyPart.INLINE);
//	                 
//	                String imageFilePath = mapInlineImages.get(contentId);
//	                try {
//	                    imagePart.attachFile(imageFilePath);
//	                } catch (IOException ex) {
//	                    ex.printStackTrace();
//	                }
//	 
//	                multipart.addBodyPart(imagePart);
//	            }
//	        }
//	 
//	        msg.setContent(multipart);
//
//	        Transport.send(msg);
//	    }
//	 
//	 
//	    @GetMapping("get/tran")
//		public void settransaction()
//		{
//			List<TransactionDetailsEntity> transactionDetailsEntities = (List<TransactionDetailsEntity>) transactionDetailsJpaRepository.findAll();
//			for(TransactionDetailsEntity t : transactionDetailsEntities)
//			{
//				if(t.getLinkedAccounts()==null)
//				{
////					System.out.println("Transaction details:"+t.getId()+" "+t.getTransactionId()+" "+t.getTransactionTimeStamp());
//					
//				}
//			}
//			System.out.println("Transaction details done");
//			
//			List<AccountTransactionEntity> accountTransactionEntities = (List<AccountTransactionEntity>) accountTransactionJpaRepository.findAll();
//			for(AccountTransactionEntity t : accountTransactionEntities)
//			{
//				if(t.getLinkedAccounts()==null)
//				{
////					System.out.println("account transactiondetails:"+t.getId()+" "+t.getTransactionId()+" "+t.getTransactionTimestamp()+"  "+t.getInactivatedId());
//				}
//			}
//			System.out.println("Transaction details done");
//					
//		}
//	    
//	    
//	    @GetMapping("chnage/transactions")
//	    public void changeTransactions()
//	    {
//	    	List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository.findByActiveFlagAndInactivatedIdIsNotNull(1);
//	    	if(accountTransactionEntities.size()>0)
//	    	{
//	    		
//	    		for(AccountTransactionEntity a: accountTransactionEntities)
//	    		{
//	    			AccountTransactionEntity accountTransactionEntity = accountTransactionJpaRepository.findOne(a.getInactivatedId());
//	    			if(accountTransactionEntity!=null)
//	    			{
//	    				if(a.getNarration()!=null && accountTransactionEntity.getNarration()!=null &&  a.getNarration().compareTo(accountTransactionEntity.getNarration()) == 0  && 
//	    						a.getTransactionTimestamp().compareTo(accountTransactionEntity.getTransactionTimestamp())==0
//	    						&& a.getMode().compareTo(accountTransactionEntity.getMode())==0 &&
//	    						
//	    						a.getType().compareTo(accountTransactionEntity.getType())==0)
//	    				{
////	    					System.out.println("issue");
////	    					System.out.println(a.getTransactionTimestamp()+"  "+a.getLinkedAccounts().getCustomerMaster().getId());
//	    				}
//	    				else
//	    				{
////	    					System.out.println("No data");
////	    					System.out.println(a.getTransactionId()+" "+a.getTransactionTimestamp()+"  "+a.getLinkedAccounts().getCustomerMaster().getId());
//	    					a.setInactivatedId(null);
//	    					accountTransactionJpaRepository.save(a);
////	    					System.out.println(accountTransactionEntity.getTransactionId()+" "+accountTransactionEntity.getTransactionTimestamp()+"  "+accountTransactionEntity.getLinkedAccounts().getCustomerMaster().getId());
//	    				}
//	    			}
//	    			
//	    		}
//	    	}
//	    }
//	    
//	    @GetMapping("change/category")
//	    public void changeCategory()
//	    {
//	    	List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository.findByCategoryIsNull();
//	    	if(accountTransactionEntities.size()>0)
//	    	{
//	    		for(AccountTransactionEntity acc: accountTransactionEntities)
//	    		{
//                        acc.setCategory(18);
//                        accountTransactionJpaRepository.save(acc);
//	    		}
//	    	}
//	    }
//	    
//	    @GetMapping("change/narration")
//	    public void changeNarrationTransactions()
//	    {
//	    	List<AccountTransactionEntity> accountTransactionEntities = accountTransactionJpaRepository.findByNarrationIsNull();
//	    	if(accountTransactionEntities.size()>0)
//	    	{
//	    		int count =0;
//	    		List<AccountTransactionEntity> accountTransactionEntities2 = new ArrayList<AccountTransactionEntity>();
//	    		for(AccountTransactionEntity a: accountTransactionEntities)
//	    		{
//	    			PredictionTransactinsEntity accountTransactionEntity = predictionTransactinsJpaRepository.findByTransactionId(a.getTransactionId());
//	    			if(accountTransactionEntity!=null)
//	    			{
////	    				System.out.println("Narration:"+a.getLinkedAccounts().getCustomerMaster().getId()+"  "+a.getNarration()+"  "+accountTransactionEntity.getNarration());
//	    				a.setNarration(accountTransactionEntity.getNarration());
//	    				accountTransactionEntities2.add(a);
//	    			}
//	    			else
//	    			{
//	    				if(a.getInactivatedId()!=null)
//	    				{
//	    				    System.out.println("Inactivated id is not null");	
//	    				    AccountTransactionEntity acc = accountTransactionJpaRepository.findOne(a.getInactivatedId());
//	    				    if(acc !=null)
//	    				    {
//	    				    	System.out.println("Narration");
//	    				    	System.out.println(acc.getNarration());
//	    				    	a.setNarration(acc.getNarration());
//	    				    	accountTransactionEntities2.add(a);
//	    				    }
//	    				}
//	    			}
//	    			if(count == 1000)
//    				{
//    					System.out.println(new Date());
//    					count=0;
//    					accountTransactionJpaRepository.save(accountTransactionEntities2);
//    				}
//    				count++;
//	    			
//	    		}
//	    		accountTransactionJpaRepository.save(accountTransactionEntities2);
//	    	}
//	    }
//	 
//		@GetMapping("delete/data")
//		public ResponseEntity<GeneralResponse> saveLocationAndAttachmentToTransaction()
//		{
//			ResponseEntity<GeneralResponse> generalResponse = null;
//			List<BeneficiaryDataEntity> beneficiaryDataEntities = beneficiaryDataJpaRepository.findByIdIsGreaterThan(5);
//			if(beneficiaryDataEntities.size()>0)
//			{
//				beneficiaryDataJpaRepository.delete(beneficiaryDataEntities);	
////				System.out.println("beneficiary deleted");
//			}
//			List<TransactionBeneficiaryMappingEntity> data = (List<TransactionBeneficiaryMappingEntity>) transactionBeneficiaryMappingJpaRepository.findAll();
//			if(data.size()>0)
//			{
//				transactionBeneficiaryMappingJpaRepository.delete(data);
////				System.out.println(" Transaction beneficiary deleted");
//			}
//			
//			return generalResponse;
//		}
//		
//
//		@GetMapping("delete/data/contacts")
//		public ResponseEntity<GeneralResponse> deletecontacts()
//		{
//			ResponseEntity<GeneralResponse> generalResponse = null;
//			List<TransactionContactsMappingEntity> transactionContactsMappingEntities = (List<TransactionContactsMappingEntity>) transactionContactsMappingJpaRepository.findAll();
//			if(transactionContactsMappingEntities.size()>0)
//			{
//				transactionContactsMappingJpaRepository.delete(transactionContactsMappingEntities);	
////				System.out.println("Contacts deleted");
//			}
//			
//			
//			return generalResponse;
//		}
//		
//
//	 
//	 	
//	
//	
//	
//	
//	
//	
//	
//	
//	
//	
//	
//
}
